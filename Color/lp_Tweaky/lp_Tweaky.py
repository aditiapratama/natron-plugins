# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_TweakyExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_TweakyExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_Tweaky"

def getLabel():
    return "lp_Tweaky"

def getVersion():
    return 1

def getGrouping():
    return "Color"

def getPluginDescription():
    return "Provides a variety of little tweaking-options, like Vibrance, WB-Slider, Tint, etc."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createDoubleParam("whitebalance", "white balance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("adjust white balance (ratio of yellow/orange to blue)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.whitebalance = param
    del param

    param = lastNode.createDoubleParam("colourtint", "tint")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("adjust tint (ratio of green to magenta)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colourtint = param
    del param

    param = lastNode.createDoubleParam("colourvibrance", "vibrance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("vibrance tries to boost the saturation of less saturated areas more than already saturated areas. You know this from Photoshop.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colourvibrance = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDoubleParam("highlightcorr", "highlight")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts Highlights.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.highlightcorr = param
    del param

    param = lastNode.createDoubleParam("shadowcorr", "shadows")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts Shadows.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowcorr = param
    del param

    param = lastNode.createSeparatorParam("sep02", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createDoubleParam("contrastclarity", "clarity")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Tries to sharpen/soften with care. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.contrastclarity = param
    del param

    param = lastNode.createSeparatorParam("sep03", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_Tweaky 1.0\n(c)2016 by lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(1877, 2872)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(1879, -643)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "RGBToHSV1"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("RGBToHSV1")
    lastNode.setLabel("RGBToHSV1")
    lastNode.setPosition(1879, 305)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSV1 = lastNode

    del lastNode
    # End of node "RGBToHSV1"

    # Start of node "VIBRANCE"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("VIBRANCE")
    lastNode.setLabel("VIBRANCE")
    lastNode.setPosition(1879, 438)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupVIBRANCE = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "VIBRANCE"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(939, 1602)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(939, 2055)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1924, -500)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1527, -500)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(984, 2434)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1879, 2408)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("copy")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("OutputChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "HSVToRGB1"
    lastNode = app.createNode("net.sf.openfx.HSVToRGB", 1, group)
    lastNode.setScriptName("HSVToRGB1")
    lastNode.setLabel("HSVToRGB1")
    lastNode.setPosition(1879, 1633)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVToRGB1 = lastNode

    del lastNode
    # End of node "HSVToRGB1"

    # Start of node "SharpenInvDiff1"
    lastNode = app.createNode("net.sf.cimg.CImgSharpenInvDiff", 2, group)
    lastNode.setScriptName("SharpenInvDiff1")
    lastNode.setLabel("SharpenInvDiff1")
    lastNode.setPosition(2230, 942)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupSharpenInvDiff1 = lastNode

    param = lastNode.getParam("amplitude")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "SharpenInvDiff1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(1879, 1245)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1527, 1582)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(1755, 1582)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(1710, 1723)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Max")
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "HIGHLIGHT"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("HIGHLIGHT")
    lastNode.setLabel("HIGHLIGHT")
    lastNode.setPosition(1879, 1875)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHIGHLIGHT = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maskChannel_Mask")
    if param is not None:
        param.set("RGBA.R")
        del param

    del lastNode
    # End of node "HIGHLIGHT"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(1755, 1894)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "SHADOW"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("SHADOW")
    lastNode.setLabel("SHADOW")
    lastNode.setPosition(1879, 2049)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSHADOW = lastNode

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maskChannel_Mask")
    if param is not None:
        param.set("RGBA.R")
        del param

    del lastNode
    # End of node "SHADOW"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(1755, 2063)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Multiply2"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply2")
    lastNode.setLabel("WB")
    lastNode.setPosition(1879, -286)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.162, 1)
        param.setValue(1, 2)
        del param

    del lastNode
    # End of node "Multiply2"

    # Start of node "Multiply3"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply3")
    lastNode.setLabel("TINT")
    lastNode.setPosition(1879, -128)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Multiply3"

    # Start of node "OCIOLogConvert1"
    lastNode = app.createNode("fr.inria.openfx.OCIOLogConvert", 1, group)
    lastNode.setScriptName("OCIOLogConvert1")
    lastNode.setLabel("OCIOLogConvert1")
    lastNode.setPosition(1879, 621)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupOCIOLogConvert1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    del lastNode
    # End of node "OCIOLogConvert1"

    # Start of node "OCIOLogConvert2_2"
    lastNode = app.createNode("fr.inria.openfx.OCIOLogConvert", 1, group)
    lastNode.setScriptName("OCIOLogConvert2_2")
    lastNode.setLabel("OCIOLogConvert2_2")
    lastNode.setPosition(1879, 1411)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.48, 0.66, 1)
    groupOCIOLogConvert2_2 = lastNode

    del lastNode
    # End of node "OCIOLogConvert2_2"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1879, 1050)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2275, 1069)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(1924, 830)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2275, 830)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "RGB709ToXYZ1"
    lastNode = app.createNode("net.sf.openfx.RGB709ToXYZ", 1, group)
    lastNode.setScriptName("RGB709ToXYZ1")
    lastNode.setLabel("RGB709ToXYZ1")
    lastNode.setPosition(1879, -418)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGB709ToXYZ1 = lastNode

    del lastNode
    # End of node "RGB709ToXYZ1"

    # Start of node "XYZToRGB7091"
    lastNode = app.createNode("net.sf.openfx.XYZToRGB709", 1, group)
    lastNode.setScriptName("XYZToRGB7091")
    lastNode.setLabel("XYZToRGB7091")
    lastNode.setPosition(1879, 50)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupXYZToRGB7091 = lastNode

    del lastNode
    # End of node "XYZToRGB7091"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(1257, 1731)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1302, 1582)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(939, 1841)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(1302, 1876)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1527, 2116)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge1)
    groupRGBToHSV1.connectInput(0, groupXYZToRGB7091)
    groupVIBRANCE.connectInput(0, groupRGBToHSV1)
    groupInvert1.connectInput(0, groupMerge2)
    groupDot1.connectInput(0, groupimg)
    groupDot2.connectInput(0, groupDot1)
    groupDot3.connectInput(0, groupInvert1)
    groupMerge1.connectInput(0, groupSHADOW)
    groupMerge1.connectInput(1, groupDot4)
    groupMerge1.connectInput(2, groupDot3)
    groupHSVToRGB1.connectInput(0, groupOCIOLogConvert2_2)
    groupSharpenInvDiff1.connectInput(0, groupDot11)
    groupBlur1.connectInput(0, groupShuffle2)
    groupDot5.connectInput(0, groupDot2)
    groupDot6.connectInput(0, groupDot5)
    groupSaturation1.connectInput(0, groupDot6)
    groupHIGHLIGHT.connectInput(0, groupHSVToRGB1)
    groupHIGHLIGHT.connectInput(1, groupDot7)
    groupDot7.connectInput(0, groupSaturation1)
    groupSHADOW.connectInput(0, groupHIGHLIGHT)
    groupSHADOW.connectInput(1, groupDot8)
    groupDot8.connectInput(0, groupDot7)
    groupMultiply2.connectInput(0, groupRGB709ToXYZ1)
    groupMultiply3.connectInput(0, groupMultiply2)
    groupOCIOLogConvert1.connectInput(0, groupVIBRANCE)
    groupOCIOLogConvert2_2.connectInput(0, groupBlur1)
    groupShuffle2.connectInput(0, groupDot10)
    groupShuffle2.connectInput(1, groupDot9)
    groupDot9.connectInput(0, groupSharpenInvDiff1)
    groupDot10.connectInput(0, groupOCIOLogConvert1)
    groupDot11.connectInput(0, groupDot10)
    groupRGB709ToXYZ1.connectInput(0, groupDot1)
    groupXYZToRGB7091.connectInput(0, groupMultiply3)
    groupConstant1.connectInput(0, groupDot12)
    groupDot12.connectInput(0, groupDot5)
    groupMerge2.connectInput(0, groupmask)
    groupMerge2.connectInput(1, groupDot13)
    groupDot13.connectInput(0, groupConstant1)
    groupDot4.connectInput(0, groupDot5)

    param = groupVIBRANCE.getParam("gamma")
    param.setExpression("if thisGroup.colourvibrance.get() > 0:\n\tret = (1+thisGroup.colourvibrance.get()*2)\nelse:\n\tret = 1+thisGroup.colourvibrance.get()", True, 1)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupSharpenInvDiff1.getParam("amplitude")
    param.setExpression("thisGroup.contrastclarity.get()*3", False, 0)
    del param
    param = groupSharpenInvDiff1.getParam("disableNode")
    param.setExpression("if thisGroup.contrastclarity.get() > 0:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupBlur1.getParam("size")
    param.setExpression("(thisGroup.contrastclarity.get()*-1)*2", False, 0)
    param.setExpression("(thisGroup.contrastclarity.get()*-1)*2", False, 1)
    del param
    param = groupBlur1.getParam("disableNode")
    param.setExpression("if thisGroup.contrastclarity.get() < 0:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupHIGHLIGHT.getParam("multiply")
    param.setExpression("thisGroup.highlightcorr.get()", False, 0)
    param.setExpression("thisGroup.highlightcorr.get()", False, 1)
    param.setExpression("thisGroup.highlightcorr.get()", False, 2)
    param.setExpression("thisGroup.highlightcorr.get()", False, 3)
    del param
    param = groupSHADOW.getParam("gamma")
    param.setExpression("1+thisGroup.shadowcorr.get()", False, 0)
    param.setExpression("1+thisGroup.shadowcorr.get()", False, 1)
    param.setExpression("1+thisGroup.shadowcorr.get()", False, 2)
    param.setExpression("1+thisGroup.shadowcorr.get()", False, 3)
    del param
    param = groupMultiply2.getParam("value")
    param.setExpression("1+thisGroup.whitebalance.get()", False, 2)
    del param
    param = groupMultiply3.getParam("value")
    param.setExpression("1-thisGroup.colourtint.get()", False, 1)
    del param

    try:
        extModule = sys.modules["lp_TweakyExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
