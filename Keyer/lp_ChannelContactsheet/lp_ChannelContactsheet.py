# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_ChannelContactsheetExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_ChannelContactsheetExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_ChannelContactsheet"

def getLabel():
    return "lp_ChannelContactsheet"

def getVersion():
    return 2

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "Displays an input image in different colourspaces to find a suitable key. Also lets you choose and key from such a channel right away :)\n\nHOW TO USE IT\nConnect an image and look out for a good, high-contrast channel you want to work from. Then, choose the suitable colourspace and channel you want to key from and switch the output from \"Contact Sheet\" to \"Keyer\". You can now use black point, white point, range controls etc. to adjust the key as needed. You can also invert the generated matte and premultiply your result right away.\n\nHOW DOES IT WORK\nThe input-channel gets reformatted to a smaller version of itself and then split into various different colourspaces, arranged into a grid. For the Keyer-mode, the same happens without the reformatting, with added controls for adjusting the key; the same controls are also found in lp_SimpleKeyer.\n\nThis tool is based on Tyler Lockards great Nuke Gizmo: http://www.nukepedia.com/gizmos/keyer/channelcontactsheet"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.3333, 0.6667, 0.498)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createChoiceParam("outputOperation", "ouput")
    entries = [ ("Contact Sheet", ""),
    ("Keyer", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("\"Contact Sheet\" will vizualise a broad selection of different channels in various colourspaces.\n\n\"Keyer\" will generate a Key from one of the shown channels, which can be chosen below.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.outputOperation = param
    del param

    param = lastNode.createSeparatorParam("sep01", " ")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createChoiceParam("keyerSpace", "key from")
    entries = [ ("RGB", ""),
    ("HSV", ""),
    ("HSL", ""),
    ("YUV", ""),
    ("YPbPr", ""),
    ("YCbCr", ""),
    ("XYZ", ""),
    ("L*a*b", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Choose in from which colourspace you want to key from.\n\nNote: to declutter the interface, only the 709-versions of some colourspace conversions (eg. YUV, YCbCr etc) are used; the difference between 601 and 709 is not really so big that it would be any real benefit.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyerSpace = param
    del param

    param = lastNode.createChoiceParam("keyerChannel", "in")
    entries = [ ("R channel", ""),
    ("G channel", ""),
    ("B channel", ""),
    ("Luma", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Choose which channel of the selected colourspace you want to key from.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.keyerChannel = param
    del param

    param = lastNode.createDoubleParam("keyBlack", "black point")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the black point for the Key.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyBlack = param
    del param

    param = lastNode.createDoubleParam("keyWhite", "white point")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Sets the white point for the Key.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyWhite = param
    del param

    param = lastNode.createDoubleParam("keyGamma", "gamma")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the gamma of the Key.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyGamma = param
    del param

    param = lastNode.createGroupParam("rngCntrl", "range controls")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setOpened(True)
    lastNode.rngCntrl = param
    del param

    param = lastNode.createBooleanParam("activateRange", "activate")

    # Add the param to the group, no need to add it to the page
    lastNode.rngCntrl.addParam(param)

    # Set param properties
    param.setHelp("Activates the range-selection.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.activateRange = param
    del param

    param = lastNode.createDoubleParam("whiteRange", "white range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.rngCntrl.addParam(param)

    # Set param properties
    param.setHelp("Set the end of the core-selection in a range. \nimagine all points (black, white, white range and black range) would sit on one line. Everything left of black point will be black, fade between black point and white point, everything between white point and white range will be solid white, fade between white range and black range, and again everything right of black range will be black. Hope that makes sense.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.whiteRange = param
    del param

    param = lastNode.createDoubleParam("blackRange", "black range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.rngCntrl.addParam(param)

    # Set param properties
    param.setHelp("Set the hard-end of the range. \nImagine all points (black, white, white range and black range) would sit on one line: everything left of black point will be black, fade between black point and white point, everything between white point and white range will be solid white, fade between white range and black range, and again everything right of black range will be black. Hope that makes sense.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.blackRange = param
    del param

    param = lastNode.createDoubleParam("gammaRange", "gamma")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.rngCntrl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.gammaRange = param
    del param

    param = lastNode.createSeparatorParam("sep02", " ")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createBooleanParam("keyBlackC", "clamp black")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyBlackC = param
    del param

    param = lastNode.createBooleanParam("keyWhiteC", "white clamp")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.keyWhiteC = param
    del param

    param = lastNode.createBooleanParam("keyPremult", "premultiply")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Premultiplies the output.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyPremult = param
    del param

    param = lastNode.createBooleanParam("keyInvert", "invert matte")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Inverts the generated matte.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.keyInvert = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("lp_ChannelContactsheet v2.0\n(c) 2016 lucas pfaff\ninspired by Tyler Lockards Nuke Gizmo")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "RGBToYUV7091"
    lastNode = app.createNode("net.sf.openfx.RGBToYUV709", 1, group)
    lastNode.setScriptName("RGBToYUV7091")
    lastNode.setLabel("RGBToYUV7091")
    lastNode.setPosition(2454, 1709)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYUV7091 = lastNode

    del lastNode
    # End of node "RGBToYUV7091"

    # Start of node "RGBToYPbPr7091"
    lastNode = app.createNode("net.sf.openfx.RGBToYPbPr709", 1, group)
    lastNode.setScriptName("RGBToYPbPr7091")
    lastNode.setLabel("RGBToYPbPr7091")
    lastNode.setPosition(2449, 2222)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYPbPr7091 = lastNode

    del lastNode
    # End of node "RGBToYPbPr7091"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(2239, 4855)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2300, -85)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(4479, -199)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4022, 0)
        param.setValue(4332, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.002124688820913434, 0)
        param.setValue(0.002124688820913434, 1)
        param.setValue(0.003035269910469651, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Reformat1"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat1")
    lastNode.setLabel("Reformat1")
    lastNode.setPosition(2300, 104)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat1 = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(768, 0)
        param.setValue(404, 1)
        del param

    param = lastNode.getParam("resize")
    if param is not None:
        param.set("fit")
        del param

    del lastNode
    # End of node "Reformat1"

    # Start of node "TransformRGB"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformRGB")
    lastNode.setLabel("TransformRGB")
    lastNode.setPosition(2701, 442)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformRGB = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(3628, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformRGB"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(4479, 551)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(2300, 238)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2345, 451)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "RGBToHSV1"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("RGBToHSV1")
    lastNode.setLabel("RGBToHSV1")
    lastNode.setPosition(2463, 719)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSV1 = lastNode

    del lastNode
    # End of node "RGBToHSV1"

    # Start of node "RGBToHSL1"
    lastNode = app.createNode("net.sf.openfx.RGBToHSL", 1, group)
    lastNode.setScriptName("RGBToHSL1")
    lastNode.setLabel("RGBToHSL1")
    lastNode.setPosition(2472, 971)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSL1 = lastNode

    del lastNode
    # End of node "RGBToHSL1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2345, 733)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "ShuffleR"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR")
    lastNode.setLabel("ShuffleR")
    lastNode.setPosition(2701, 562)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR"

    # Start of node "ShuffleG"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG")
    lastNode.setLabel("ShuffleG")
    lastNode.setPosition(2966, 523)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG"

    # Start of node "ShuffleB"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB")
    lastNode.setLabel("ShuffleB")
    lastNode.setPosition(3241, 547)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(2966, 437)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2345, 985)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "RGBToYCbCr7091"
    lastNode = app.createNode("net.sf.openfx.RGBToYCbCr709", 1, group)
    lastNode.setScriptName("RGBToYCbCr7091")
    lastNode.setLabel("RGBToYCbCr7091")
    lastNode.setPosition(2454, 2816)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYCbCr7091 = lastNode

    del lastNode
    # End of node "RGBToYCbCr7091"

    # Start of node "RGB709ToXYZ1"
    lastNode = app.createNode("net.sf.openfx.RGB709ToXYZ", 1, group)
    lastNode.setScriptName("RGB709ToXYZ1")
    lastNode.setLabel("RGB709ToXYZ1")
    lastNode.setPosition(2442, 3093)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGB709ToXYZ1 = lastNode

    del lastNode
    # End of node "RGB709ToXYZ1"

    # Start of node "RGB709ToLab1"
    lastNode = app.createNode("net.sf.openfx.RGB709ToLab", 1, group)
    lastNode.setScriptName("RGB709ToLab1")
    lastNode.setLabel("RGB709ToLab1")
    lastNode.setPosition(2446, 3381)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGB709ToLab1 = lastNode

    del lastNode
    # End of node "RGB709ToLab1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2345, 3390)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(2345, 3102)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2345, 2830)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2345, 2236)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(2345, 1723)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(3526, 501)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "ShuffleL"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL")
    lastNode.setLabel("ShuffleL")
    lastNode.setPosition(3526, 563)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL"

    # Start of node "NoOp1"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 2, group)
    lastNode.setScriptName("NoOp1")
    lastNode.setLabel("NoOp1")
    lastNode.setPosition(4479, 292)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupNoOp1 = lastNode

    param = lastNode.getParam("setFormat")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4022, 0)
        param.setValue(4332, 1)
        del param

    del lastNode
    # End of node "NoOp1"

    # Start of node "Transform2_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3")
    lastNode.setLabel("Transform2_3")
    lastNode.setPosition(3241, 437)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3"

    # Start of node "Transform2_4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4")
    lastNode.setLabel("Transform2_4")
    lastNode.setPosition(3526, 437)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4"

    # Start of node "TextRGB"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextRGB")
    lastNode.setLabel("TextRGB")
    lastNode.setPosition(4654, 487)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextRGB = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("RGB")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextRGB"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(4868, 851)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    del lastNode
    # End of node "Merge3"

    # Start of node "Transform1_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2")
    lastNode.setLabel("Transform1_2")
    lastNode.setPosition(4654, 571)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(3628, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1_2"

    # Start of node "TransformHSV"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformHSV")
    lastNode.setLabel("TransformHSV")
    lastNode.setPosition(2696, 714)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformHSV = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(3124, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformHSV"

    # Start of node "ShuffleR_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2")
    lastNode.setLabel("ShuffleR_2")
    lastNode.setPosition(2696, 796)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2"

    # Start of node "ShuffleG_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2")
    lastNode.setLabel("ShuffleG_2")
    lastNode.setPosition(2961, 801)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2"

    # Start of node "ShuffleB_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2")
    lastNode.setLabel("ShuffleB_2")
    lastNode.setPosition(3236, 825)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2"

    # Start of node "Transform2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2")
    lastNode.setLabel("Transform2_2")
    lastNode.setPosition(2961, 714)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2"

    # Start of node "Saturation1_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2")
    lastNode.setLabel("Saturation1_2")
    lastNode.setPosition(3521, 778)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2"

    # Start of node "ShuffleL_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2")
    lastNode.setLabel("ShuffleL_2")
    lastNode.setPosition(3521, 841)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2"

    # Start of node "Transform2_3_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2")
    lastNode.setLabel("Transform2_3_2")
    lastNode.setPosition(3236, 714)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2"

    # Start of node "Transform2_4_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2")
    lastNode.setLabel("Transform2_4_2")
    lastNode.setPosition(3521, 714)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2"

    # Start of node "TransformHSL"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformHSL")
    lastNode.setLabel("TransformHSL")
    lastNode.setPosition(2681, 971)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformHSL = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(2620, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformHSL"

    # Start of node "ShuffleR_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2")
    lastNode.setLabel("ShuffleR_2_2")
    lastNode.setPosition(2681, 1054)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2"

    # Start of node "ShuffleG_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2")
    lastNode.setLabel("ShuffleG_2_2")
    lastNode.setPosition(2946, 1058)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2"

    # Start of node "ShuffleB_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2")
    lastNode.setLabel("ShuffleB_2_2")
    lastNode.setPosition(3221, 1082)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2"

    # Start of node "Transform2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2")
    lastNode.setLabel("Transform2_2_2")
    lastNode.setPosition(2946, 972)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2_2_2"

    # Start of node "Saturation1_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2")
    lastNode.setLabel("Saturation1_2_2")
    lastNode.setPosition(3505, 1036)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2"

    # Start of node "ShuffleL_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2")
    lastNode.setLabel("ShuffleL_2_2")
    lastNode.setPosition(3505, 1098)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2"

    # Start of node "Transform2_3_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2")
    lastNode.setLabel("Transform2_3_2_2")
    lastNode.setPosition(3221, 972)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2_3_2_2"

    # Start of node "Transform2_4_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2")
    lastNode.setLabel("Transform2_4_2_2")
    lastNode.setPosition(3505, 972)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2_4_2_2"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(4479, 1086)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    del lastNode
    # End of node "Merge5"

    # Start of node "TransformHSV_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformHSV_2")
    lastNode.setLabel("TransformHSV_2")
    lastNode.setPosition(4653, 851)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformHSV_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(3124, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformHSV_2"

    # Start of node "TextHSV"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextHSV")
    lastNode.setLabel("TextHSV")
    lastNode.setPosition(4653, 771)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextHSV = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("HSV")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextHSV"

    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(4469, 3919)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    del lastNode
    # End of node "Merge7"

    # Start of node "TransformHSL_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformHSL_2")
    lastNode.setLabel("TransformHSL_2")
    lastNode.setPosition(4634, 1100)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformHSL_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(2620, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformHSL_2"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(4868, 1100)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    del lastNode
    # End of node "Merge8"

    # Start of node "TextHSL"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextHSL")
    lastNode.setLabel("TextHSL")
    lastNode.setPosition(4634, 1022)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextHSL = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("HSL")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextHSL"

    # Start of node "TransformYUV701"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYUV701")
    lastNode.setLabel("TransformYUV701")
    lastNode.setPosition(2646, 1709)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYUV701 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(2116, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYUV701"

    # Start of node "ShuffleR_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2_2_2_2")
    lastNode.setLabel("ShuffleR_2_2_2_2_2")
    lastNode.setPosition(2646, 1779)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2_2_2_2"

    # Start of node "ShuffleG_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2_2_2_2")
    lastNode.setLabel("ShuffleG_2_2_2_2_2")
    lastNode.setPosition(2911, 1783)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2_2_2_2"

    # Start of node "ShuffleB_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2_2_2_2")
    lastNode.setLabel("ShuffleB_2_2_2_2_2")
    lastNode.setPosition(3186, 1778)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2_2_2_2"

    # Start of node "Transform2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2_2_2_2")
    lastNode.setLabel("Transform2_2_2_2_2_2")
    lastNode.setPosition(2911, 1697)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2_2_2_2_2"

    # Start of node "Saturation1_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2_2_2_2")
    lastNode.setLabel("Saturation1_2_2_2_2_2")
    lastNode.setPosition(3471, 1749)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2_2_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2_2_2_2"

    # Start of node "ShuffleL_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2_2_2_2")
    lastNode.setLabel("ShuffleL_2_2_2_2_2")
    lastNode.setPosition(3471, 1823)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2_2_2_2"

    # Start of node "Transform2_3_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2_2_2_2")
    lastNode.setLabel("Transform2_3_2_2_2_2_2")
    lastNode.setPosition(3186, 1697)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2_2_2_2_2"

    # Start of node "Transform2_4_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2_2_2_2")
    lastNode.setLabel("Transform2_4_2_2_2_2_2")
    lastNode.setPosition(3471, 1686)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2_2_2_2_2"

    # Start of node "TransformYUV701_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYUV701_2")
    lastNode.setLabel("TransformYUV701_2")
    lastNode.setPosition(4646, 1772)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYUV701_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(2116, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYUV701_2"

    # Start of node "Merge12"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge12")
    lastNode.setLabel("Merge12")
    lastNode.setPosition(4479, 1778)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge12 = lastNode

    del lastNode
    # End of node "Merge12"

    # Start of node "TextYUV701"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextYUV701")
    lastNode.setLabel("TextYUV701")
    lastNode.setPosition(4646, 1695)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextYUV701 = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("YUV")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextYUV701"

    # Start of node "Merge13"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge13")
    lastNode.setLabel("Merge13")
    lastNode.setPosition(4851, 1772)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge13 = lastNode

    del lastNode
    # End of node "Merge13"

    # Start of node "TransformYPBPR701"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYPBPR701")
    lastNode.setLabel("TransformYPBPR701")
    lastNode.setPosition(2640, 2217)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYPBPR701 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(1612, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYPBPR701"

    # Start of node "ShuffleR_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleR_2_2_2_2_2_2_2")
    lastNode.setPosition(2640, 2299)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2_2_2_2_2_2"

    # Start of node "ShuffleG_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleG_2_2_2_2_2_2_2")
    lastNode.setPosition(2905, 2303)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2_2_2_2_2_2"

    # Start of node "ShuffleB_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleB_2_2_2_2_2_2_2")
    lastNode.setPosition(3180, 2298)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2_2_2_2_2_2"

    # Start of node "Transform2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_2_2_2_2_2_2_2")
    lastNode.setPosition(2905, 2217)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2_2_2_2_2_2_2"

    # Start of node "Saturation1_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2_2_2_2_2_2")
    lastNode.setLabel("Saturation1_2_2_2_2_2_2_2")
    lastNode.setPosition(3465, 2269)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2_2_2_2_2_2"

    # Start of node "ShuffleL_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleL_2_2_2_2_2_2_2")
    lastNode.setPosition(3465, 2343)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2_2_2_2_2_2"

    # Start of node "Transform2_3_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_3_2_2_2_2_2_2_2")
    lastNode.setPosition(3180, 2217)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2_2_2_2_2_2_2"

    # Start of node "Transform2_4_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_4_2_2_2_2_2_2_2")
    lastNode.setPosition(3465, 2206)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2_2_2_2_2_2_2"

    # Start of node "Merge16"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge16")
    lastNode.setLabel("Merge16")
    lastNode.setPosition(4479, 2298)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge16 = lastNode

    del lastNode
    # End of node "Merge16"

    # Start of node "TransformYPBPR701_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYPBPR701_2")
    lastNode.setLabel("TransformYPBPR701_2")
    lastNode.setPosition(4630, 2299)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYPBPR701_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(1612, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYPBPR701_2"

    # Start of node "TextYPbPr701"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextYPbPr701")
    lastNode.setLabel("TextYPbPr701")
    lastNode.setPosition(4630, 2217)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextYPbPr701 = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("YPbPr")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextYPbPr701"

    # Start of node "Merge17"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge17")
    lastNode.setLabel("Merge17")
    lastNode.setPosition(4851, 2299)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge17 = lastNode

    del lastNode
    # End of node "Merge17"

    # Start of node "TransformYCBCR701"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYCBCR701")
    lastNode.setLabel("TransformYCBCR701")
    lastNode.setPosition(2619, 2810)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYCBCR701 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(1108, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYCBCR701"

    # Start of node "ShuffleR_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleR_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2619, 2892)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleG_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleG_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2884, 2897)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleB_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleB_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3159, 2891)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2884, 2810)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2_2_2_2_2_2_2_2_2"

    # Start of node "Saturation1_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Saturation1_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3444, 2879)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleL_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleL_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3444, 2973)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_3_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_3_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3159, 2810)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_4_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_4_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3444, 2810)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2_2_2_2_2_2_2_2_2"

    # Start of node "Merge16_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge16_2_2")
    lastNode.setLabel("Merge16_2_2")
    lastNode.setPosition(4479, 2937)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge16_2_2 = lastNode

    del lastNode
    # End of node "Merge16_2_2"

    # Start of node "TextYCbCr701"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextYCbCr701")
    lastNode.setLabel("TextYCbCr701")
    lastNode.setPosition(4644, 2820)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextYCbCr701 = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("YCbCr")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextYCbCr701"

    # Start of node "Merge19"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge19")
    lastNode.setLabel("Merge19")
    lastNode.setPosition(4848, 2895)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge19 = lastNode

    del lastNode
    # End of node "Merge19"

    # Start of node "TransformXYZ"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformXYZ")
    lastNode.setLabel("TransformXYZ")
    lastNode.setPosition(2610, 3093)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformXYZ = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(604, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformXYZ"

    # Start of node "ShuffleR_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleR_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2610, 3155)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleG_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleG_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2875, 3160)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleB_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleB_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3150, 3154)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2875, 3073)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Saturation1_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Saturation1_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3435, 3126)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleL_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleL_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3435, 3200)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_3_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_3_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3150, 3073)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_4_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_4_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3435, 3063)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Merge16_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge16_2_2_2")
    lastNode.setLabel("Merge16_2_2_2")
    lastNode.setPosition(4479, 3154)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge16_2_2_2 = lastNode

    del lastNode
    # End of node "Merge16_2_2_2"

    # Start of node "TransformXYZ_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformXYZ_2")
    lastNode.setLabel("TransformXYZ_2")
    lastNode.setPosition(4629, 3155)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformXYZ_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(604, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformXYZ_2"

    # Start of node "TextXYZ"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextXYZ")
    lastNode.setLabel("TextXYZ")
    lastNode.setPosition(4629, 3074)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextXYZ = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("XYZ")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextXYZ"

    # Start of node "Merge20"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge20")
    lastNode.setLabel("Merge20")
    lastNode.setPosition(4848, 3143)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge20 = lastNode

    del lastNode
    # End of node "Merge20"

    # Start of node "TransformLAB"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformLAB")
    lastNode.setLabel("TransformLAB")
    lastNode.setPosition(2613, 3376)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformLAB = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(100, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformLAB"

    # Start of node "ShuffleR_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleR_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2613, 3438)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleR_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleG_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleG_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2878, 3443)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleG_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleB_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleB_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3153, 3437)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleB_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(2878, 3353)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Saturation1_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Saturation1_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3438, 3409)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation1_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "ShuffleL_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleL_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("ShuffleL_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3438, 3485)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleL_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleL_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_3_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_3_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3153, 3353)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Transform2_4_2_2_2_2_2_2_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_4_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setLabel("Transform2_4_2_2_2_2_2_2_2_2_2_2_2")
    lastNode.setPosition(3438, 3357)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_4_2_2_2_2_2_2_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(868, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_4_2_2_2_2_2_2_2_2_2_2_2"

    # Start of node "Merge16_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge16_2_2_2_2")
    lastNode.setLabel("Merge16_2_2_2_2")
    lastNode.setPosition(4469, 3443)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge16_2_2_2_2 = lastNode

    del lastNode
    # End of node "Merge16_2_2_2_2"

    # Start of node "TransformLAB_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformLAB_2")
    lastNode.setLabel("TransformLAB_2")
    lastNode.setPosition(4632, 3453)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformLAB_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(100, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformLAB_2"

    # Start of node "TextLAB"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextLAB")
    lastNode.setLabel("TextLAB")
    lastNode.setPosition(4632, 3378)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextLAB = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("L*a*b")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    del lastNode
    # End of node "TextLAB"

    # Start of node "Merge21"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge21")
    lastNode.setLabel("Merge21")
    lastNode.setPosition(4841, 3453)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge21 = lastNode

    del lastNode
    # End of node "Merge21"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(4881, 3939)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "RGBToYUV7091_2"
    lastNode = app.createNode("net.sf.openfx.RGBToYUV709", 1, group)
    lastNode.setScriptName("RGBToYUV7091_2")
    lastNode.setLabel("RGBToYUV7091_2")
    lastNode.setPosition(1922, 1724)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYUV7091_2 = lastNode

    del lastNode
    # End of node "RGBToYUV7091_2"

    # Start of node "RGBToYPbPr7091_2"
    lastNode = app.createNode("net.sf.openfx.RGBToYPbPr709", 1, group)
    lastNode.setScriptName("RGBToYPbPr7091_2")
    lastNode.setLabel("RGBToYPbPr7091_2")
    lastNode.setPosition(1922, 2238)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYPbPr7091_2 = lastNode

    del lastNode
    # End of node "RGBToYPbPr7091_2"

    # Start of node "RGBToHSV1_2"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("RGBToHSV1_2")
    lastNode.setLabel("RGBToHSV1_2")
    lastNode.setPosition(1931, 735)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSV1_2 = lastNode

    del lastNode
    # End of node "RGBToHSV1_2"

    # Start of node "RGBToHSL1_2"
    lastNode = app.createNode("net.sf.openfx.RGBToHSL", 1, group)
    lastNode.setScriptName("RGBToHSL1_2")
    lastNode.setLabel("RGBToHSL1_2")
    lastNode.setPosition(1940, 987)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSL1_2 = lastNode

    del lastNode
    # End of node "RGBToHSL1_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(2133, 748)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(2133, 1000)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "RGBToYCbCr7091_2"
    lastNode = app.createNode("net.sf.openfx.RGBToYCbCr709", 1, group)
    lastNode.setScriptName("RGBToYCbCr7091_2")
    lastNode.setLabel("RGBToYCbCr7091_2")
    lastNode.setPosition(1922, 2832)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToYCbCr7091_2 = lastNode

    del lastNode
    # End of node "RGBToYCbCr7091_2"

    # Start of node "RGB709ToXYZ1_2"
    lastNode = app.createNode("net.sf.openfx.RGB709ToXYZ", 1, group)
    lastNode.setScriptName("RGB709ToXYZ1_2")
    lastNode.setLabel("RGB709ToXYZ1_2")
    lastNode.setPosition(1910, 3103)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGB709ToXYZ1_2 = lastNode

    del lastNode
    # End of node "RGB709ToXYZ1_2"

    # Start of node "RGB709ToLab1_2"
    lastNode = app.createNode("net.sf.openfx.RGB709ToLab", 1, group)
    lastNode.setScriptName("RGB709ToLab1_2")
    lastNode.setLabel("RGB709ToLab1_2")
    lastNode.setPosition(1910, 3391)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGB709ToLab1_2 = lastNode

    del lastNode
    # End of node "RGB709ToLab1_2"

    # Start of node "Dot5_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5_2")
    lastNode.setLabel("Dot5_2")
    lastNode.setPosition(2133, 3404)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5_2 = lastNode

    del lastNode
    # End of node "Dot5_2"

    # Start of node "Dot6_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2")
    lastNode.setLabel("Dot6_2")
    lastNode.setPosition(2133, 3116)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2 = lastNode

    del lastNode
    # End of node "Dot6_2"

    # Start of node "Dot7_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7_2")
    lastNode.setLabel("Dot7_2")
    lastNode.setPosition(2133, 2845)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7_2 = lastNode

    del lastNode
    # End of node "Dot7_2"

    # Start of node "Dot9_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9_2")
    lastNode.setLabel("Dot9_2")
    lastNode.setPosition(2133, 2251)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9_2 = lastNode

    del lastNode
    # End of node "Dot9_2"

    # Start of node "Dot11_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11_2")
    lastNode.setLabel("Dot11_2")
    lastNode.setPosition(2133, 1737)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11_2 = lastNode

    del lastNode
    # End of node "Dot11_2"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2345, 51)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "SwitchKeySpace"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("SwitchKeySpace")
    lastNode.setLabel("SwitchKeySpace")
    lastNode.setPosition(1479, 3391)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitchKeySpace = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "SwitchKeySpace"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2133, 459)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(1985, 459)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(4514, 4253)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2284, 4269)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "SwitchKey"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("SwitchKey")
    lastNode.setLabel("SwitchKey")
    lastNode.setPosition(2239, 4645)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitchKey = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "SwitchKey"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(1526, 4654)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "ShuffleKeyR"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleKeyR")
    lastNode.setLabel("ShuffleKeyR")
    lastNode.setPosition(1479, 3620)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleKeyR = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleKeyR"

    # Start of node "ShuffleKeyG"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleKeyG")
    lastNode.setLabel("ShuffleKeyG")
    lastNode.setPosition(1638, 3621)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleKeyG = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "ShuffleKeyG"

    # Start of node "ShuffleKeyB"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleKeyB")
    lastNode.setLabel("ShuffleKeyB")
    lastNode.setPosition(1814, 3620)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleKeyB = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "ShuffleKeyB"

    # Start of node "SaturationKeyL"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("SaturationKeyL")
    lastNode.setLabel("SaturationKeyL")
    lastNode.setPosition(1963, 3613)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturationKeyL = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("ccir601")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SaturationKeyL"

    # Start of node "ShuffleKeyL"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleKeyL")
    lastNode.setLabel("ShuffleKeyL")
    lastNode.setPosition(1963, 3691)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleKeyL = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleKeyL"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(1524, 3540)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(1683, 3540)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(1859, 3540)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(2008, 3540)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(1479, 3809)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Grade_rng"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade_rng")
    lastNode.setLabel("Grade_rng")
    lastNode.setPosition(1735, 4015)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade_rng = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade_rng"

    # Start of node "Dot7_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7_3")
    lastNode.setLabel("Dot7_3")
    lastNode.setPosition(1526, 3921)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7_3 = lastNode

    del lastNode
    # End of node "Dot7_3"

    # Start of node "Dot8_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8_3")
    lastNode.setLabel("Dot8_3")
    lastNode.setPosition(1780, 3921)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8_3 = lastNode

    del lastNode
    # End of node "Dot8_3"

    # Start of node "Merge2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_2")
    lastNode.setLabel("Merge2_2")
    lastNode.setPosition(1735, 4198)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("difference")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("bChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge2_2"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(1486, 4287)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Dot9_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9_3")
    lastNode.setLabel("Dot9_3")
    lastNode.setPosition(1785, 4301)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9_3 = lastNode

    del lastNode
    # End of node "Dot9_3"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(1481, 4576)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Premult1"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(1481, 4508)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "GradeKey"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("GradeKey")
    lastNode.setLabel("GradeKey")
    lastNode.setPosition(1481, 4015)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGradeKey = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GradeKey"

    # Start of node "Merge22"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge22")
    lastNode.setLabel("Merge22")
    lastNode.setPosition(4479, 830)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge22 = lastNode

    del lastNode
    # End of node "Merge22"

    # Start of node "TextR"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextR")
    lastNode.setLabel("TextR")
    lastNode.setPosition(4872, 177)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextR = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Red")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    del lastNode
    # End of node "TextR"

    # Start of node "TextG"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextG")
    lastNode.setLabel("TextG")
    lastNode.setPosition(5037, 177)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextG = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Green")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 2)
        del param

    del lastNode
    # End of node "TextG"

    # Start of node "TextB"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextB")
    lastNode.setLabel("TextB")
    lastNode.setPosition(5201, 174)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextB = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Blue")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "TextB"

    # Start of node "TextL"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("TextL")
    lastNode.setLabel("TextL")
    lastNode.setPosition(5370, 177)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTextL = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Luma")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("A/Arial")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(84, 0)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.7, 0)
        param.setValue(0.7, 1)
        param.setValue(0.7, 2)
        del param

    del lastNode
    # End of node "TextL"

    # Start of node "Transform1_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2_2")
    lastNode.setLabel("Transform1_2_2")
    lastNode.setPosition(4872, 247)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(550, 0)
        param.setValue(3982, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1_2_2"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(4872, 351)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Transform1_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2_2_2")
    lastNode.setLabel("Transform1_2_2_2")
    lastNode.setPosition(5037, 228)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(1418, 0)
        param.setValue(3982, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1_2_2_2"

    # Start of node "Transform1_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2_2_2_2")
    lastNode.setLabel("Transform1_2_2_2_2")
    lastNode.setPosition(5201, 256)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(2286, 0)
        param.setValue(3982, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1_2_2_2_2"

    # Start of node "Transform1_2_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2_2_2_2_2")
    lastNode.setLabel("Transform1_2_2_2_2_2")
    lastNode.setPosition(5370, 246)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2_2_2_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(3154, 0)
        param.setValue(3982, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1_2_2_2_2_2"

    # Start of node "Merge24"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge24")
    lastNode.setLabel("Merge24")
    lastNode.setPosition(4871, 560)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge24 = lastNode

    del lastNode
    # End of node "Merge24"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(4474, 3620)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4022, 0)
        param.setValue(4332, 1)
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "NoOp1_2"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 2, group)
    lastNode.setScriptName("NoOp1_2")
    lastNode.setLabel("NoOp1_2")
    lastNode.setPosition(4871, 477)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupNoOp1_2 = lastNode

    param = lastNode.getParam("setFormat")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4022, 0)
        param.setValue(4332, 1)
        del param

    del lastNode
    # End of node "NoOp1_2"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1481, 4403)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(2133, 51)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(2109, 4417)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "TransformYCBCR701_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformYCBCR701_3")
    lastNode.setLabel("TransformYCBCR701_3")
    lastNode.setPosition(4644, 2895)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformYCBCR701_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70, 0)
        param.setValue(1108, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "TransformYCBCR701_3"

    # Start of node "Crop1_2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1_2")
    lastNode.setLabel("Crop1_2")
    lastNode.setPosition(4841, 3539)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1_2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(4022, 0)
        param.setValue(4332, 1)
        del param

    del lastNode
    # End of node "Crop1_2"

    # Start of node "NoOp2"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 2, group)
    lastNode.setScriptName("NoOp2")
    lastNode.setLabel("NoOp2")
    lastNode.setPosition(2239, 4749)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupNoOp2 = lastNode

    param = lastNode.getParam("setFormat")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1012, 1)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "NoOp2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupRGBToYUV7091.connectInput(0, groupDot11)
    groupRGBToYPbPr7091.connectInput(0, groupDot9)
    groupOutput1.connectInput(0, groupNoOp2)
    groupReformat1.connectInput(0, groupDot15)
    groupTransformRGB.connectInput(0, groupDot2)
    groupMerge1.connectInput(0, groupNoOp1)
    groupMerge1.connectInput(1, groupShuffleR)
    groupMerge1.connectInput(3, groupShuffleG)
    groupMerge1.connectInput(4, groupShuffleB)
    groupMerge1.connectInput(5, groupShuffleL)
    groupShuffle1.connectInput(1, groupReformat1)
    groupDot2.connectInput(0, groupShuffle1)
    groupRGBToHSV1.connectInput(0, groupDot3)
    groupRGBToHSL1.connectInput(0, groupDot1)
    groupDot3.connectInput(0, groupDot2)
    groupShuffleR.connectInput(1, groupTransformRGB)
    groupShuffleG.connectInput(1, groupTransform2)
    groupShuffleB.connectInput(1, groupTransform2_3)
    groupTransform2.connectInput(0, groupTransformRGB)
    groupDot1.connectInput(0, groupDot3)
    groupRGBToYCbCr7091.connectInput(0, groupDot7)
    groupRGB709ToXYZ1.connectInput(0, groupDot6)
    groupRGB709ToLab1.connectInput(0, groupDot5)
    groupDot5.connectInput(0, groupDot6)
    groupDot6.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupDot9)
    groupDot9.connectInput(0, groupDot11)
    groupDot11.connectInput(0, groupDot1)
    groupSaturation1.connectInput(0, groupTransform2_4)
    groupShuffleL.connectInput(1, groupSaturation1)
    groupNoOp1.connectInput(0, groupConstant1)
    groupTransform2_3.connectInput(0, groupTransform2)
    groupTransform2_4.connectInput(0, groupTransform2_3)
    groupMerge3.connectInput(0, groupMerge24)
    groupMerge3.connectInput(1, groupTransformHSV_2)
    groupTransform1_2.connectInput(0, groupTextRGB)
    groupTransformHSV.connectInput(0, groupRGBToHSV1)
    groupShuffleR_2.connectInput(1, groupTransformHSV)
    groupShuffleG_2.connectInput(1, groupTransform2_2)
    groupShuffleB_2.connectInput(1, groupTransform2_3_2)
    groupTransform2_2.connectInput(0, groupTransformHSV)
    groupSaturation1_2.connectInput(0, groupTransform2_4_2)
    groupShuffleL_2.connectInput(1, groupSaturation1_2)
    groupTransform2_3_2.connectInput(0, groupTransform2_2)
    groupTransform2_4_2.connectInput(0, groupTransform2_3_2)
    groupTransformHSL.connectInput(0, groupRGBToHSL1)
    groupShuffleR_2_2.connectInput(1, groupTransformHSL)
    groupShuffleG_2_2.connectInput(1, groupTransform2_2_2)
    groupShuffleB_2_2.connectInput(1, groupTransform2_3_2_2)
    groupTransform2_2_2.connectInput(0, groupTransformHSL)
    groupSaturation1_2_2.connectInput(0, groupTransform2_4_2_2)
    groupShuffleL_2_2.connectInput(1, groupSaturation1_2_2)
    groupTransform2_3_2_2.connectInput(0, groupTransform2_2_2)
    groupTransform2_4_2_2.connectInput(0, groupTransform2_3_2_2)
    groupMerge5.connectInput(0, groupMerge22)
    groupMerge5.connectInput(1, groupShuffleB_2_2)
    groupMerge5.connectInput(3, groupShuffleL_2_2)
    groupMerge5.connectInput(4, groupShuffleG_2_2)
    groupMerge5.connectInput(5, groupShuffleR_2_2)
    groupTransformHSV_2.connectInput(0, groupTextHSV)
    groupMerge7.connectInput(0, groupCrop1)
    groupMerge7.connectInput(1, groupDot14)
    groupTransformHSL_2.connectInput(0, groupTextHSL)
    groupMerge8.connectInput(0, groupMerge3)
    groupMerge8.connectInput(1, groupTransformHSL_2)
    groupTransformYUV701.connectInput(0, groupRGBToYUV7091)
    groupShuffleR_2_2_2_2_2.connectInput(1, groupTransformYUV701)
    groupShuffleG_2_2_2_2_2.connectInput(1, groupTransform2_2_2_2_2_2)
    groupShuffleB_2_2_2_2_2.connectInput(1, groupTransform2_3_2_2_2_2_2)
    groupTransform2_2_2_2_2_2.connectInput(0, groupTransformYUV701)
    groupSaturation1_2_2_2_2_2.connectInput(0, groupTransform2_4_2_2_2_2_2)
    groupShuffleL_2_2_2_2_2.connectInput(1, groupSaturation1_2_2_2_2_2)
    groupTransform2_3_2_2_2_2_2.connectInput(0, groupTransform2_2_2_2_2_2)
    groupTransform2_4_2_2_2_2_2.connectInput(0, groupTransform2_3_2_2_2_2_2)
    groupTransformYUV701_2.connectInput(0, groupTextYUV701)
    groupMerge12.connectInput(0, groupMerge5)
    groupMerge12.connectInput(1, groupShuffleL_2_2_2_2_2)
    groupMerge12.connectInput(3, groupShuffleB_2_2_2_2_2)
    groupMerge12.connectInput(4, groupShuffleG_2_2_2_2_2)
    groupMerge12.connectInput(5, groupShuffleR_2_2_2_2_2)
    groupMerge13.connectInput(0, groupMerge8)
    groupMerge13.connectInput(1, groupTransformYUV701_2)
    groupTransformYPBPR701.connectInput(0, groupRGBToYPbPr7091)
    groupShuffleR_2_2_2_2_2_2_2.connectInput(1, groupTransformYPBPR701)
    groupShuffleG_2_2_2_2_2_2_2.connectInput(1, groupTransform2_2_2_2_2_2_2_2)
    groupShuffleB_2_2_2_2_2_2_2.connectInput(1, groupTransform2_3_2_2_2_2_2_2_2)
    groupTransform2_2_2_2_2_2_2_2.connectInput(0, groupTransformYPBPR701)
    groupSaturation1_2_2_2_2_2_2_2.connectInput(0, groupTransform2_4_2_2_2_2_2_2_2)
    groupShuffleL_2_2_2_2_2_2_2.connectInput(1, groupSaturation1_2_2_2_2_2_2_2)
    groupTransform2_3_2_2_2_2_2_2_2.connectInput(0, groupTransform2_2_2_2_2_2_2_2)
    groupTransform2_4_2_2_2_2_2_2_2.connectInput(0, groupTransform2_3_2_2_2_2_2_2_2)
    groupMerge16.connectInput(0, groupMerge12)
    groupMerge16.connectInput(1, groupShuffleL_2_2_2_2_2_2_2)
    groupMerge16.connectInput(3, groupShuffleB_2_2_2_2_2_2_2)
    groupMerge16.connectInput(4, groupShuffleG_2_2_2_2_2_2_2)
    groupMerge16.connectInput(5, groupShuffleR_2_2_2_2_2_2_2)
    groupTransformYPBPR701_2.connectInput(0, groupTextYPbPr701)
    groupMerge17.connectInput(0, groupMerge13)
    groupMerge17.connectInput(1, groupTransformYPBPR701_2)
    groupTransformYCBCR701.connectInput(0, groupRGBToYCbCr7091)
    groupShuffleR_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransformYCBCR701)
    groupShuffleG_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_2_2_2_2_2_2_2_2_2)
    groupShuffleB_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_3_2_2_2_2_2_2_2_2_2)
    groupTransform2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransformYCBCR701)
    groupSaturation1_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_4_2_2_2_2_2_2_2_2_2)
    groupShuffleL_2_2_2_2_2_2_2_2_2.connectInput(1, groupSaturation1_2_2_2_2_2_2_2_2_2)
    groupTransform2_3_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_2_2_2_2_2_2_2_2_2)
    groupTransform2_4_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_3_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2.connectInput(0, groupMerge16)
    groupMerge16_2_2.connectInput(1, groupShuffleL_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2.connectInput(3, groupShuffleB_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2.connectInput(4, groupShuffleG_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2.connectInput(5, groupShuffleR_2_2_2_2_2_2_2_2_2)
    groupMerge19.connectInput(0, groupMerge17)
    groupMerge19.connectInput(1, groupTransformYCBCR701_3)
    groupTransformXYZ.connectInput(0, groupRGB709ToXYZ1)
    groupShuffleR_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransformXYZ)
    groupShuffleG_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_2_2_2_2_2_2_2_2_2_2)
    groupShuffleB_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_3_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransformXYZ)
    groupSaturation1_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_4_2_2_2_2_2_2_2_2_2_2)
    groupShuffleL_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupSaturation1_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_3_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_4_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_3_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2.connectInput(0, groupMerge16_2_2)
    groupMerge16_2_2_2.connectInput(1, groupShuffleL_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2.connectInput(3, groupShuffleB_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2.connectInput(4, groupShuffleG_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2.connectInput(5, groupShuffleR_2_2_2_2_2_2_2_2_2_2)
    groupTransformXYZ_2.connectInput(0, groupTextXYZ)
    groupMerge20.connectInput(0, groupMerge19)
    groupMerge20.connectInput(1, groupTransformXYZ_2)
    groupTransformLAB.connectInput(0, groupRGB709ToLab1)
    groupShuffleR_2_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransformLAB)
    groupShuffleG_2_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_2_2_2_2_2_2_2_2_2_2_2)
    groupShuffleB_2_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupTransform2_3_2_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_2_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransformLAB)
    groupSaturation1_2_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_4_2_2_2_2_2_2_2_2_2_2_2)
    groupShuffleL_2_2_2_2_2_2_2_2_2_2_2.connectInput(1, groupSaturation1_2_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_3_2_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_2_2_2_2_2_2_2_2_2_2_2)
    groupTransform2_4_2_2_2_2_2_2_2_2_2_2_2.connectInput(0, groupTransform2_3_2_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2_2.connectInput(0, groupMerge16_2_2_2)
    groupMerge16_2_2_2_2.connectInput(1, groupShuffleL_2_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2_2.connectInput(3, groupShuffleB_2_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2_2.connectInput(4, groupShuffleG_2_2_2_2_2_2_2_2_2_2_2)
    groupMerge16_2_2_2_2.connectInput(5, groupShuffleR_2_2_2_2_2_2_2_2_2_2_2)
    groupTransformLAB_2.connectInput(0, groupTextLAB)
    groupMerge21.connectInput(0, groupMerge20)
    groupMerge21.connectInput(1, groupTransformLAB_2)
    groupDot14.connectInput(0, groupCrop1_2)
    groupRGBToYUV7091_2.connectInput(0, groupDot11_2)
    groupRGBToYPbPr7091_2.connectInput(0, groupDot9_2)
    groupRGBToHSV1_2.connectInput(0, groupDot3_2)
    groupRGBToHSL1_2.connectInput(0, groupDot1_2)
    groupDot3_2.connectInput(0, groupDot16)
    groupDot1_2.connectInput(0, groupDot3_2)
    groupRGBToYCbCr7091_2.connectInput(0, groupDot7_2)
    groupRGB709ToXYZ1_2.connectInput(0, groupDot6_2)
    groupRGB709ToLab1_2.connectInput(0, groupDot5_2)
    groupDot5_2.connectInput(0, groupDot6_2)
    groupDot6_2.connectInput(0, groupDot7_2)
    groupDot7_2.connectInput(0, groupDot9_2)
    groupDot9_2.connectInput(0, groupDot11_2)
    groupDot11_2.connectInput(0, groupDot1_2)
    groupDot15.connectInput(0, groupimg)
    groupSwitchKeySpace.connectInput(0, groupDot17)
    groupSwitchKeySpace.connectInput(1, groupRGBToHSV1_2)
    groupSwitchKeySpace.connectInput(2, groupRGBToHSL1_2)
    groupSwitchKeySpace.connectInput(3, groupRGBToYUV7091_2)
    groupSwitchKeySpace.connectInput(4, groupRGBToYPbPr7091_2)
    groupSwitchKeySpace.connectInput(5, groupRGBToYCbCr7091_2)
    groupSwitchKeySpace.connectInput(6, groupRGB709ToXYZ1_2)
    groupSwitchKeySpace.connectInput(7, groupRGB709ToLab1_2)
    groupDot16.connectInput(0, groupDot13)
    groupDot17.connectInput(0, groupDot16)
    groupDot18.connectInput(0, groupMerge7)
    groupDot19.connectInput(0, groupDot18)
    groupSwitchKey.connectInput(0, groupDot19)
    groupSwitchKey.connectInput(1, groupDot20)
    groupDot20.connectInput(0, groupPremult1)
    groupShuffleKeyR.connectInput(1, groupDot21)
    groupShuffleKeyG.connectInput(1, groupDot22)
    groupShuffleKeyB.connectInput(1, groupDot23)
    groupSaturationKeyL.connectInput(0, groupDot24)
    groupShuffleKeyL.connectInput(1, groupSaturationKeyL)
    groupDot21.connectInput(0, groupSwitchKeySpace)
    groupDot22.connectInput(0, groupDot21)
    groupDot23.connectInput(0, groupDot22)
    groupDot24.connectInput(0, groupDot23)
    groupSwitch1.connectInput(0, groupShuffleKeyR)
    groupSwitch1.connectInput(1, groupShuffleKeyG)
    groupSwitch1.connectInput(2, groupShuffleKeyB)
    groupSwitch1.connectInput(3, groupShuffleKeyL)
    groupGrade_rng.connectInput(0, groupDot8_3)
    groupDot7_3.connectInput(0, groupSwitch1)
    groupDot8_3.connectInput(0, groupDot7_3)
    groupMerge2_2.connectInput(0, groupGrade_rng)
    groupMerge2_2.connectInput(1, groupGradeKey)
    groupSwitch2.connectInput(0, groupGradeKey)
    groupSwitch2.connectInput(1, groupDot9_3)
    groupDot9_3.connectInput(0, groupMerge2_2)
    groupPremult1.connectInput(0, groupInvert2)
    groupInvert2.connectInput(0, groupShuffle2)
    groupGradeKey.connectInput(0, groupDot7_3)
    groupMerge22.connectInput(0, groupMerge1)
    groupMerge22.connectInput(1, groupShuffleL_2)
    groupMerge22.connectInput(3, groupShuffleB_2)
    groupMerge22.connectInput(4, groupShuffleG_2)
    groupMerge22.connectInput(5, groupShuffleR_2)
    groupTransform1_2_2.connectInput(0, groupTextR)
    groupMerge4.connectInput(0, groupTransform1_2_2)
    groupMerge4.connectInput(1, groupTransform1_2_2_2)
    groupMerge4.connectInput(3, groupTransform1_2_2_2_2)
    groupMerge4.connectInput(4, groupTransform1_2_2_2_2_2)
    groupTransform1_2_2_2.connectInput(0, groupTextG)
    groupTransform1_2_2_2_2.connectInput(0, groupTextB)
    groupTransform1_2_2_2_2_2.connectInput(0, groupTextL)
    groupMerge24.connectInput(0, groupNoOp1_2)
    groupMerge24.connectInput(1, groupTransform1_2)
    groupCrop1.connectInput(0, groupMerge16_2_2_2_2)
    groupNoOp1_2.connectInput(0, groupMerge4)
    groupShuffle2.connectInput(0, groupDot25)
    groupShuffle2.connectInput(1, groupSwitch2)
    groupDot13.connectInput(0, groupDot15)
    groupDot25.connectInput(0, groupDot5_2)
    groupTransformYCBCR701_3.connectInput(0, groupTextYCbCr701)
    groupCrop1_2.connectInput(0, groupMerge21)
    groupNoOp2.connectInput(0, groupSwitchKey)

    param = groupConstant1.getParam("bottomLeft")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param
    param = groupConstant1.getParam("size")
    param.setExpression("950 + (Reformat1.boxSize.get()[0]*4)", False, 0)
    param.setExpression("1100 + (Reformat1.boxSize.get()[1]*8)", False, 1)
    del param
    param = groupReformat1.getParam("boxSize")
    param.setExpression("768 / ((thisGroup.getInput(0).getRegionOfDefinition(frame, view).width()) / (thisGroup.getInput(0).getRegionOfDefinition(frame, view).height()))", False, 1)
    del param
    param = groupTransformRGB.getParam("translate")
    param.setExpression("Constant1.size.get()[1] - Reformat1.boxSize.get()[1] - 300", False, 1)
    del param
    param = groupTransform2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupNoOp1.getParam("size")
    param.setExpression("Constant1.size.get()[0]", False, 0)
    param.setExpression("Constant1.size.get()[1]", False, 1)
    del param
    param = groupTransform2_3.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform1_2.getParam("translate")
    param.setExpression("Constant1.size.get()[1] - Reformat1.boxSize.get()[1] - 300", False, 1)
    del param
    param = groupTransformHSV.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformRGB.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformHSL.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformHSV.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformHSV_2.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransformHSL_2.getParam("translate")
    param.setExpression("thisGroup.TransformHSV.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransformYUV701.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformHSL.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformYUV701_2.getParam("translate")
    param.setExpression("thisGroup.TransformHSL.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransformYPBPR701.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformYUV701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformYPBPR701_2.getParam("translate")
    param.setExpression("thisGroup.TransformYUV701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransformYCBCR701.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformYPBPR701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformXYZ.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformYCBCR701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformXYZ_2.getParam("translate")
    param.setExpression("thisGroup.TransformYCBCR701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransformLAB.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("thisGroup.TransformXYZ.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupTransform2_2_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_3_2_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransform2_4_2_2_2_2_2_2_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Reformat1.boxSize.get()[0]+100", False, 0)
    del param
    param = groupTransformLAB_2.getParam("translate")
    param.setExpression("thisGroup.TransformXYZ.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupSwitchKeySpace.getParam("which")
    param.setExpression("thisGroup.keyerSpace.get()", False, 0)
    del param
    param = groupSwitchKey.getParam("which")
    param.setExpression("thisGroup.outputOperation.get()", False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.keyerChannel.get()", False, 0)
    del param
    param = groupGrade_rng.getParam("blackPoint")
    param.setExpression("thisGroup.whiteRange.get()", False, 0)
    param.setExpression("thisGroup.whiteRange.get()", False, 1)
    param.setExpression("thisGroup.whiteRange.get()", False, 2)
    param.setExpression("thisGroup.whiteRange.get()", False, 3)
    del param
    param = groupGrade_rng.getParam("whitePoint")
    param.setExpression("thisGroup.blackRange.get()", False, 0)
    param.setExpression("thisGroup.blackRange.get()", False, 1)
    param.setExpression("thisGroup.blackRange.get()", False, 2)
    param.setExpression("thisGroup.blackRange.get()", False, 3)
    del param
    param = groupGrade_rng.getParam("gamma")
    param.setExpression("thisGroup.gammaRange.get()", False, 0)
    param.setExpression("thisGroup.gammaRange.get()", False, 1)
    param.setExpression("thisGroup.gammaRange.get()", False, 2)
    param.setExpression("thisGroup.gammaRange.get()", False, 3)
    del param
    param = groupGrade_rng.getParam("clampBlack")
    param.setExpression("thisGroup.GradeKey.clampBlack.get()", False, 0)
    del param
    param = groupGrade_rng.getParam("clampWhite")
    param.setExpression("thisGroup.GradeKey.clampWhite.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.activateRange.get()", False, 0)
    del param
    param = groupPremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.keyPremult.get()", False, 0)
    del param
    param = groupInvert2.getParam("disableNode")
    param.setExpression("1-thisGroup.keyInvert.get()", False, 0)
    del param
    param = groupGradeKey.getParam("blackPoint")
    param.setExpression("thisGroup.keyBlack.get()", False, 0)
    param.setExpression("thisGroup.keyBlack.get()", False, 1)
    param.setExpression("thisGroup.keyBlack.get()", False, 2)
    param.setExpression("thisGroup.keyBlack.get()", False, 3)
    del param
    param = groupGradeKey.getParam("whitePoint")
    param.setExpression("thisGroup.keyWhite.get()", False, 0)
    param.setExpression("thisGroup.keyWhite.get()", False, 1)
    param.setExpression("thisGroup.keyWhite.get()", False, 2)
    param.setExpression("thisGroup.keyWhite.get()", False, 3)
    del param
    param = groupGradeKey.getParam("gamma")
    param.setExpression("thisGroup.keyGamma.get()", False, 0)
    param.setExpression("thisGroup.keyGamma.get()", False, 1)
    param.setExpression("thisGroup.keyGamma.get()", False, 2)
    param.setExpression("thisGroup.keyGamma.get()", False, 3)
    del param
    param = groupGradeKey.getParam("clampBlack")
    param.setExpression("thisGroup.keyBlackC.get()", False, 0)
    del param
    param = groupGradeKey.getParam("clampWhite")
    param.setExpression("thisGroup.keyWhiteC.get()", False, 0)
    del param
    param = groupTransform1_2_2.getParam("translate")
    param.setExpression("thisGroup.TransformRGB.translate.get()[0]", False, 0)
    param.setExpression("Constant1.size.get()[1] - 350", False, 1)
    del param
    param = groupTransform1_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Transform1_2_2.translate.get()[0] + (thisGroup.Reformat1.boxSize.get()[0] + 100)", False, 0)
    param.setExpression("Constant1.size.get()[1] - 350", False, 1)
    del param
    param = groupTransform1_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Transform1_2_2_2.translate.get()[0] + (thisGroup.Reformat1.boxSize.get()[0] + 100)", False, 0)
    param.setExpression("Constant1.size.get()[1] - 350", False, 1)
    del param
    param = groupTransform1_2_2_2_2_2.getParam("translate")
    param.setExpression("thisGroup.Transform1_2_2_2_2.translate.get()[0] + (thisGroup.Reformat1.boxSize.get()[0] + 100)", False, 0)
    param.setExpression("Constant1.size.get()[1] - 350", False, 1)
    del param
    param = groupCrop1.getParam("bottomLeft")
    param.setExpression("0", False, 0)
    param.slaveTo(groupConstant1.getParam("bottomLeft"), 0, 0)
    param.setExpression("0", False, 1)
    param.slaveTo(groupConstant1.getParam("bottomLeft"), 1, 1)
    del param
    param = groupCrop1.getParam("size")
    param.setExpression("950 + (Reformat1.boxSize.get()[0]*4)", False, 0)
    param.slaveTo(groupConstant1.getParam("size"), 0, 0)
    param.setExpression("1100 + (Reformat1.boxSize.get()[1]*8)", False, 1)
    param.slaveTo(groupConstant1.getParam("size"), 1, 1)
    del param
    param = groupNoOp1_2.getParam("size")
    param.setExpression("Constant1.size.get()[0]", False, 0)
    param.setExpression("Constant1.size.get()[1]", False, 1)
    del param
    param = groupTransformYCBCR701_3.getParam("translate")
    param.setExpression("thisGroup.TransformYPBPR701.translate.get()[1] - (thisGroup.Reformat1.boxSize.get()[1]+100)", False, 1)
    del param
    param = groupCrop1_2.getParam("bottomLeft")
    param.setExpression("0", False, 0)
    param.setExpression("0", False, 1)
    del param
    param = groupCrop1_2.getParam("size")
    param.setExpression("950 + (Reformat1.boxSize.get()[0]*4)", False, 0)
    param.setExpression("1100 + (Reformat1.boxSize.get()[1]*8)", False, 1)
    del param
    param = groupNoOp2.getParam("size")
    param.setExpression("thisGroup.getInput(0).getRegionOfDefinition(frame, view).width()", False, 0)
    param.setExpression("thisGroup.getInput(0).getRegionOfDefinition(frame, view).height()", False, 1)
    del param
    param = groupNoOp2.getParam("disableNode")
    param.setExpression("1-thisGroup.outputOperation.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_ChannelContactsheetExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
