# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_HairKeyExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_HairKeyExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_HairKey"

def getLabel():
    return "lp_HairKey"

def getVersion():
    return 1

def getIconPath():
    return "lp_HairKey.png"

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "Create key-less keys of hair and other fine detail which are hard to matte. Requires a cleanplate (generated ones do work better usually) but can also be utilized with a single color. Works for bright and dark hair."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("hairtype", "hair type")
    entries = [ ("bright 1", ""),
    ("bright 2", ""),
    ("dark", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Choose which tone of hair you are trying to key; \'bright 1\' equals a plus, \'bright 2\' a screen and \'dark\' a multiply-operation")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.hairtype = param
    del param

    param = lastNode.createChoiceParam("screencolour_pulldown", "screen colour")
    entries = [ ("R", ""),
    ("G", ""),
    ("B", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("G")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the appropriate math according to the screen colour used. \n\nThis is neglectable if connected source and cleanplate are already despilled.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.screencolour_pulldown = param
    del param

    param = lastNode.createChoiceParam("linlog", "process in")
    entries = [ ("log", ""),
    ("linear", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("linear")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Chooses if the calculation gets done in linear or log space.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.linlog = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createChoiceParam("despillalg", "despill")
    entries = [ ("none", ""),
    ("average", ""),
    ("max", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("average")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the despill algorithm for the operation (despills source and cleanplate all alike). \n\nIf your connected clips are already despilled, set it to \'none\'.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.despillalg = param
    del param

    param = lastNode.createColorParam("Multiply1value", "intensity", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(4, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(4, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(4, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("boosts the effect. hint: when this value is negative and the hair type set to \"dark\", it works great for the application of bright hair, too :)\nyou can tone the colour by adjusting the colour-channels seperately")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Multiply1value = param
    del param

    param = lastNode.createDoubleParam("Saturation1saturation", "saturation")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Desaturates the apllied effect. Can be handy if it\'s boosted a lot.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Saturation1saturation = param
    del param

    param = lastNode.createSeparatorParam("sep02", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createBooleanParam("Switch4disableNode", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("invert the connected mask")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Switch4disableNode = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_HairKey\n(c) 2016 by lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("cleanplate")
    lastNode.setPosition(3103, -194)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param


    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createBooleanParam("cp_connected", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.cp_connected = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Info', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "img"

    # Start of node "avgR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgR")
    lastNode.setLabel("avgR")
    lastNode.setPosition(2076, 394)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgR = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > ((g+b)/2) ? ((g+b)/2) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgR"

    # Start of node "avgG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgG")
    lastNode.setLabel("avgG")
    lastNode.setPosition(2146, 457)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgG = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > ((r+b)/2) ? ((r+b)/2) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgG"

    # Start of node "avgB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgB")
    lastNode.setLabel("avgB")
    lastNode.setPosition(2222, 395)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgB = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > ((r+g)/2) ? ((r+g)/2) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgB"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2134, 534)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2179, 342)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2328, 158)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "avgRc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgRc")
    lastNode.setLabel("avgRc")
    lastNode.setPosition(2891, 423)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgRc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > ((g+b)/2) ? ((g+b)/2) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgRc"

    # Start of node "avgGc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgGc")
    lastNode.setLabel("avgGc")
    lastNode.setPosition(2954, 485)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgGc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > ((r+b)/2) ? ((r+b)/2) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgGc"

    # Start of node "avgBc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("avgBc")
    lastNode.setLabel("avgBc")
    lastNode.setPosition(3018, 425)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupavgBc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > ((r+g)/2) ? ((r+g)/2) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "avgBc"

    # Start of node "Switch1_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1_2")
    lastNode.setLabel("Switch1_2")
    lastNode.setPosition(2942, 569)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1_2"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(2987, 358)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2283, 947)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("from")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("from")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3148, 973)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "HSVTool1"
    lastNode = app.createNode("net.sf.openfx.HSVToolPlugin", 1, group)
    lastNode.setScriptName("HSVTool1")
    lastNode.setLabel("HSVTool1")
    lastNode.setPosition(2283, 807)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVTool1 = lastNode

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(512, 0)
        param.setValue(288, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1024, 0)
        param.setValue(576, 1)
        del param

    param = lastNode.getParam("hueRotation")
    if param is not None:
        param.setValue(180, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVTool1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(3148, 13)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2328, 29)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1812, 1937)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(1861, 85)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Log2Lin1_3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_3")
    lastNode.setLabel("Log2Lin1_3")
    lastNode.setPosition(1828, 221)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_3"

    # Start of node "Log2Lin1_4"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_4")
    lastNode.setLabel("Log2Lin1_4")
    lastNode.setPosition(1824, 2373)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_4 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_4"

    # Start of node "Log2Lin1_2_2"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_2_2")
    lastNode.setLabel("Log2Lin1_2_2")
    lastNode.setPosition(3115, 222)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_2_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_2_2"

    # Start of node "Log2Lin1_2_3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_2_3")
    lastNode.setLabel("Log2Lin1_2_3")
    lastNode.setPosition(2295, 226)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_2_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_2_3"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(2073, 1744)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("multiply")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1857, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Switch3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3")
    lastNode.setLabel("Switch3")
    lastNode.setPosition(1812, 2117)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(2283, 1089)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply1 = lastNode

    del lastNode
    # End of node "Multiply1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2283, 1244)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "HSVTool1_2"
    lastNode = app.createNode("net.sf.openfx.HSVToolPlugin", 1, group)
    lastNode.setScriptName("HSVTool1_2")
    lastNode.setLabel("HSVTool1_2")
    lastNode.setPosition(3103, 844)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVTool1_2 = lastNode

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(512, 0)
        param.setValue(288, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1024, 0)
        param.setValue(576, 1)
        del param

    param = lastNode.getParam("hueRotation")
    if param is not None:
        param.setValue(180, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVTool1_2"

    # Start of node "Output3"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output3")
    lastNode.setLabel("Output3")
    lastNode.setPosition(1812, 2727)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput3 = lastNode

    del lastNode
    # End of node "Output3"

    # Start of node "cleanplate"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("cleanplate")
    lastNode.setLabel("bg")
    lastNode.setPosition(1816, -190)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupcleanplate = lastNode

    del lastNode
    # End of node "cleanplate"

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("img")
    lastNode.setPosition(2283, -180)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupbg = lastNode

    del lastNode
    # End of node "bg"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(1208, 1229)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(1452, 1490)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        del param

    del lastNode
    # End of node "Constant2"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(1208, 1586)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    del lastNode
    # End of node "Merge4"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(1208, 1865)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1812, 2488)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(1937, 1840)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2118, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(1982, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(2118, 2131)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(1982, 2018)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2328, 1770)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2328, 1866)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2328, 1963)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(1718, 2502)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(1253, 2247)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(1861, 1383)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(1718, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "RGBToHSV1"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("RGBToHSV1")
    lastNode.setLabel("RGBToHSV1")
    lastNode.setPosition(2283, 1384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSV1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "RGBToHSV1"

    # Start of node "HSVToRGB1"
    lastNode = app.createNode("net.sf.openfx.HSVToRGB", 1, group)
    lastNode.setScriptName("HSVToRGB1")
    lastNode.setLabel("HSVToRGB1")
    lastNode.setPosition(2283, 1487)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVToRGB1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVToRGB1"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(2283, 1438)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("offset")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade2"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(1812, 2221)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("copy")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(1718, 2132)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(1497, 1383)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(1497, 1612)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(3148, 355)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "maxRc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxRc")
    lastNode.setLabel("maxRc")
    lastNode.setPosition(3223, 421)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxRc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > max(g,b) ? max(g,b) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxRc"

    # Start of node "maxGc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxGc")
    lastNode.setLabel("maxGc")
    lastNode.setPosition(3286, 482)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxGc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > max(r,b) ? max(r,b) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxGc"

    # Start of node "maxBc"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxBc")
    lastNode.setLabel("maxBc")
    lastNode.setPosition(3352, 418)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxBc = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > max(r,g) ? max(r,g) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxBc"

    # Start of node "Switch1_2_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1_2_2")
    lastNode.setLabel("Switch1_2_2")
    lastNode.setPosition(3274, 567)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1_2_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1_2_2"

    # Start of node "Dot1_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2")
    lastNode.setLabel("Dot1_2_2")
    lastNode.setPosition(3319, 355)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2"

    # Start of node "Switch4"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch4")
    lastNode.setLabel("Switch4")
    lastNode.setPosition(3103, 684)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch4 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch4"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(2328, 342)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "maxR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxR")
    lastNode.setLabel("maxR")
    lastNode.setPosition(2373, 399)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxR = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > max(g,b) ? max(g,b) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxR"

    # Start of node "maxG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxG")
    lastNode.setLabel("maxG")
    lastNode.setPosition(2443, 461)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxG = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > max(r,b) ? max(r,b) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxG"

    # Start of node "maxB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("maxB")
    lastNode.setLabel("maxB")
    lastNode.setPosition(2520, 400)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmaxB = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > max(r,g) ? max(r,g) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "maxB"

    # Start of node "Switch1_3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1_3")
    lastNode.setLabel("Switch1_3")
    lastNode.setPosition(2431, 539)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1_3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1_3"

    # Start of node "Dot1_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_3")
    lastNode.setLabel("Dot1_3")
    lastNode.setPosition(2476, 342)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_3 = lastNode

    del lastNode
    # End of node "Dot1_3"

    # Start of node "Switch5"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch5")
    lastNode.setLabel("Switch5")
    lastNode.setPosition(2283, 687)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch5 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch5"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(2283, 1633)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Average")
        del param

    del lastNode
    # End of node "Saturation1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupavgR.connectInput(0, groupDot1)
    groupavgG.connectInput(0, groupDot1)
    groupavgB.connectInput(0, groupDot1)
    groupSwitch1.connectInput(0, groupavgR)
    groupSwitch1.connectInput(1, groupavgG)
    groupSwitch1.connectInput(2, groupavgB)
    groupDot1.connectInput(0, groupDot20)
    groupDot5.connectInput(0, groupDot7)
    groupavgRc.connectInput(0, groupDot1_2)
    groupavgGc.connectInput(0, groupDot1_2)
    groupavgBc.connectInput(0, groupDot1_2)
    groupSwitch1_2.connectInput(0, groupavgRc)
    groupSwitch1_2.connectInput(1, groupavgGc)
    groupSwitch1_2.connectInput(2, groupavgBc)
    groupDot1_2.connectInput(0, groupDot16)
    groupMerge3.connectInput(0, groupHSVTool1)
    groupMerge3.connectInput(1, groupDot6)
    groupDot6.connectInput(0, groupHSVTool1_2)
    groupHSVTool1.connectInput(0, groupSwitch5)
    groupDot4.connectInput(0, groupimg)
    groupDot7.connectInput(0, groupbg)
    groupMerge1.connectInput(0, groupDot12)
    groupMerge1.connectInput(1, groupDot19)
    groupDot8.connectInput(0, groupcleanplate)
    groupLog2Lin1_3.connectInput(0, groupDot8)
    groupLog2Lin1_4.connectInput(0, groupMerge2)
    groupLog2Lin1_2_2.connectInput(0, groupDot4)
    groupLog2Lin1_2_3.connectInput(0, groupDot5)
    groupMerge1_2.connectInput(0, groupDot9)
    groupMerge1_2.connectInput(1, groupDot14)
    groupDot12.connectInput(0, groupDot23)
    groupSwitch3.connectInput(0, groupMerge1)
    groupSwitch3.connectInput(1, groupDot11)
    groupSwitch3.connectInput(2, groupDot10)
    groupMultiply1.connectInput(0, groupMerge3)
    groupInvert1.connectInput(0, groupMultiply1)
    groupHSVTool1_2.connectInput(0, groupSwitch4)
    groupOutput3.connectInput(0, groupShuffle1)
    groupConstant2.connectInput(0, groupDot22)
    groupMerge4.connectInput(0, groupmask)
    groupMerge4.connectInput(1, groupDot24)
    groupInvert2.connectInput(0, groupMerge4)
    groupShuffle1.connectInput(0, groupLog2Lin1_4)
    groupShuffle1.connectInput(1, groupDot25)
    groupMerge1_3.connectInput(0, groupDot13)
    groupMerge1_3.connectInput(1, groupDot18)
    groupDot9.connectInput(0, groupDot13)
    groupDot13.connectInput(0, groupDot12)
    groupDot10.connectInput(0, groupMerge1_2)
    groupDot11.connectInput(0, groupMerge1_3)
    groupDot14.connectInput(0, groupSaturation1)
    groupDot18.connectInput(0, groupDot14)
    groupDot19.connectInput(0, groupDot18)
    groupDot25.connectInput(0, groupDot21)
    groupDot15.connectInput(0, groupInvert2)
    groupDot23.connectInput(0, groupLog2Lin1_3)
    groupDot17.connectInput(0, groupDot12)
    groupRGBToHSV1.connectInput(0, groupInvert1)
    groupHSVToRGB1.connectInput(0, groupGrade2)
    groupGrade2.connectInput(0, groupRGBToHSV1)
    groupMerge2.connectInput(0, groupSwitch3)
    groupMerge2.connectInput(1, groupDot21)
    groupMerge2.connectInput(2, groupDot15)
    groupDot21.connectInput(0, groupDot17)
    groupDot22.connectInput(0, groupDot23)
    groupDot24.connectInput(0, groupConstant2)
    groupDot16.connectInput(0, groupLog2Lin1_2_2)
    groupmaxRc.connectInput(0, groupDot1_2_2)
    groupmaxGc.connectInput(0, groupDot1_2_2)
    groupmaxBc.connectInput(0, groupDot1_2_2)
    groupSwitch1_2_2.connectInput(0, groupmaxRc)
    groupSwitch1_2_2.connectInput(1, groupmaxGc)
    groupSwitch1_2_2.connectInput(2, groupmaxBc)
    groupDot1_2_2.connectInput(0, groupDot16)
    groupSwitch4.connectInput(0, groupDot16)
    groupSwitch4.connectInput(1, groupSwitch1_2)
    groupSwitch4.connectInput(2, groupSwitch1_2_2)
    groupDot20.connectInput(0, groupLog2Lin1_2_3)
    groupmaxR.connectInput(0, groupDot1_3)
    groupmaxG.connectInput(0, groupDot1_3)
    groupmaxB.connectInput(0, groupDot1_3)
    groupSwitch1_3.connectInput(0, groupmaxR)
    groupSwitch1_3.connectInput(1, groupmaxG)
    groupSwitch1_3.connectInput(2, groupmaxB)
    groupDot1_3.connectInput(0, groupDot20)
    groupSwitch5.connectInput(0, groupDot20)
    groupSwitch5.connectInput(1, groupSwitch1)
    groupSwitch5.connectInput(2, groupSwitch1_3)
    groupSaturation1.connectInput(0, groupHSVToRGB1)

    param = groupimg.getParam("cp_connected")
    param.setExpression("thisNode.getInput", True, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.screencolour_pulldown.get()", False, 0)
    del param
    param = groupSwitch1_2.getParam("which")
    param.setExpression("thisGroup.screencolour_pulldown.get()", False, 0)
    del param
    param = groupHSVTool1.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupLog2Lin1_3.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin1_4.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin1_2_2.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin1_2_3.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupSwitch3.getParam("which")
    param.setExpression("thisGroup.hairtype.get()", False, 0)
    del param
    param = groupMultiply1.getParam("value")
    group.getParam("Multiply1value").setAsAlias(param)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupHSVTool1_2.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupInvert2.getParam("disableNode")
    param.setExpression("1-thisGroup.Switch4disableNode.get()", False, 0)
    del param
    param = groupRGBToHSV1.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupHSVToRGB1.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupGrade2.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupSwitch1_2_2.getParam("which")
    param.setExpression("thisGroup.screencolour_pulldown.get()", False, 0)
    del param
    param = groupSwitch4.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupSwitch1_3.getParam("which")
    param.setExpression("thisGroup.screencolour_pulldown.get()", False, 0)
    del param
    param = groupSwitch5.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupSaturation1.getParam("saturation")
    group.getParam("Saturation1saturation").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["lp_HairKeyExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
