# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_ChillSpillExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_ChillSpillExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_ChillSpill"

def getLabel():
    return "lp_ChillSpill"

def getVersion():
    return 4

def getIconPath():
    return "lp_ChillSpill.png"

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "Advanced, yet easy to use despill with a variety of algorithms, working in R, G and B.\n\nINPUTS\nimg = connect the main plate you want to despill\nbg = connect a background image to use its colourinformation in the despill-process\nmask = masks the effect by a connected alpha-channel\n\nHOW TO USE IT\nConnect an image and set the appropriate screen-colour. To get the best out of your material, you can try to alter the algorithm, despill method and replacement; the default luma restore tries to give the most neutral result. You can weight the average-operation towards one of the replacement channels (e.g. either red or blue for a greenscreen). You can also amp the replacement channels up or down before the algorithm, this can help tackling some nasty edges and other shortcomings of the technique. A PIK Keyer can be used for advanced adjustments which can help with nasty coloured edges; with default settings, PIK acts the same as average.\nYou can connect the background-image to applyits information to the despilled areas. A handful correcting-parameters are build-in too.\nLast but not least, the tool enables you to shuffle a spillmatte into the alpha channel, in case you need it for further adjustments (or for an entire key).\n\nFor really problematic shots with nasty edges etc, it might be clever to make one really aggressive despill for the edges and another, normal one for the core; keymixed by a core-matte from the initial key.\n\nHOW DOES IT WORK\nPure, boring math of channels. "

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("screentype", "screen type")
    entries = [ ("red", ""),
    ("green", ""),
    ("blue", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("green")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Select your screen colour.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.screentype = param
    del param

    param = lastNode.createChoiceParam("linlog", "process in")
    entries = [ ("log", ""),
    ("linear", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("linear")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Changes the processing colourspace to lin or log. \n\nCaution: in log, some operations (like luma restore and background replacement method) may not behave as expected.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.linlog = param
    del param

    param = lastNode.createChoiceParam("despillalg", "algorithm")
    entries = [ ("avg", ""),
    ("max", ""),
    ("min", ""),
    ("PIK", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Selects the despill algorithm. \n\'Average\' works best most of the time, \'Max\' can tackle some weird hue shifts (e.g. with yellow colour turning orange on a greenscreen).\n\'Min\' rarely gives a good result, but better having than needing :) \n\'PIK\' (also working on red) is great to tackle complicated edges, look into the \'Advanced\' tab for more options. By default, it will be the same as \'average\'.\n\nIf you want to limit the screen by only one channel, use the \'weight\'-slider at either 0 or 1")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.despillalg = param
    del param

    param = lastNode.createDoubleParam("rto", "average weight")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Weights the two replacement channels in the average operation (making it essentially not average anymore). \nCan be used to limit by only one channel by setting it to 0 or 1.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.rto = param
    del param

    param = lastNode.createDoubleParam("channelamp", "channel amp")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the gain for the replacement channels right before the algorithm. This can help tackling frizzy edges and hard to despill shots. \nWon\'t work on PIK algorithm; see \'Advanced\' tab for more options.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.channelamp = param
    del param

    param = lastNode.createChoiceParam("method", "despill method")
    entries = [ ("auto", ""),
    ("luma restore", ""),
    ("add difference", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("luma restore")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the post-treatment for the spilled areas. \n\nThe default \'luma restore\' usually gives a neutral result with the same luminance as the screen.\n\n\'auto\' is the pure result of the algorithm.\n\n\'add difference\' will add the difference between the plate and the chosen algorithm to all RGB channels, this usually results to a fairly neutral but bright image.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.method = param
    del param

    param = lastNode.createChoiceParam("replacement", "replacement")
    entries = [ ("none", ""),
    ("colour", ""),
    ("background", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Applies a colour or the connected background based on the (boosted) spillmatte on top of the despill and replacement-operations.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.replacement = param
    del param

    param = lastNode.createChoiceParam("addapply", "apply color/bg with")
    entries = [ ("over", ""),
    ("add", ""),
    ("screen", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the blending operation for \'colour\' and \'background\' replacement methods. Has no effect for the other operations.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.addapply = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createGroupParam("bgcoladj", "bg/colour adjustments")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.bgcoladj = param
    del param

    param = lastNode.createColorParam("colour", "colour", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.8, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.3, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)

    # Add the param to the group, no need to add it to the page
    lastNode.bgcoladj.addParam(param)

    # Set param properties
    param.setHelp("Sets the colour for the replacement-method.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colour = param
    del param

    param = lastNode.createColorParam("bgblk", "bg blackpoint", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the group, no need to add it to the page
    lastNode.bgcoladj.addParam(param)

    # Set param properties
    param.setHelp("Adjusts blackpoint for background input. Use it seperate on RGB to match colour properly if the operations wash out/brighten up.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.bgblk = param
    del param

    param = lastNode.createColorParam("bgwht", "bg whitepoint", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the group, no need to add it to the page
    lastNode.bgcoladj.addParam(param)

    # Set param properties
    param.setHelp("Adjusts whitepoint for background input. Use it seperate on RGB to match colour properly if the operations wash out/brighten up.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.bgwht = param
    del param

    param = lastNode.createDoubleParam("preblur", "background pre-blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(15, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.bgcoladj.addParam(param)

    # Set param properties
    param.setHelp("Pre-blur the connected bg-image. Stronly suggested to not set this to 0.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.preblur = param
    del param

    param = lastNode.createDoubleParam("spillmatteboost", "boost")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the group, no need to add it to the page
    lastNode.bgcoladj.addParam(param)

    # Set param properties
    param.setHelp("Boosts the replacement methods by adjusting the spillmatte whitepoint.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.spillmatteboost = param
    del param

    param = lastNode.createSeparatorParam("sep02", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createColorParam("ColorCorrect1MasterGain", "gain", True)
    param.setDisplayMinimum(-2, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(-2, 1)
    param.setDisplayMaximum(2, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(-2, 2)
    param.setDisplayMaximum(2, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(-2, 3)
    param.setDisplayMaximum(2, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Gains the despilled area based on the spillmatte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ColorCorrect1MasterGain = param
    del param

    param = lastNode.createColorParam("ColorCorrect1MasterGamma", "gamma", True)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the gamma of the despilled area based on the spillmatte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ColorCorrect1MasterGamma = param
    del param

    param = lastNode.createDoubleParam("satcr", "saturation")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-2, 0)
    param.setDisplayMaximum(2, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("(De)saturates the despilled area based on the spillmatte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.satcr = param
    del param

    param = lastNode.createSeparatorParam("sep03", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createBooleanParam("spillmatte", "shuffle spillmatte to alpha")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Shuffles the spillmatte to the Alpha Channel, to be used in further adjustments.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.spillmatte = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Invert the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_ChillSpill\n(c) 2016 by lucas pfaff\ninspired by bm_Despill (Ben McEwan)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    lastNode.advanced = lastNode.createPageParam("advanced", "Advanced")
    param = lastNode.createSeparatorParam("pikadv", "PIK")

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.pikadv = param
    del param

    param = lastNode.createColorParam("colouroffset", "colour offset", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the colour-parameter as offset.\n\nBy default, the screen-colour will be set to 1 and the other two to 0; so if you offset the screen-colour to 1 with these controls, it will actually be 2.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colouroffset = param
    del param

    param = lastNode.createColorParam("pikbias", "alpha bias", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Adjusts alpha bias. Your best friend for nasty edges :)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pikbias = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'advanced', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(2627, 4594)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2627, -683)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2672, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "alg_B"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_B")
    lastNode.setLabel("alg_B")
    lastNode.setPosition(4239, 835)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_B = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_B"

    # Start of node "alg_G"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_G")
    lastNode.setLabel("alg_G")
    lastNode.setPosition(2726, 861)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_G = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_G"

    # Start of node "screencol"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("screencol")
    lastNode.setLabel("screencol")
    lastNode.setPosition(2622, 1240)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupscreencol = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "screencol"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(4195, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "alg_R"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_R")
    lastNode.setLabel("alg_R")
    lastNode.setPosition(1737, 870)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_R = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_R"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1634, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("bg")
    lastNode.setPosition(5021, 445)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupbg = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "bg"

    # Start of node "bg_preblur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("bg_preblur")
    lastNode.setLabel("bg_preblur")
    lastNode.setPosition(4690, 1273)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupbg_preblur = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "bg_preblur"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(4690, 384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.8, 0)
        param.setValue(0.3, 1)
        param.setValue(0.5, 2)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(4735, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(4690, 575)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(4690, 1417)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2672, 1431)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(4690, 1705)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2871, 1853)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(3095, 2050)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(3324, 2230)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(4735, 1879)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(3138, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(4735, 2076)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(3369, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(4735, 2262)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(2871, 2239)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Switch4"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch4")
    lastNode.setLabel("Switch4")
    lastNode.setPosition(1807, 4041)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch4 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch4"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2916, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(1143, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(1143, 4055)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(2627, 4279)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(1852, 4293)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(1143, 3391)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "keymix"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("keymix")
    lastNode.setLabel("keymix")
    lastNode.setPosition(2627, 3732)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupkeymix = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("copy")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "keymix"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(452, 3668)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(452, 3246)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(497, 3758)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(2284, 3391)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(807, 3494)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    del lastNode
    # End of node "Constant2"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(852, 3584)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(852, 3391)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Merge2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_2")
    lastNode.setLabel("Merge2_2")
    lastNode.setPosition(452, 3558)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_2 = lastNode

    del lastNode
    # End of node "Merge2_2"

    # Start of node "ColorCorrect1"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1")
    lastNode.setLabel("ColorCorrect1")
    lastNode.setPosition(2627, 2811)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1 = lastNode

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(1852, 2825)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(2627, 2990)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Average")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2240, 1786)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("minus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("minus")
        del param

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(1143, 1812)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Dot26"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot26")
    lastNode.setLabel("Dot26")
    lastNode.setPosition(2285, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot26 = lastNode

    del lastNode
    # End of node "Dot26"

    # Start of node "Dot27"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot27")
    lastNode.setLabel("Dot27")
    lastNode.setPosition(2672, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot27 = lastNode

    del lastNode
    # End of node "Dot27"

    # Start of node "Switch5"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch5")
    lastNode.setLabel("Switch5")
    lastNode.setPosition(2627, 2176)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch5 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch5"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(2285, 2004)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2393, 1978)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot28"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot28")
    lastNode.setLabel("Dot28")
    lastNode.setPosition(2438, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot28 = lastNode

    del lastNode
    # End of node "Dot28"

    # Start of node "Dot29"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot29")
    lastNode.setLabel("Dot29")
    lastNode.setPosition(1852, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot29 = lastNode

    del lastNode
    # End of node "Dot29"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2916, 2409)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot30"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot30")
    lastNode.setLabel("Dot30")
    lastNode.setPosition(2438, 2089)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot30 = lastNode

    del lastNode
    # End of node "Dot30"

    # Start of node "Dot31"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot31")
    lastNode.setLabel("Dot31")
    lastNode.setPosition(5066, 589)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot31 = lastNode

    del lastNode
    # End of node "Dot31"

    # Start of node "Saturation2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation2")
    lastNode.setLabel("Saturation2")
    lastNode.setPosition(2240, 1893)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation2"

    # Start of node "Log2Lin1"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1")
    lastNode.setLabel("Log2Lin1")
    lastNode.setPosition(2639, -91)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1"

    # Start of node "Log2Lin2"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin2")
    lastNode.setLabel("Log2Lin2")
    lastNode.setPosition(4702, 797)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin2"

    # Start of node "Log2Lin3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin3")
    lastNode.setLabel("Log2Lin3")
    lastNode.setPosition(2639, 3364)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin3 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin3"

    # Start of node "Dot32"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot32")
    lastNode.setLabel("Dot32")
    lastNode.setPosition(2419, 2825)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot32 = lastNode

    del lastNode
    # End of node "Dot32"

    # Start of node "Dot33"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot33")
    lastNode.setLabel("Dot33")
    lastNode.setPosition(2419, 3004)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot33 = lastNode

    del lastNode
    # End of node "Dot33"

    # Start of node "Rg"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Rg")
    lastNode.setLabel("Rg")
    lastNode.setPosition(2372, 381)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupRg = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Rg"

    # Start of node "Gg"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Gg")
    lastNode.setLabel("Gg")
    lastNode.setPosition(2559, 390)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupGg = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Gg"

    # Start of node "Bg"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Bg")
    lastNode.setLabel("Bg")
    lastNode.setPosition(2857, 409)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupBg = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Bg"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(2176, 660)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(2314, 657)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "Merge6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6")
    lastNode.setLabel("Merge6")
    lastNode.setPosition(2538, 716)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("max")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    del lastNode
    # End of node "Merge6"

    # Start of node "Merge5_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2")
    lastNode.setLabel("Merge5_2")
    lastNode.setPosition(2657, 716)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2"

    # Start of node "Merge6_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6_2")
    lastNode.setLabel("Merge6_2")
    lastNode.setPosition(2833, 602)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge6_2"

    # Start of node "Merge5_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2_2")
    lastNode.setLabel("Merge5_2_2")
    lastNode.setPosition(2965, 602)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2_2"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(2148, 538)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade2"

    # Start of node "Grade3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3")
    lastNode.setLabel("Grade3")
    lastNode.setPosition(2293, 541)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade3"

    # Start of node "r_ampG"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("r_ampG")
    lastNode.setLabel("r_ampG")
    lastNode.setPosition(2372, 448)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupr_ampG = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "r_ampG"

    # Start of node "b_ampG"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("b_ampG")
    lastNode.setLabel("b_ampG")
    lastNode.setPosition(2857, 493)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupb_ampG = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "b_ampG"

    # Start of node "insertG"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("insertG")
    lastNode.setLabel("insertG")
    lastNode.setPosition(2627, 1009)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupinsertG = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "insertG"

    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(2448, 846)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("minus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("minus")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge7"

    # Start of node "spillmatteG"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("spillmatteG")
    lastNode.setLabel("spillmatteG")
    lastNode.setPosition(2627, 1149)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupspillmatteG = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    del lastNode
    # End of node "spillmatteG"

    # Start of node "Rr"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Rr")
    lastNode.setLabel("Rr")
    lastNode.setPosition(1339, 384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupRr = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Rr"

    # Start of node "Gr"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Gr")
    lastNode.setLabel("Gr")
    lastNode.setPosition(1526, 392)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupGr = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Gr"

    # Start of node "Br"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Br")
    lastNode.setLabel("Br")
    lastNode.setPosition(1787, 387)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupBr = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Br"

    # Start of node "Merge4_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2")
    lastNode.setLabel("Merge4_2")
    lastNode.setPosition(1134, 705)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge4_2"

    # Start of node "Merge5_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_3")
    lastNode.setLabel("Merge5_3")
    lastNode.setPosition(1341, 698)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_3"

    # Start of node "Merge6_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6_3")
    lastNode.setLabel("Merge6_3")
    lastNode.setPosition(1505, 719)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("max")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    del lastNode
    # End of node "Merge6_3"

    # Start of node "Merge5_2_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2_3")
    lastNode.setLabel("Merge5_2_3")
    lastNode.setPosition(1626, 719)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2_3"

    # Start of node "Merge6_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6_2_2")
    lastNode.setLabel("Merge6_2_2")
    lastNode.setPosition(1832, 715)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge6_2_2"

    # Start of node "Merge5_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2_2_2")
    lastNode.setLabel("Merge5_2_2_2")
    lastNode.setPosition(1964, 715)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2_2_2"

    # Start of node "Grade2_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2_2")
    lastNode.setLabel("Grade2_2")
    lastNode.setPosition(1106, 583)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2_2 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade2_2"

    # Start of node "Grade3_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3_2")
    lastNode.setLabel("Grade3_2")
    lastNode.setPosition(1251, 586)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3_2 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade3_2"

    # Start of node "g_ampR"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("g_ampR")
    lastNode.setLabel("g_ampR")
    lastNode.setPosition(1526, 470)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupg_ampR = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "g_ampR"

    # Start of node "b_ampR"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("b_ampR")
    lastNode.setLabel("b_ampR")
    lastNode.setPosition(1795, 488)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupb_ampR = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "b_ampR"

    # Start of node "insertR"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("insertR")
    lastNode.setLabel("insertR")
    lastNode.setPosition(1589, 1012)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupinsertR = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "insertR"

    # Start of node "Merge7_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2")
    lastNode.setLabel("Merge7_2")
    lastNode.setPosition(1447, 858)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("minus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("minus")
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge7_2"

    # Start of node "spillmatteR"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("spillmatteR")
    lastNode.setLabel("spillmatteR")
    lastNode.setPosition(1589, 1159)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupspillmatteR = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    del lastNode
    # End of node "spillmatteR"

    # Start of node "Dot34"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot34")
    lastNode.setLabel("Dot34")
    lastNode.setPosition(1634, 1254)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot34 = lastNode

    del lastNode
    # End of node "Dot34"

    # Start of node "Rb"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Rb")
    lastNode.setLabel("Rb")
    lastNode.setPosition(3915, 372)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupRb = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Rb"

    # Start of node "Gb"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Gb")
    lastNode.setLabel("Gb")
    lastNode.setPosition(4063, 369)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupGb = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Gb"

    # Start of node "Bb"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Bb")
    lastNode.setLabel("Bb")
    lastNode.setPosition(4202, 384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupBb = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Bb"

    # Start of node "Merge4_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2_2")
    lastNode.setLabel("Merge4_2_2")
    lastNode.setPosition(3745, 636)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge4_2_2"

    # Start of node "Merge5_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_3_2")
    lastNode.setLabel("Merge5_3_2")
    lastNode.setPosition(3894, 636)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_3_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_3_2"

    # Start of node "Merge6_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6_3_2")
    lastNode.setLabel("Merge6_3_2")
    lastNode.setPosition(4041, 722)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6_3_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("max")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    del lastNode
    # End of node "Merge6_3_2"

    # Start of node "Merge5_2_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2_3_2")
    lastNode.setLabel("Merge5_2_3_2")
    lastNode.setPosition(4162, 722)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2_3_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2_3_2"

    # Start of node "Merge6_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6_2_2_2")
    lastNode.setLabel("Merge6_2_2_2")
    lastNode.setPosition(4293, 586)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge6_2_2_2"

    # Start of node "Merge5_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5_2_2_2_2")
    lastNode.setLabel("Merge5_2_2_2_2")
    lastNode.setPosition(4424, 586)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5_2_2_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge5_2_2_2_2"

    # Start of node "Grade2_2_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2_2_2")
    lastNode.setLabel("Grade2_2_2")
    lastNode.setPosition(3669, 546)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2_2_2 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade2_2_2"

    # Start of node "Grade3_2_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3_2_2")
    lastNode.setLabel("Grade3_2_2")
    lastNode.setPosition(3807, 542)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3_2_2 = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Grade3_2_2"

    # Start of node "g_ampB"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("g_ampB")
    lastNode.setLabel("g_ampB")
    lastNode.setPosition(4138, 457)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupg_ampB = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "g_ampB"

    # Start of node "insertB"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("insertB")
    lastNode.setLabel("insertB")
    lastNode.setPosition(4150, 986)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupinsertB = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "insertB"

    # Start of node "Merge7_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7_2_2")
    lastNode.setLabel("Merge7_2_2")
    lastNode.setPosition(3922, 937)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7_2_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("minus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("minus")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge7_2_2"

    # Start of node "spillmatteB"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("spillmatteB")
    lastNode.setLabel("spillmatteB")
    lastNode.setPosition(4150, 1154)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupspillmatteB = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    del lastNode
    # End of node "spillmatteB"

    # Start of node "r_ampB"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("r_ampB")
    lastNode.setLabel("r_ampB")
    lastNode.setPosition(3998, 466)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupr_ampB = lastNode

    param = lastNode.getParam("multiply")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "r_ampB"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(4194, 1254)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(1946, 1885)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Start of node "Dot35"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot35")
    lastNode.setLabel("Dot35")
    lastNode.setPosition(1991, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot35 = lastNode

    del lastNode
    # End of node "Dot35"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(2091, 1976)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge8"

    # Start of node "Dot36"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot36")
    lastNode.setLabel("Dot36")
    lastNode.setPosition(2136, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot36 = lastNode

    del lastNode
    # End of node "Dot36"

    # Start of node "Dot37"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot37")
    lastNode.setLabel("Dot37")
    lastNode.setPosition(1991, 2002)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot37 = lastNode

    del lastNode
    # End of node "Dot37"

    # Start of node "PIKb"
    lastNode = app.createNode("net.sf.openfx.PIK", 1, group)
    lastNode.setScriptName("PIKb")
    lastNode.setLabel("PIKb")
    lastNode.setPosition(4508, 835)
    lastNode.setSize(80, 43)
    lastNode.setColor(0, 0.6667, 1)
    groupPIKb = lastNode

    param = lastNode.getParam("screenType")
    if param is not None:
        param.set("Pick")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("alphaBias")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        del param

    del lastNode
    # End of node "PIKb"

    # Start of node "Switch3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3")
    lastNode.setLabel("Switch3")
    lastNode.setPosition(4150, 1075)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3"

    # Start of node "Dot38"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot38")
    lastNode.setLabel("Dot38")
    lastNode.setPosition(2136, 2190)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot38 = lastNode

    del lastNode
    # End of node "Dot38"

    # Start of node "PIKg"
    lastNode = app.createNode("net.sf.openfx.PIK", 1, group)
    lastNode.setScriptName("PIKg")
    lastNode.setLabel("PIKg")
    lastNode.setPosition(2968, 861)
    lastNode.setSize(80, 43)
    lastNode.setColor(0, 1, 0.498)
    groupPIKg = lastNode

    param = lastNode.getParam("screenType")
    if param is not None:
        param.set("Pick")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(1, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("alphaBias")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        del param

    del lastNode
    # End of node "PIKg"

    # Start of node "Switch3_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3_2")
    lastNode.setLabel("Switch3_2")
    lastNode.setPosition(2627, 1091)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3_2"

    # Start of node "PIKr"
    lastNode = app.createNode("net.sf.openfx.PIK", 1, group)
    lastNode.setScriptName("PIKr")
    lastNode.setLabel("PIKr")
    lastNode.setPosition(2116, 835)
    lastNode.setSize(80, 43)
    lastNode.setColor(1, 0.3137, 0.3255)
    groupPIKr = lastNode

    param = lastNode.getParam("screenType")
    if param is not None:
        param.set("Pick")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(1, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("alphaBias")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        del param

    del lastNode
    # End of node "PIKr"

    # Start of node "Shuffle4"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle4")
    lastNode.setLabel("Shuffle4")
    lastNode.setPosition(2105, 755)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle4 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle4"

    # Start of node "Shuffle4_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle4_2")
    lastNode.setLabel("Shuffle4_2")
    lastNode.setPosition(2104, 902)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle4_2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle4_2"

    # Start of node "Switch3_2_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3_2_2")
    lastNode.setLabel("Switch3_2_2")
    lastNode.setPosition(1589, 1090)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3_2_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3_2_2"

    # Start of node "bgprocess"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("bgprocess")
    lastNode.setLabel("bgprocess")
    lastNode.setPosition(4690, 1075)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupbgprocess = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "bgprocess"

    # Start of node "Switch6"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch6")
    lastNode.setLabel("Switch6")
    lastNode.setPosition(2627, 2395)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch6 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch6"

    # Start of node "booster"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("booster")
    lastNode.setLabel("booster")
    lastNode.setPosition(4690, 1568)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupbooster = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "booster"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupShuffle2)
    groupDot2.connectInput(0, groupLog2Lin1)
    groupalg_B.connectInput(0, groupMerge5_3_2)
    groupalg_B.connectInput(1, groupMerge5_2_3_2)
    groupalg_B.connectInput(2, groupMerge5_2_2_2_2)
    groupalg_B.connectInput(3, groupPIKb)
    groupalg_G.connectInput(0, groupMerge5)
    groupalg_G.connectInput(1, groupMerge5_2)
    groupalg_G.connectInput(2, groupMerge5_2_2)
    groupalg_G.connectInput(3, groupPIKg)
    groupscreencol.connectInput(0, groupDot34)
    groupscreencol.connectInput(1, groupspillmatteG)
    groupscreencol.connectInput(2, groupDot1)
    groupDot3.connectInput(0, groupDot2)
    groupalg_R.connectInput(0, groupMerge5_3)
    groupalg_R.connectInput(1, groupMerge5_2_3)
    groupalg_R.connectInput(2, groupMerge5_2_2_2)
    groupalg_R.connectInput(3, groupShuffle4_2)
    groupDot4.connectInput(0, groupDot2)
    groupbg_preblur.connectInput(0, groupbgprocess)
    groupConstant1.connectInput(0, groupDot6)
    groupDot6.connectInput(0, groupDot3)
    groupSwitch1.connectInput(1, groupConstant1)
    groupSwitch1.connectInput(2, groupDot31)
    groupShuffle1.connectInput(0, groupbg_preblur)
    groupShuffle1.connectInput(1, groupDot7)
    groupDot7.connectInput(0, groupscreencol)
    groupPremult1.connectInput(0, groupbooster)
    groupMerge1.connectInput(0, groupDot17)
    groupMerge1.connectInput(1, groupDot10)
    groupMerge1_2.connectInput(0, groupDot12)
    groupMerge1_2.connectInput(1, groupDot11)
    groupMerge1_3.connectInput(0, groupDot13)
    groupMerge1_3.connectInput(1, groupDot14)
    groupDot10.connectInput(0, groupPremult1)
    groupDot11.connectInput(0, groupDot17)
    groupDot12.connectInput(0, groupDot10)
    groupDot13.connectInput(0, groupDot11)
    groupDot14.connectInput(0, groupDot12)
    groupSwitch2.connectInput(0, groupMerge1)
    groupSwitch2.connectInput(1, groupMerge1_2)
    groupSwitch2.connectInput(2, groupMerge1_3)
    groupSwitch4.connectInput(0, groupDot18)
    groupSwitch4.connectInput(1, groupDot24)
    groupDot17.connectInput(0, groupDot27)
    groupDot9.connectInput(0, groupDot4)
    groupDot18.connectInput(0, groupDot19)
    groupShuffle2.connectInput(0, groupkeymix)
    groupShuffle2.connectInput(1, groupDot16)
    groupDot16.connectInput(0, groupSwitch4)
    groupDot19.connectInput(0, groupDot25)
    groupkeymix.connectInput(0, groupLog2Lin3)
    groupkeymix.connectInput(1, groupDot21)
    groupkeymix.connectInput(2, groupDot20)
    groupInvert1.connectInput(0, groupMerge2_2)
    groupDot20.connectInput(0, groupInvert1)
    groupDot21.connectInput(0, groupDot19)
    groupConstant2.connectInput(0, groupDot23)
    groupDot22.connectInput(0, groupConstant2)
    groupDot23.connectInput(0, groupDot19)
    groupMerge2_2.connectInput(0, groupmask)
    groupMerge2_2.connectInput(1, groupDot22)
    groupColorCorrect1.connectInput(0, groupSwitch6)
    groupColorCorrect1.connectInput(1, groupDot32)
    groupDot24.connectInput(0, groupDot29)
    groupSaturation1.connectInput(0, groupColorCorrect1)
    groupSaturation1.connectInput(1, groupDot33)
    groupMerge2.connectInput(0, groupDot26)
    groupMerge2.connectInput(1, groupDot25)
    groupDot25.connectInput(0, groupDot9)
    groupDot26.connectInput(0, groupDot28)
    groupDot27.connectInput(0, groupDot7)
    groupSwitch5.connectInput(0, groupDot27)
    groupSwitch5.connectInput(1, groupDot30)
    groupSwitch5.connectInput(2, groupDot38)
    groupDot8.connectInput(0, groupSaturation2)
    groupMerge3.connectInput(0, groupDot28)
    groupMerge3.connectInput(1, groupDot8)
    groupDot28.connectInput(0, groupDot27)
    groupDot29.connectInput(0, groupDot35)
    groupDot15.connectInput(0, groupSwitch2)
    groupDot30.connectInput(0, groupMerge3)
    groupDot31.connectInput(0, groupbg)
    groupSaturation2.connectInput(0, groupMerge2)
    groupLog2Lin1.connectInput(0, groupimg)
    groupLog2Lin2.connectInput(0, groupSwitch1)
    groupLog2Lin3.connectInput(0, groupSaturation1)
    groupDot32.connectInput(0, groupDot24)
    groupDot33.connectInput(0, groupDot32)
    groupRg.connectInput(1, groupDot2)
    groupGg.connectInput(1, groupDot2)
    groupBg.connectInput(1, groupDot2)
    groupMerge4.connectInput(0, groupGrade3)
    groupMerge4.connectInput(1, groupGrade2)
    groupMerge5.connectInput(0, groupGg)
    groupMerge5.connectInput(1, groupMerge4)
    groupMerge6.connectInput(0, groupb_ampG)
    groupMerge6.connectInput(1, groupr_ampG)
    groupMerge5_2.connectInput(0, groupGg)
    groupMerge5_2.connectInput(1, groupMerge6)
    groupMerge6_2.connectInput(0, groupb_ampG)
    groupMerge6_2.connectInput(1, groupr_ampG)
    groupMerge5_2_2.connectInput(0, groupGg)
    groupMerge5_2_2.connectInput(1, groupMerge6_2)
    groupGrade2.connectInput(0, groupr_ampG)
    groupGrade3.connectInput(0, groupb_ampG)
    groupr_ampG.connectInput(0, groupRg)
    groupb_ampG.connectInput(0, groupBg)
    groupinsertG.connectInput(0, groupalg_G)
    groupinsertG.connectInput(1, groupDot2)
    groupMerge7.connectInput(0, groupalg_G)
    groupMerge7.connectInput(1, groupDot2)
    groupspillmatteG.connectInput(0, groupMerge7)
    groupspillmatteG.connectInput(1, groupSwitch3_2)
    groupRr.connectInput(1, groupDot4)
    groupGr.connectInput(1, groupDot4)
    groupBr.connectInput(1, groupDot4)
    groupMerge4_2.connectInput(0, groupGrade3_2)
    groupMerge4_2.connectInput(1, groupGrade2_2)
    groupMerge5_3.connectInput(0, groupRr)
    groupMerge5_3.connectInput(1, groupMerge4_2)
    groupMerge6_3.connectInput(0, groupb_ampR)
    groupMerge6_3.connectInput(1, groupg_ampR)
    groupMerge5_2_3.connectInput(0, groupRr)
    groupMerge5_2_3.connectInput(1, groupMerge6_3)
    groupMerge6_2_2.connectInput(0, groupb_ampR)
    groupMerge6_2_2.connectInput(1, groupg_ampR)
    groupMerge5_2_2_2.connectInput(0, groupRr)
    groupMerge5_2_2_2.connectInput(1, groupMerge6_2_2)
    groupGrade2_2.connectInput(0, groupg_ampR)
    groupGrade3_2.connectInput(0, groupb_ampR)
    groupg_ampR.connectInput(0, groupGr)
    groupb_ampR.connectInput(0, groupBr)
    groupinsertR.connectInput(0, groupalg_R)
    groupinsertR.connectInput(1, groupDot4)
    groupMerge7_2.connectInput(0, groupalg_R)
    groupMerge7_2.connectInput(1, groupDot4)
    groupspillmatteR.connectInput(0, groupMerge7_2)
    groupspillmatteR.connectInput(1, groupSwitch3_2_2)
    groupDot34.connectInput(0, groupspillmatteR)
    groupRb.connectInput(1, groupDot3)
    groupGb.connectInput(1, groupDot3)
    groupBb.connectInput(1, groupDot3)
    groupMerge4_2_2.connectInput(0, groupGrade3_2_2)
    groupMerge4_2_2.connectInput(1, groupGrade2_2_2)
    groupMerge5_3_2.connectInput(0, groupBb)
    groupMerge5_3_2.connectInput(1, groupMerge4_2_2)
    groupMerge6_3_2.connectInput(0, groupg_ampB)
    groupMerge6_3_2.connectInput(1, groupr_ampB)
    groupMerge5_2_3_2.connectInput(0, groupBb)
    groupMerge5_2_3_2.connectInput(1, groupMerge6_3_2)
    groupMerge6_2_2_2.connectInput(0, groupg_ampB)
    groupMerge6_2_2_2.connectInput(1, groupr_ampB)
    groupMerge5_2_2_2_2.connectInput(0, groupBb)
    groupMerge5_2_2_2_2.connectInput(1, groupMerge6_2_2_2)
    groupGrade2_2_2.connectInput(0, groupr_ampB)
    groupGrade3_2_2.connectInput(0, groupg_ampB)
    groupg_ampB.connectInput(0, groupGb)
    groupinsertB.connectInput(0, groupalg_B)
    groupinsertB.connectInput(1, groupDot3)
    groupMerge7_2_2.connectInput(0, groupalg_B)
    groupMerge7_2_2.connectInput(1, groupDot3)
    groupspillmatteB.connectInput(0, groupMerge7_2_2)
    groupspillmatteB.connectInput(1, groupSwitch3)
    groupr_ampB.connectInput(0, groupRb)
    groupDot1.connectInput(0, groupspillmatteB)
    groupShuffle3.connectInput(1, groupDot35)
    groupDot35.connectInput(0, groupDot36)
    groupMerge8.connectInput(0, groupDot36)
    groupMerge8.connectInput(1, groupDot37)
    groupDot36.connectInput(0, groupDot26)
    groupDot37.connectInput(0, groupShuffle3)
    groupPIKb.connectInput(0, groupDot3)
    groupSwitch3.connectInput(0, groupinsertB)
    groupSwitch3.connectInput(1, groupPIKb)
    groupDot38.connectInput(0, groupMerge8)
    groupPIKg.connectInput(0, groupDot2)
    groupSwitch3_2.connectInput(0, groupinsertG)
    groupSwitch3_2.connectInput(1, groupPIKg)
    groupPIKr.connectInput(0, groupShuffle4)
    groupShuffle4.connectInput(1, groupDot4)
    groupShuffle4_2.connectInput(1, groupPIKr)
    groupSwitch3_2_2.connectInput(0, groupinsertR)
    groupSwitch3_2_2.connectInput(1, groupShuffle4_2)
    groupbgprocess.connectInput(0, groupLog2Lin2)
    groupSwitch6.connectInput(0, groupSwitch5)
    groupSwitch6.connectInput(1, groupSwitch2)
    groupSwitch6.connectInput(2, groupDot15)
    groupbooster.connectInput(0, groupShuffle1)

    param = groupalg_B.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupalg_G.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupscreencol.getParam("which")
    param.setExpression("thisGroup.screentype.get()", False, 0)
    del param
    param = groupalg_R.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupbg_preblur.getParam("size")
    param.setExpression("thisGroup.preblur.get()", False, 0)
    param.setExpression("thisGroup.preblur.get()", False, 1)
    del param
    param = groupbg_preblur.getParam("disableNode")
    param.setExpression("if thisGroup.replacement.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupConstant1.getParam("color")
    param.setExpression("thisGroup.colour.get()[0]", False, 0)
    param.setExpression("thisGroup.colour.get()[1]", False, 1)
    param.setExpression("thisGroup.colour.get()[2]", False, 2)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.replacement.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.addapply.get()", False, 0)
    del param
    param = groupSwitch4.getParam("which")
    param.setExpression("thisGroup.spillmatte.get()", False, 0)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupColorCorrect1.getParam("MasterGamma")
    group.getParam("ColorCorrect1MasterGamma").setAsAlias(param)
    del param
    param = groupColorCorrect1.getParam("MasterGain")
    group.getParam("ColorCorrect1MasterGain").setAsAlias(param)
    del param
    param = groupSaturation1.getParam("saturation")
    param.setExpression("thisGroup.satcr.get()+1", False, 0)
    del param
    param = groupSwitch5.getParam("which")
    param.setExpression("thisGroup.method.get()", False, 0)
    del param
    param = groupLog2Lin1.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin2.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin3.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupGrade2.getParam("multiply")
    param.setExpression("1-thisGroup.rto.get()", False, 0)
    param.setExpression("1-thisGroup.rto.get()", False, 1)
    param.setExpression("1-thisGroup.rto.get()", False, 2)
    param.setExpression("1-thisGroup.rto.get()", False, 3)
    del param
    param = groupGrade3.getParam("multiply")
    param.setExpression("thisGroup.rto.get()", False, 0)
    param.setExpression("thisGroup.rto.get()", False, 1)
    param.setExpression("thisGroup.rto.get()", False, 2)
    param.setExpression("thisGroup.rto.get()", False, 3)
    del param
    param = groupr_ampG.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupb_ampG.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupGrade2_2.getParam("multiply")
    param.setExpression("1-thisGroup.rto.get()", False, 0)
    param.setExpression("1-thisGroup.rto.get()", False, 1)
    param.setExpression("1-thisGroup.rto.get()", False, 2)
    param.setExpression("1-thisGroup.rto.get()", False, 3)
    del param
    param = groupGrade3_2.getParam("multiply")
    param.setExpression("thisGroup.rto.get()", False, 0)
    param.setExpression("thisGroup.rto.get()", False, 1)
    param.setExpression("thisGroup.rto.get()", False, 2)
    param.setExpression("thisGroup.rto.get()", False, 3)
    del param
    param = groupg_ampR.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupb_ampR.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupGrade2_2_2.getParam("multiply")
    param.setExpression("1-thisGr_2oup.rto.get()", False, 0)
    param.setExpression("1-thisGr_2oup.rto.get()", False, 1)
    param.setExpression("1-thisGr_2oup.rto.get()", False, 2)
    param.setExpression("1-thisGr_2oup.rto.get()", False, 3)
    del param
    param = groupGrade3_2_2.getParam("multiply")
    param.setExpression("thisGr_2oup.rto.get()", False, 0)
    param.setExpression("thisGr_2oup.rto.get()", False, 1)
    param.setExpression("thisGr_2oup.rto.get()", False, 2)
    param.setExpression("thisGr_2oup.rto.get()", False, 3)
    del param
    param = groupg_ampB.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupr_ampB.getParam("multiply")
    param.setExpression("thisGroup.channelamp.get()", False, 0)
    param.setExpression("thisGroup.channelamp.get()", False, 1)
    param.setExpression("thisGroup.channelamp.get()", False, 2)
    param.setExpression("thisGroup.channelamp.get()", False, 3)
    del param
    param = groupPIKb.getParam("color")
    param.setExpression("0 + thisGroup.colouroffset.get()[0]", False, 0)
    param.setExpression("0 + thisGroup.colouroffset.get()[1]", False, 1)
    param.setExpression("1 + thisGroup.colouroffset.get()[2]", False, 2)
    del param
    param = groupPIKb.getParam("alphaBias")
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 0)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 1)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 2)
    del param
    param = groupSwitch3.getParam("which")
    param.setExpression("if thisGroup.despillalg.get() == 3:\n\tret = 1\nelse:\n\tret = 0", True, 0)
    del param
    param = groupPIKg.getParam("color")
    param.setExpression("0 + thisGroup.colouroffset.get()[0]", False, 0)
    param.setExpression("1 + thisGroup.colouroffset.get()[1]", False, 1)
    param.setExpression("0 + thisGroup.colouroffset.get()[2]", False, 2)
    del param
    param = groupPIKg.getParam("alphaBias")
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 0)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 1)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 2)
    del param
    param = groupSwitch3_2.getParam("which")
    param.setExpression("if thisGroup.despillalg.get() == 3:\n\tret = 1\nelse:\n\tret = 0", True, 0)
    del param
    param = groupPIKr.getParam("color")
    param.setExpression("0 + thisGroup.colouroffset.get()[1]", False, 0)
    param.setExpression("1 + thisGroup.colouroffset.get()[0]", False, 1)
    param.setExpression("0 + thisGroup.colouroffset.get()[2]", False, 2)
    del param
    param = groupPIKr.getParam("alphaBias")
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 0)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 1)
    param.setExpression("thisGroup.pikbias.get()[dimension]", False, 2)
    del param
    param = groupSwitch3_2_2.getParam("which")
    param.setExpression("if thisGroup.despillalg.get() == 3:\n\tret = 1\nelse:\n\tret = 0", True, 0)
    del param
    param = groupbgprocess.getParam("blackPoint")
    param.setExpression("thisGroup.bgblk.get()[dimension]", False, 0)
    param.setExpression("thisGroup.bgblk.get()[dimension]", False, 1)
    param.setExpression("thisGroup.bgblk.get()[dimension]", False, 2)
    param.setExpression("thisGroup.bgblk.get()[dimension]", False, 3)
    del param
    param = groupbgprocess.getParam("whitePoint")
    param.setExpression("thisGroup.bgwht.get()[dimension]", False, 0)
    param.setExpression("thisGroup.bgwht.get()[dimension]", False, 1)
    param.setExpression("thisGroup.bgwht.get()[dimension]", False, 2)
    param.setExpression("thisGroup.bgwht.get()[dimension]", False, 3)
    del param
    param = groupSwitch6.getParam("which")
    param.setExpression("thisGroup.replacement.get()", False, 0)
    del param
    param = groupbooster.getParam("whitePoint")
    param.setExpression("if thisGroup.spillmatteboost.get() > 0.9999:\n\tret = \t0.001\nelse:\n\tret = 1 - thisGroup.spillmatteboost.get()", True, 0)
    param.setExpression("if thisGroup.spillmatteboost.get() > 0.9999:\n\tret = \t0.001\nelse:\n\tret = 1 - thisGroup.spillmatteboost.get()", True, 1)
    param.setExpression("if thisGroup.spillmatteboost.get() > 0.9999:\n\tret = \t0.001\nelse:\n\tret = 1 - thisGroup.spillmatteboost.get()", True, 2)
    param.setExpression("if thisGroup.spillmatteboost.get() > 0.9999:\n\tret = \t0.001\nelse:\n\tret = 1 - thisGroup.spillmatteboost.get()", True, 3)
    del param

    try:
        extModule = sys.modules["lp_ChillSpillExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
