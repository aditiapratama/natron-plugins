# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_CleanScreenExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_CleanScreenExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_CleanScreen"

def getLabel():
    return "lp_CleanScreen"

def getVersion():
    return 2

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "CleanScreen helps you to even out chroma-background (R, G or B) with the help of a cleanplate.\n\nHOW TO USE IT\nJust connect your shot and the cleanplate, pick the screen colour and watch it automagically clean your screen :)\nNote that while you can hook up generated cleanplates, it usually makes more sense to use the real thing.\n\n\nHOW DOES IT WORK\nThe colour-picker for the screen colour calculates which kinda screen (red, green or blue) needs to be used for the operation.\nFor both, the shot and the cleanplate, a basic colour-difference key is applied and divided from one another. The difference of a constant (in the same colour as the selected screen colour) with the cleanplate is then multiplied with that result, and finally subtracted from the original plate."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.4196, 0.8667, 0)

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createColorParam("screencolor", "screen colour", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("best is to pick an area close to the object you are trying to key. if the screen is very uneven, try to pick the biggest uniform area")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.screencolor = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("invert the connected mask")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("credit", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_CleanScreen v2.0\n(c) by lucas pfaff\ninspired by pxf_ScreenClean (Xavier Bourque) and the general hatred for the Plugin-Culture of After Effects (looking at you, Screen Equalizer)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.credit = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1519, 2323)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(1519, 98)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2275, 464)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2101, 464)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2446, 464)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2796, 1130)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("divide")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Clamp1"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp1")
    lastNode.setLabel("Clamp1")
    lastNode.setPosition(2796, 1254)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp1"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MergeMultiply", 1, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(2796, 1479)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMultiply1 = lastNode

    del lastNode
    # End of node "Multiply1"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(1519, 1753)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("from")
        del param

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1564, 258)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1564, 1560)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(3416, 506)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(3241, 506)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(3588, 506)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(3797, 1052)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("from")
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3842, 506)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(4058, 749)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.1, 0)
        param.setValue(0.5, 1)
        param.setValue(0.1, 2)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(4103, 506)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(4103, 1072)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(3842, 1499)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1519, 2010)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("OutputChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(809, 1859)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(854, 2030)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "cleanplate"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("cleanplate")
    lastNode.setLabel("cleanplate")
    lastNode.setPosition(3196, 155)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupcleanplate = lastNode

    del lastNode
    # End of node "cleanplate"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(809, 1352)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "screen_type"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 2, group)
    lastNode.setScriptName("screen_type")
    lastNode.setLabel("screen_type")
    lastNode.setPosition(2832, 635)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupscreen_type = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param


    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createDoubleParam("screen_type", "screen_type")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.screen_type = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Controls', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "screen_type"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(2841, 1773)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(1287, 1560)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(809, 1743)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    del lastNode
    # End of node "Merge5"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(1068, 1644)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    del lastNode
    # End of node "Constant2"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(3588, 1008)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2841, 1008)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(2446, 1150)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(1113, 1763)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(1113, 1560)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2105, 258)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(2060, 349)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Blur2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur2")
    lastNode.setLabel("Blur2")
    lastNode.setPosition(3196, 370)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur2"

    # Start of node "mathG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathG")
    lastNode.setLabel("mathG")
    lastNode.setPosition(2242, 596)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathG = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    del lastNode
    # End of node "mathG"

    # Start of node "mathB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathB")
    lastNode.setLabel("mathB")
    lastNode.setPosition(2413, 597)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathB = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    del lastNode
    # End of node "mathB"

    # Start of node "mathR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathR")
    lastNode.setLabel("mathR")
    lastNode.setPosition(2068, 598)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathR = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    del lastNode
    # End of node "mathR"

    # Start of node "colourSwitch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("colourSwitch")
    lastNode.setLabel("colourSwitch")
    lastNode.setPosition(2401, 812)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupcolourSwitch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "colourSwitch"

    # Start of node "mathG_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathG_2")
    lastNode.setLabel("mathG_2")
    lastNode.setPosition(3383, 624)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathG_2 = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("g-max(r,b)")
        del param

    del lastNode
    # End of node "mathG_2"

    # Start of node "mathB_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathB_2")
    lastNode.setLabel("mathB_2")
    lastNode.setPosition(3555, 625)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathB_2 = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b-max(r,g)")
        del param

    del lastNode
    # End of node "mathB_2"

    # Start of node "mathR_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("mathR_2")
    lastNode.setLabel("mathR_2")
    lastNode.setPosition(3208, 626)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmathR_2 = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("r-max(g,b)")
        del param

    del lastNode
    # End of node "mathR_2"

    # Start of node "colourSwitch_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("colourSwitch_2")
    lastNode.setLabel("colourSwitch_2")
    lastNode.setPosition(3543, 840)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupcolourSwitch_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "colourSwitch_2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge3)
    groupDot1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupBlur1)
    groupDot3.connectInput(0, groupDot1)
    groupMerge2.connectInput(0, groupDot15)
    groupMerge2.connectInput(1, groupDot16)
    groupClamp1.connectInput(0, groupMerge2)
    groupMultiply1.connectInput(0, groupClamp1)
    groupMultiply1.connectInput(1, groupDot9)
    groupMerge4.connectInput(0, groupDot5)
    groupMerge4.connectInput(1, groupDot12)
    groupDot4.connectInput(0, groupimg)
    groupDot5.connectInput(0, groupDot4)
    groupDot1_2.connectInput(0, groupDot2_2)
    groupDot2_2.connectInput(0, groupBlur2)
    groupDot3_2.connectInput(0, groupDot1_2)
    groupMerge1_2.connectInput(0, groupDot6)
    groupMerge1_2.connectInput(1, groupDot8)
    groupDot6.connectInput(0, groupDot3_2)
    groupConstant1.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupDot6)
    groupDot8.connectInput(0, groupConstant1)
    groupDot9.connectInput(0, groupMerge1_2)
    groupMerge3.connectInput(0, groupMerge4)
    groupMerge3.connectInput(1, groupDot13)
    groupMerge3.connectInput(2, groupDot10)
    groupInvert1.connectInput(0, groupMerge5)
    groupDot10.connectInput(0, groupInvert1)
    groupDot12.connectInput(0, groupMultiply1)
    groupDot13.connectInput(0, groupDot5)
    groupMerge5.connectInput(0, groupmask)
    groupMerge5.connectInput(1, groupDot11)
    groupConstant2.connectInput(0, groupDot18)
    groupDot14.connectInput(0, groupcolourSwitch_2)
    groupDot15.connectInput(0, groupDot14)
    groupDot16.connectInput(0, groupcolourSwitch)
    groupDot11.connectInput(0, groupConstant2)
    groupDot18.connectInput(0, groupDot13)
    groupDot19.connectInput(0, groupDot4)
    groupBlur1.connectInput(0, groupDot19)
    groupBlur2.connectInput(0, groupcleanplate)
    groupmathG.connectInput(0, groupDot1)
    groupmathB.connectInput(0, groupDot3)
    groupmathR.connectInput(0, groupDot2)
    groupcolourSwitch.connectInput(0, groupmathR)
    groupcolourSwitch.connectInput(1, groupmathG)
    groupcolourSwitch.connectInput(2, groupmathB)
    groupmathG_2.connectInput(0, groupDot1_2)
    groupmathB_2.connectInput(0, groupDot3_2)
    groupmathR_2.connectInput(0, groupDot2_2)
    groupcolourSwitch_2.connectInput(0, groupmathR_2)
    groupcolourSwitch_2.connectInput(1, groupmathG_2)
    groupcolourSwitch_2.connectInput(2, groupmathB_2)

    param = groupConstant1.getParam("color")
    param.setExpression("thisGroup.screencolor.get()[0]", False, 0)
    param.setExpression("thisGroup.screencolor.get()[1]", False, 1)
    param.setExpression("thisGroup.screencolor.get()[2]", False, 2)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupscreen_type.getParam("screen_type")
    param.setExpression("red = thisGroup.screencolor.get()[0]\ngreen = thisGroup.screencolor.get()[1]\nblue = thisGroup.screencolor.get()[2]\n\nif red > ((green+blue)/2):\n\tret = 0\nelif green > ((red+blue)/2):\n\tret = 1\nelse:\n\tret = 2", True, 0)
    del param
    param = groupcolourSwitch.getParam("which")
    param.setExpression("thisGroup.screen_type.screen_type.get()", False, 0)
    del param
    param = groupcolourSwitch_2.getParam("which")
    param.setExpression("thisGroup.screen_type.screen_type.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_CleanScreenExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
