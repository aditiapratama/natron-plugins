# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_DespillExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_DespillExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_Despill"

def getLabel():
    return "lp_Despill"

def getVersion():
    return 0

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "Advanced, yet easy-to-use despiller for everyday-use."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("screentype", "screen type")
    entries = [ ("red", ""),
    ("green", ""),
    ("blue", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("green")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Select you screen colour.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.screentype = param
    del param

    param = lastNode.createChoiceParam("despillalg", "algorithm")
    entries = [ ("avg", ""),
    ("max", ""),
    ("min", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Select the used algorithm. Average usually works best, but Max can sometimes counter tints. Never was Min useful for despilling, but can be handy for other uses.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.despillalg = param
    del param

    param = lastNode.createChoiceParam("linlog", "process in")
    entries = [ ("log", ""),
    ("lin", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("lin")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Process all operations in lin or log.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.linlog = param
    del param

    param = lastNode.createDoubleParam("rto", "average weight")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Adjusts the weight for Average-Algorithm to lean it towards one colour channel.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rto = param
    del param

    param = lastNode.createBooleanParam("bypassweight", "bypass")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Bypasses the weighting operation, should lead to increased speed.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.bypassweight = param
    del param

    param = lastNode.createChoiceParam("colourreplacement", "colour replacement")
    entries = [ ("auto", ""),
    ("color", ""),
    ("background", ""),
    ("luma restore", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Auto is the pure result of the ongoing algorithm. Colour applies explains itself :) Background tries to apply your connected bg-image, which can help with details. Luma Restore tries re-introduce the original luma-values of the chromascreen, usually ends up white/grey (but therefore bright)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colourreplacement = param
    del param

    param = lastNode.createChoiceParam("addapply", "apply color/bg with")
    entries = [ ("over", ""),
    ("add", ""),
    ("screen", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Applies the Colour or Background-replacements with the chosen operation.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.addapply = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createColorParam("colour", "colour", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.8, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.3, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the colour for the replacement-method.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colour = param
    del param

    param = lastNode.createColorParam("ColorCorrect1MasterGain", "gain correct", True)
    param.setDisplayMinimum(-2, 0)
    param.setDisplayMaximum(2, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(-2, 1)
    param.setDisplayMaximum(2, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(-2, 2)
    param.setDisplayMaximum(2, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(-2, 3)
    param.setDisplayMaximum(2, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("adjusts the despilled area")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ColorCorrect1MasterGain = param
    del param

    param = lastNode.createColorParam("ColorCorrect1MasterGamma", "gamma correct", True)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("adjusts the despilled area")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ColorCorrect1MasterGamma = param
    del param

    param = lastNode.createDoubleParam("satcr", "saturation correct")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-2, 0)
    param.setDisplayMaximum(2, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.satcr = param
    del param

    param = lastNode.createDoubleParam("preblur", "background pre-blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(15, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Pre-blur the connected bg-image. Stronly suggested to not set this to 0.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.preblur = param
    del param

    param = lastNode.createSeparatorParam("sep02", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createBooleanParam("spillmatte", "shuffle spillmatte to alpha")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Shuffles the spillmatte to the Alpha Channel, to be used in further adjustments.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.spillmatte = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Invert the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_Despill 1.0\n(c) 2016 by lucas pfaff\ninspired by bm_Despill (Ben McEwan)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Settings', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(2605, 4962)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(2627, -683)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "SeExprSimple_minB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_minB")
    lastNode.setLabel("SeExprSimple_minB")
    lastNode.setPosition(3817, 619)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_minB = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > min(r,g) ? min(r,g) : b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("b - (b > min(r,g) ? min(r,g) : b)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_minB"

    # Start of node "SeExprSimple_maxB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_maxB")
    lastNode.setLabel("SeExprSimple_maxB")
    lastNode.setPosition(3507, 637)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_maxB = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice3")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > max(r,g) ? max(r,g) : b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("b - (b > max(r,g) ? max(r,g) : b)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_maxB"

    # Start of node "SeExprSimple_avgB"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgB")
    lastNode.setLabel("SeExprSimple_avgB")
    lastNode.setPosition(3122, 630)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgB = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("doubleParamsNb")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > (g*x1)+(r*(1-x1)) ? (g*x1)+(r*(1-x1)) : b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("b - (b > (g*x1)+(r*(1-x1)) ? (g*x1)+(r*(1-x1)) : b)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgB"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(3540, 405)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "SeExprSimple_minG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_minG")
    lastNode.setLabel("SeExprSimple_minG")
    lastNode.setPosition(2920, 611)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_minG = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice3")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > min(r,b) ? min(r,b) : g")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("g - (g > min(r,b) ? min(r,b) : g)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_minG"

    # Start of node "SeExprSimple_maxG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_maxG")
    lastNode.setLabel("SeExprSimple_maxG")
    lastNode.setPosition(2639, 625)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_maxG = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice3")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > max(r,b) ? max(r,b) : g")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("g - (g > max(r,b) ? max(r,b) : g)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_maxG"

    # Start of node "SeExprSimple_avgG"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgG")
    lastNode.setLabel("SeExprSimple_avgG")
    lastNode.setPosition(2236, 634)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgG = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("doubleParamsNb")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > (b*x1)+(r*(1-x1)) ? (b*x1)+(r*(1-x1)) : g")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("g - (g > (b*x1)+(r*(1-x1)) ? (b*x1)+(r*(1-x1)) : g)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgG"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(2672, 419)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2672, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "alg_B"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_B")
    lastNode.setLabel("alg_B")
    lastNode.setPosition(3495, 857)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_B = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_B"

    # Start of node "alg_G"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_G")
    lastNode.setLabel("alg_G")
    lastNode.setPosition(2627, 859)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_G = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_G"

    # Start of node "screencol"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("screencol")
    lastNode.setLabel("screencol")
    lastNode.setPosition(2627, 1222)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupscreencol = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "screencol"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(3540, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "SeExprSimple_minR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_minR")
    lastNode.setLabel("SeExprSimple_minR")
    lastNode.setPosition(2004, 592)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_minR = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice3")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > min(g,b) ? min(g,b) : r")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("r - (r > min(g,b) ? min(g,b) : r)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_minR"

    # Start of node "SeExprSimple_maxR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_maxR")
    lastNode.setLabel("SeExprSimple_maxR")
    lastNode.setPosition(1707, 607)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_maxR = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice3")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > max(g,b) ? max(g,b) : r")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("r - (r > max(g,b) ? max(g,b) : r)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_maxR"

    # Start of node "SeExprSimple_avgR"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgR")
    lastNode.setLabel("SeExprSimple_avgR")
    lastNode.setPosition(1302, 605)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgR = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("doubleParamsNb")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > (b*x1)+(g*(1-x1)) ? (b*x1)+(g*(1-x1)) : r")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("r - (r > (b*x1)+(g*(1-x1)) ? (b*x1)+(g*(1-x1)) : r)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgR"

    # Start of node "Dot1_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2")
    lastNode.setLabel("Dot1_2_2")
    lastNode.setPosition(1756, 401)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2"

    # Start of node "alg_R"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("alg_R")
    lastNode.setLabel("alg_R")
    lastNode.setPosition(1683, 832)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupalg_R = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "alg_R"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1756, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("bg")
    lastNode.setPosition(5021, -185)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupbg = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "bg"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(5021, 365)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(5066, 129)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(4690, 384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.8, 0)
        param.setValue(0.3, 1)
        param.setValue(0.5, 2)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(4735, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(4690, 575)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(4690, 1417)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2672, 1431)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(4690, 1623)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2871, 1853)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(3095, 2050)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(3324, 2230)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(4735, 1879)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(3138, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(4735, 2076)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(3369, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(4735, 2262)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(2871, 2239)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Switch4"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch4")
    lastNode.setLabel("Switch4")
    lastNode.setPosition(1807, 4041)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch4 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch4"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(2916, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(1143, 237)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(1143, 4055)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(2605, 4279)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(1852, 4293)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(1143, 3341)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "keymix"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("keymix")
    lastNode.setLabel("keymix")
    lastNode.setPosition(2605, 3817)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupkeymix = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("matte")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("matte")
        del param

    del lastNode
    # End of node "keymix"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(452, 3731)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(452, 3246)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(1511, 3829)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(497, 3843)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(1556, 3341)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(807, 3447)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    del lastNode
    # End of node "Constant2"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(852, 3584)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(852, 3341)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Merge2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_2")
    lastNode.setLabel("Merge2_2")
    lastNode.setPosition(452, 3558)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_2 = lastNode

    del lastNode
    # End of node "Merge2_2"

    # Start of node "ColorCorrect1"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1")
    lastNode.setLabel("ColorCorrect1")
    lastNode.setPosition(2605, 2806)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1 = lastNode

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1"

    # Start of node "Dot24"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot24")
    lastNode.setLabel("Dot24")
    lastNode.setPosition(1852, 2825)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot24 = lastNode

    del lastNode
    # End of node "Dot24"

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(2605, 2990)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Average")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2146, 1883)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("minus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("minus")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(1143, 1909)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Dot26"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot26")
    lastNode.setLabel("Dot26")
    lastNode.setPosition(2191, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot26 = lastNode

    del lastNode
    # End of node "Dot26"

    # Start of node "Dot27"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot27")
    lastNode.setLabel("Dot27")
    lastNode.setPosition(2672, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot27 = lastNode

    del lastNode
    # End of node "Dot27"

    # Start of node "Switch5"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch5")
    lastNode.setLabel("Switch5")
    lastNode.setPosition(2605, 2437)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch5 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch5"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(2191, 2244)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2393, 2218)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot28"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot28")
    lastNode.setLabel("Dot28")
    lastNode.setPosition(2438, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot28 = lastNode

    del lastNode
    # End of node "Dot28"

    # Start of node "Dot29"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot29")
    lastNode.setLabel("Dot29")
    lastNode.setPosition(1852, 1727)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot29 = lastNode

    del lastNode
    # End of node "Dot29"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(2916, 2451)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot30"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot30")
    lastNode.setLabel("Dot30")
    lastNode.setPosition(2438, 2451)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot30 = lastNode

    del lastNode
    # End of node "Dot30"

    # Start of node "Dot31"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot31")
    lastNode.setLabel("Dot31")
    lastNode.setPosition(5066, 589)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot31 = lastNode

    del lastNode
    # End of node "Dot31"

    # Start of node "Saturation2"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation2")
    lastNode.setLabel("Saturation2")
    lastNode.setPosition(2146, 2081)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation2 = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Max")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation2"

    # Start of node "Log2Lin1"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1")
    lastNode.setLabel("Log2Lin1")
    lastNode.setPosition(2639, -91)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1"

    # Start of node "Log2Lin2"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin2")
    lastNode.setLabel("Log2Lin2")
    lastNode.setPosition(4702, 797)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin2"

    # Start of node "Log2Lin3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin3")
    lastNode.setLabel("Log2Lin3")
    lastNode.setPosition(2617, 4539)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin3 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin3"

    # Start of node "SeExprSimple_avgG_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgG_2")
    lastNode.setLabel("SeExprSimple_avgG_2")
    lastNode.setPosition(2437, 640)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgG_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > (r+b)/2 ? (r+b)/2 : g")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("g - (g > (r+b)/2 ? (r+b)/2 : g)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgG_2"

    # Start of node "SeExprSimple_avgR_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgR_2")
    lastNode.setLabel("SeExprSimple_avgR_2")
    lastNode.setPosition(1512, 600)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgR_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > (g+b)/2 ? (g+b)/2 : r")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("r - (r > (g+b)/2 ? (g+b)/2 : r)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgR_2"

    # Start of node "SeExprSimple_avgB_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_avgB_2")
    lastNode.setLabel("SeExprSimple_avgB_2")
    lastNode.setPosition(3316, 638)
    lastNode.setSize(80, 66)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_avgB_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("layerInputChoice2")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > (r+g)/2 ? (r+g)/2 : b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("b - (b > (r+g)/2 ? (r+g)/2 : b)")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_avgB_2"

    # Start of node "bypass_B"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("bypass_B")
    lastNode.setLabel("bypass_B")
    lastNode.setPosition(3204, 753)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupbypass_B = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "bypass_B"

    # Start of node "bypass_G"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("bypass_G")
    lastNode.setLabel("bypass_G")
    lastNode.setPosition(2324, 774)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupbypass_G = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "bypass_G"

    # Start of node "bypass_R"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("bypass_R")
    lastNode.setLabel("bypass_R")
    lastNode.setPosition(1388, 733)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupbypass_R = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "bypass_R"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupLog2Lin3)
    groupSeExprSimple_minB.connectInput(0, groupDot1)
    groupSeExprSimple_maxB.connectInput(0, groupDot1)
    groupSeExprSimple_avgB.connectInput(0, groupDot1)
    groupDot1.connectInput(0, groupDot3)
    groupSeExprSimple_minG.connectInput(0, groupDot1_2)
    groupSeExprSimple_maxG.connectInput(0, groupDot1_2)
    groupSeExprSimple_avgG.connectInput(0, groupDot1_2)
    groupDot1_2.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupLog2Lin1)
    groupalg_B.connectInput(0, groupbypass_B)
    groupalg_B.connectInput(1, groupSeExprSimple_maxB)
    groupalg_B.connectInput(2, groupSeExprSimple_minB)
    groupalg_G.connectInput(0, groupbypass_G)
    groupalg_G.connectInput(1, groupSeExprSimple_maxG)
    groupalg_G.connectInput(2, groupSeExprSimple_minG)
    groupscreencol.connectInput(0, groupalg_R)
    groupscreencol.connectInput(1, groupalg_G)
    groupscreencol.connectInput(2, groupalg_B)
    groupDot3.connectInput(0, groupDot2)
    groupSeExprSimple_minR.connectInput(0, groupDot1_2_2)
    groupSeExprSimple_maxR.connectInput(0, groupDot1_2_2)
    groupSeExprSimple_avgR.connectInput(0, groupDot1_2_2)
    groupDot1_2_2.connectInput(0, groupDot4)
    groupalg_R.connectInput(0, groupbypass_R)
    groupalg_R.connectInput(1, groupSeExprSimple_maxR)
    groupalg_R.connectInput(2, groupSeExprSimple_minR)
    groupDot4.connectInput(0, groupDot2)
    groupBlur1.connectInput(0, groupDot5)
    groupDot5.connectInput(0, groupbg)
    groupConstant1.connectInput(0, groupDot6)
    groupDot6.connectInput(0, groupDot3)
    groupSwitch1.connectInput(1, groupConstant1)
    groupSwitch1.connectInput(2, groupDot31)
    groupShuffle1.connectInput(0, groupLog2Lin2)
    groupShuffle1.connectInput(1, groupDot7)
    groupDot7.connectInput(0, groupscreencol)
    groupPremult1.connectInput(0, groupShuffle1)
    groupMerge1.connectInput(0, groupDot17)
    groupMerge1.connectInput(1, groupDot10)
    groupMerge1_2.connectInput(0, groupDot12)
    groupMerge1_2.connectInput(1, groupDot11)
    groupMerge1_3.connectInput(0, groupDot13)
    groupMerge1_3.connectInput(1, groupDot14)
    groupDot10.connectInput(0, groupPremult1)
    groupDot11.connectInput(0, groupDot17)
    groupDot12.connectInput(0, groupDot10)
    groupDot13.connectInput(0, groupDot11)
    groupDot14.connectInput(0, groupDot12)
    groupSwitch2.connectInput(0, groupMerge1)
    groupSwitch2.connectInput(1, groupMerge1_2)
    groupSwitch2.connectInput(2, groupMerge1_3)
    groupSwitch4.connectInput(0, groupDot18)
    groupSwitch4.connectInput(1, groupDot24)
    groupDot17.connectInput(0, groupDot27)
    groupDot9.connectInput(0, groupDot4)
    groupDot18.connectInput(0, groupDot19)
    groupShuffle2.connectInput(0, groupkeymix)
    groupShuffle2.connectInput(1, groupDot16)
    groupDot16.connectInput(0, groupSwitch4)
    groupDot19.connectInput(0, groupDot25)
    groupkeymix.connectInput(0, groupSaturation1)
    groupkeymix.connectInput(1, groupShuffle3)
    groupInvert1.connectInput(0, groupMerge2_2)
    groupShuffle3.connectInput(0, groupDot21)
    groupShuffle3.connectInput(1, groupDot20)
    groupDot20.connectInput(0, groupInvert1)
    groupDot21.connectInput(0, groupDot19)
    groupConstant2.connectInput(0, groupDot23)
    groupDot22.connectInput(0, groupConstant2)
    groupDot23.connectInput(0, groupDot19)
    groupMerge2_2.connectInput(0, groupmask)
    groupMerge2_2.connectInput(1, groupDot22)
    groupColorCorrect1.connectInput(0, groupSwitch5)
    groupColorCorrect1.connectInput(1, groupDot24)
    groupDot24.connectInput(0, groupDot29)
    groupSaturation1.connectInput(0, groupColorCorrect1)
    groupSaturation1.connectInput(1, groupDot24)
    groupMerge2.connectInput(0, groupDot26)
    groupMerge2.connectInput(1, groupDot25)
    groupDot25.connectInput(0, groupDot9)
    groupDot26.connectInput(0, groupDot28)
    groupDot27.connectInput(0, groupDot7)
    groupSwitch5.connectInput(0, groupDot27)
    groupSwitch5.connectInput(1, groupDot15)
    groupSwitch5.connectInput(2, groupSwitch2)
    groupSwitch5.connectInput(3, groupDot30)
    groupDot8.connectInput(0, groupSaturation2)
    groupMerge3.connectInput(0, groupDot28)
    groupMerge3.connectInput(1, groupDot8)
    groupDot28.connectInput(0, groupDot27)
    groupDot29.connectInput(0, groupDot26)
    groupDot15.connectInput(0, groupSwitch2)
    groupDot30.connectInput(0, groupMerge3)
    groupDot31.connectInput(0, groupBlur1)
    groupSaturation2.connectInput(0, groupMerge2)
    groupLog2Lin1.connectInput(0, groupimg)
    groupLog2Lin2.connectInput(0, groupSwitch1)
    groupLog2Lin3.connectInput(0, groupShuffle2)
    groupSeExprSimple_avgG_2.connectInput(0, groupDot1_2)
    groupSeExprSimple_avgR_2.connectInput(0, groupDot1_2_2)
    groupSeExprSimple_avgB_2.connectInput(0, groupDot1)
    groupbypass_B.connectInput(0, groupSeExprSimple_avgB)
    groupbypass_B.connectInput(1, groupSeExprSimple_avgB_2)
    groupbypass_G.connectInput(0, groupSeExprSimple_avgG)
    groupbypass_G.connectInput(1, groupSeExprSimple_avgG_2)
    groupbypass_R.connectInput(0, groupSeExprSimple_avgR)
    groupbypass_R.connectInput(1, groupSeExprSimple_avgR_2)

    param = groupSeExprSimple_avgB.getParam("x1")
    param.setExpression("thisGroup.rto.get()", False, 0)
    del param
    param = groupSeExprSimple_avgG.getParam("x1")
    param.setExpression("thisGroup.rto.get()", False, 0)
    del param
    param = groupalg_B.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupalg_G.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupscreencol.getParam("which")
    param.setExpression("thisGroup.screentype.get()", False, 0)
    del param
    param = groupSeExprSimple_avgR.getParam("x1")
    param.setExpression("thisGroup.rto.get()", False, 0)
    del param
    param = groupalg_R.getParam("which")
    param.setExpression("thisGroup.despillalg.get()", False, 0)
    del param
    param = groupBlur1.getParam("size")
    param.setExpression("thisGroup.preblur.get()", False, 0)
    param.setExpression("thisGroup.preblur.get()", False, 1)
    del param
    param = groupConstant1.getParam("color")
    param.setExpression("thisGroup.colour.get()[0]", False, 0)
    param.setExpression("thisGroup.colour.get()[1]", False, 1)
    param.setExpression("thisGroup.colour.get()[2]", False, 2)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.colourreplacement.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.addapply.get()", False, 0)
    del param
    param = groupSwitch4.getParam("which")
    param.setExpression("thisGroup.spillmatte.get()", False, 0)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupColorCorrect1.getParam("MasterGamma")
    group.getParam("ColorCorrect1MasterGamma").setAsAlias(param)
    del param
    param = groupColorCorrect1.getParam("MasterGain")
    group.getParam("ColorCorrect1MasterGain").setAsAlias(param)
    del param
    param = groupSaturation1.getParam("saturation")
    param.setExpression("thisGroup.satcr.get()+1", False, 0)
    del param
    param = groupSwitch5.getParam("which")
    param.setExpression("thisGroup.colourreplacement.get()", False, 0)
    del param
    param = groupLog2Lin1.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin2.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin3.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupbypass_B.getParam("which")
    param.setExpression("thisGroup.bypassweight.get()", False, 0)
    del param
    param = groupbypass_G.getParam("which")
    param.setExpression("thisGroup.bypassweight.get()", False, 0)
    del param
    param = groupbypass_R.getParam("which")
    param.setExpression("thisGroup.bypassweight.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_DespillExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
