# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_HairKeyExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_HairKeyExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_HairKey"

def getLabel():
    return "lp_HairKey"

def getVersion():
    return 1

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "Create key-less keys of hair and other fine detail which are hard to matte. Requires a cleanplate (generated ones do work better usually) but can also be utilized with a single color. Works for bright and dark hair."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("hairtype", "hair type")
    entries = [ ("bright 1", ""),
    ("bright 2", ""),
    ("dark", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Choose which tone of hair you are trying to key; \'bright 1\' equals a plus, \'bright 2\' a screen and \'dark\' a multiply-operation")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.hairtype = param
    del param

    param = lastNode.createChoiceParam("linlog", "process in")
    entries = [ ("log", ""),
    ("lin", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("lin")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("choose to process the effect in lin or log")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.linlog = param
    del param

    param = lastNode.createChoiceParam("cleanchoice", "use")
    entries = [ ("colour", ""),
    ("cleanplate", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("using a selected color works only on perfectly lit screens; a cleanplate is always to be preferred. Picking the screencolor is still mandatory!")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.cleanchoice = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createColorParam("Constant1color", "screen colour", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Picking your screen colour is mandatory. Gets also used for the \"colour\" mode")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Constant1color = param
    del param

    param = lastNode.createColorParam("Multiply1value", "intensity", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(4, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(4, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(4, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("boosts the effect. hint: when this value is negative and the hair type set to \"dark\", it works great for the application of bright hair, too :)\nyou can tone the colour by adjusting the colour-channels seperately")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Multiply1value = param
    del param

    param = lastNode.createBooleanParam("Switch4disableNode", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("invert the connected mask")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Switch4disableNode = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_HairKey\n(c) 2016 by lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Settings', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("cleanplate")
    lastNode.setPosition(3103, -194)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param


    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createBooleanParam("cp_connected", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.cp_connected = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Info', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "img"

    # Start of node "SeExprSimple_R"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_R")
    lastNode.setLabel("SeExprSimple_R")
    lastNode.setPosition(2090, 405)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_R = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > ((g+b)/2) ? ((g+b)/2) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_R"

    # Start of node "SeExprSimple_G"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_G")
    lastNode.setLabel("SeExprSimple_G")
    lastNode.setPosition(2295, 404)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_G = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > ((r+b)/2) ? ((r+b)/2) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_G"

    # Start of node "SeExprSimple_B"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_B")
    lastNode.setLabel("SeExprSimple_B")
    lastNode.setPosition(2499, 405)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_B = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > ((r+g)/2) ? ((r+g)/2) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_B"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2283, 544)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2328, 307)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2532, 307)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2123, 307)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2328, 158)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "SeExprSimple_R_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_R_2")
    lastNode.setLabel("SeExprSimple_R_2")
    lastNode.setPosition(2909, 412)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_R_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r > ((g+b)/2) ? ((g+b)/2) : r")
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_R_2"

    # Start of node "SeExprSimple_G_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_G_2")
    lastNode.setLabel("SeExprSimple_G_2")
    lastNode.setPosition(3115, 411)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_G_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g > ((r+b)/2) ? ((r+b)/2) : g")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_G_2"

    # Start of node "SeExprSimple_B_2"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple_B_2")
    lastNode.setLabel("SeExprSimple_B_2")
    lastNode.setPosition(3318, 409)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple_B_2 = lastNode

    param = lastNode.getParam("layerInputChoice1")
    if param is not None:
        param.setValue("Color")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b > ((r+g)/2) ? ((r+g)/2) : b")
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExprSimple_B_2"

    # Start of node "Switch1_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1_2")
    lastNode.setLabel("Switch1_2")
    lastNode.setPosition(3103, 515)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1_2"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(3148, 313)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(3351, 313)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(2942, 313)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(2718, 144)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.02354717254638672, 0)
        param.setValue(0.4795680344104767, 1)
        param.setValue(0.103462740778923, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(2283, 947)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("from")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("from")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3148, 973)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "HSVTool1"
    lastNode = app.createNode("net.sf.openfx.HSVToolPlugin", 1, group)
    lastNode.setScriptName("HSVTool1")
    lastNode.setLabel("HSVTool1")
    lastNode.setPosition(2283, 699)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVTool1 = lastNode

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(512, 0)
        param.setValue(288, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1024, 0)
        param.setValue(576, 1)
        del param

    param = lastNode.getParam("hueRotation")
    if param is not None:
        param.setValue(180, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVTool1"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(3103, 144)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(3148, 13)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2328, 29)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1812, 1937)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(1861, 85)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Log2Lin1_3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_3")
    lastNode.setLabel("Log2Lin1_3")
    lastNode.setPosition(1828, 221)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_3"

    # Start of node "Log2Lin1_4"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_4")
    lastNode.setLabel("Log2Lin1_4")
    lastNode.setPosition(1824, 2243)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_4 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_4"

    # Start of node "Log2Lin1_2_2"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_2_2")
    lastNode.setLabel("Log2Lin1_2_2")
    lastNode.setPosition(3115, 233)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_2_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_2_2"

    # Start of node "Log2Lin1_2_3"
    lastNode = app.createNode("net.sf.openfx.Log2Lin", 1, group)
    lastNode.setScriptName("Log2Lin1_2_3")
    lastNode.setLabel("Log2Lin1_2_3")
    lastNode.setPosition(2295, 226)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLog2Lin1_2_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("Lin to Log")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Log2Lin1_2_3"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(2073, 1744)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("multiply")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1857, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Switch3"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch3")
    lastNode.setLabel("Switch3")
    lastNode.setPosition(1812, 2117)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch3 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch3"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(2283, 1128)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply1 = lastNode

    del lastNode
    # End of node "Multiply1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2283, 1244)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "HSVTool1_2"
    lastNode = app.createNode("net.sf.openfx.HSVToolPlugin", 1, group)
    lastNode.setScriptName("HSVTool1_2")
    lastNode.setLabel("HSVTool1_2")
    lastNode.setPosition(3103, 705)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVTool1_2 = lastNode

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(512, 0)
        param.setValue(288, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1024, 0)
        param.setValue(576, 1)
        del param

    param = lastNode.getParam("hueRotation")
    if param is not None:
        param.setValue(180, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVTool1_2"

    # Start of node "Output3"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output3")
    lastNode.setLabel("Output3")
    lastNode.setPosition(1812, 2727)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput3 = lastNode

    del lastNode
    # End of node "Output3"

    # Start of node "cleanplate"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("cleanplate")
    lastNode.setLabel("bg")
    lastNode.setPosition(1816, -190)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupcleanplate = lastNode

    del lastNode
    # End of node "cleanplate"

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("img")
    lastNode.setPosition(2283, -180)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupbg = lastNode

    del lastNode
    # End of node "bg"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(1441, 1209)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(1626, 1369)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2048, 0)
        param.setValue(1152, 1)
        del param

    del lastNode
    # End of node "Constant2"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(1441, 1357)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    del lastNode
    # End of node "Merge4"

    # Start of node "Invert2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert2")
    lastNode.setLabel("Invert2")
    lastNode.setPosition(1251, 1573)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert2"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1812, 2488)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(1937, 1840)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("screen")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(2118, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(1982, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(2118, 2131)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(1982, 2018)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(2328, 1770)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(2328, 1866)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(2328, 1963)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Dot25"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot25")
    lastNode.setLabel("Dot25")
    lastNode.setPosition(1718, 2502)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot25 = lastNode

    del lastNode
    # End of node "Dot25"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(1486, 1963)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(1486, 1866)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(1486, 1770)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(1861, 1383)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Switch4"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch4")
    lastNode.setLabel("Switch4")
    lastNode.setPosition(1441, 1573)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.1098, 0.3137, 0.6941)
    groupSwitch4 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch4"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(1718, 1663)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "RGBToHSV1"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("RGBToHSV1")
    lastNode.setLabel("RGBToHSV1")
    lastNode.setPosition(2283, 1384)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupRGBToHSV1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "RGBToHSV1"

    # Start of node "HSVToRGB1"
    lastNode = app.createNode("net.sf.openfx.HSVToRGB", 1, group)
    lastNode.setScriptName("HSVToRGB1")
    lastNode.setLabel("HSVToRGB1")
    lastNode.setPosition(2283, 1487)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHSVToRGB1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "HSVToRGB1"

    # Start of node "Grade2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade2")
    lastNode.setLabel("Grade2")
    lastNode.setPosition(2283, 1438)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("offset")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupSeExprSimple_R.connectInput(0, groupDot3)
    groupSeExprSimple_G.connectInput(0, groupDot1)
    groupSeExprSimple_B.connectInput(0, groupDot2)
    groupSwitch1.connectInput(0, groupSeExprSimple_R)
    groupSwitch1.connectInput(1, groupSeExprSimple_G)
    groupSwitch1.connectInput(2, groupSeExprSimple_B)
    groupDot1.connectInput(0, groupLog2Lin1_2_3)
    groupDot2.connectInput(0, groupDot1)
    groupDot3.connectInput(0, groupDot1)
    groupDot5.connectInput(0, groupDot7)
    groupSeExprSimple_R_2.connectInput(0, groupDot3_2)
    groupSeExprSimple_G_2.connectInput(0, groupDot1_2)
    groupSeExprSimple_B_2.connectInput(0, groupDot2_2)
    groupSwitch1_2.connectInput(0, groupSeExprSimple_R_2)
    groupSwitch1_2.connectInput(1, groupSeExprSimple_G_2)
    groupSwitch1_2.connectInput(2, groupSeExprSimple_B_2)
    groupDot1_2.connectInput(0, groupLog2Lin1_2_2)
    groupDot2_2.connectInput(0, groupDot1_2)
    groupDot3_2.connectInput(0, groupDot1_2)
    groupConstant1.connectInput(0, groupDot5)
    groupMerge3.connectInput(0, groupHSVTool1)
    groupMerge3.connectInput(1, groupDot6)
    groupDot6.connectInput(0, groupHSVTool1_2)
    groupHSVTool1.connectInput(0, groupSwitch1)
    groupSwitch2.connectInput(0, groupConstant1)
    groupSwitch2.connectInput(1, groupDot4)
    groupDot4.connectInput(0, groupimg)
    groupDot7.connectInput(0, groupbg)
    groupMerge1.connectInput(0, groupDot12)
    groupMerge1.connectInput(1, groupDot19)
    groupMerge1.connectInput(2, groupDot15)
    groupDot8.connectInput(0, groupcleanplate)
    groupLog2Lin1_3.connectInput(0, groupDot8)
    groupLog2Lin1_4.connectInput(0, groupSwitch3)
    groupLog2Lin1_2_2.connectInput(0, groupSwitch2)
    groupLog2Lin1_2_3.connectInput(0, groupDot5)
    groupMerge1_2.connectInput(0, groupDot9)
    groupMerge1_2.connectInput(1, groupDot14)
    groupMerge1_2.connectInput(2, groupDot20)
    groupDot12.connectInput(0, groupDot23)
    groupSwitch3.connectInput(0, groupMerge1)
    groupSwitch3.connectInput(1, groupDot11)
    groupSwitch3.connectInput(2, groupDot10)
    groupMultiply1.connectInput(0, groupMerge3)
    groupInvert1.connectInput(0, groupMultiply1)
    groupHSVTool1_2.connectInput(0, groupSwitch1_2)
    groupOutput3.connectInput(0, groupShuffle1)
    groupConstant2.connectInput(0, groupDot23)
    groupMerge4.connectInput(0, groupmask)
    groupMerge4.connectInput(1, groupConstant2)
    groupInvert2.connectInput(0, groupMerge4)
    groupShuffle1.connectInput(0, groupLog2Lin1_4)
    groupShuffle1.connectInput(1, groupDot25)
    groupMerge1_3.connectInput(0, groupDot13)
    groupMerge1_3.connectInput(1, groupDot18)
    groupMerge1_3.connectInput(2, groupDot16)
    groupDot9.connectInput(0, groupDot13)
    groupDot13.connectInput(0, groupDot12)
    groupDot10.connectInput(0, groupMerge1_2)
    groupDot11.connectInput(0, groupMerge1_3)
    groupDot14.connectInput(0, groupHSVToRGB1)
    groupDot18.connectInput(0, groupDot14)
    groupDot19.connectInput(0, groupDot18)
    groupDot25.connectInput(0, groupDot17)
    groupDot15.connectInput(0, groupDot16)
    groupDot16.connectInput(0, groupDot20)
    groupDot20.connectInput(0, groupSwitch4)
    groupDot23.connectInput(0, groupLog2Lin1_3)
    groupSwitch4.connectInput(0, groupInvert2)
    groupSwitch4.connectInput(1, groupMerge4)
    groupDot17.connectInput(0, groupDot12)
    groupRGBToHSV1.connectInput(0, groupInvert1)
    groupHSVToRGB1.connectInput(0, groupGrade2)
    groupGrade2.connectInput(0, groupRGBToHSV1)

    param = groupimg.getParam("cp_connected")
    param.setExpression("thisNode.getInput", True, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("if thisGroup.Constant1color.get()[0] > (thisGroup.Constant1color.get()[1]+thisGroup.Constant1color.get()[2])/2:\n\tret = 0\nelif thisGroup.Constant1color.get()[1] > (thisGroup.Constant1color.get()[0]+thisGroup.Constant1color.get()[2])/2:\n\tret = 1\nelse:\n\tret = 2", True, 0)
    del param
    param = groupSwitch1_2.getParam("which")
    param.setExpression("if thisGroup.Constant1color.get()[0] > (thisGroup.Constant1color.get()[1]+thisGroup.Constant1color.get()[2])/2:\n\tret = 0\nelif thisGroup.Constant1color.get()[1] > (thisGroup.Constant1color.get()[0]+thisGroup.Constant1color.get()[2])/2:\n\tret = 1\nelse:\n\tret = 2", True, 0)
    del param
    param = groupHSVTool1.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.cleanchoice.get()", False, 0)
    del param
    param = groupLog2Lin1_4.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin1_2_2.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupLog2Lin1_2_3.getParam("disableNode")
    param.setExpression("thisGroup.linlog.get()", False, 0)
    del param
    param = groupSwitch3.getParam("which")
    param.setExpression("thisGroup.hairtype.get()", False, 0)
    del param
    param = groupMultiply1.getParam("value")
    group.getParam("Multiply1value").setAsAlias(param)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupHSVTool1_2.getParam("disableNode")
    param.setExpression("if thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupSwitch4.getParam("disableNode")
    group.getParam("Switch4disableNode").setAsAlias(param)
    del param
    param = groupRGBToHSV1.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupHSVToRGB1.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupGrade2.getParam("disableNode")
    param.setExpression("if thisGroup.Multiply1.value.get()[dimension] < 0 and thisGroup.hairtype.get() == 2:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param

    try:
        extModule = sys.modules["lp_HairKeyExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
