# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_SimpleKeyerExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_SimpleKeyerExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_SimpleKeyer"

def getLabel():
    return "lp_SimpleKeyer"

def getVersion():
    return 1

def getGrouping():
    return "Keyer"

def getPluginDescription():
    return "A very simple keyer with a big variety of different operations."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("keyoperation", "operation")
    entries = [ ("red", ""),
    ("green", ""),
    ("blue", ""),
    ("luminance", ""),
    ("max", ""),
    ("min", ""),
    ("hue", ""),
    ("saturation hsl", ""),
    ("saturation hsv", ""),
    ("lightness", ""),
    ("value", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("luminance")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Plenty of operations to choose from :)")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyoperation = param
    del param

    param = lastNode.createBooleanParam("Invert1NatronOfxParamProcessA", "invert key")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Inverts the created Alpha.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Invert1NatronOfxParamProcessA = param
    del param

    param = lastNode.createDoubleParam("blkpnt", "black point")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the blackpoint for the Key.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.blkpnt = param
    del param

    param = lastNode.createDoubleParam("whtpnt", "white point")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the whitepoint for the Key.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.whtpnt = param
    del param

    param = lastNode.createGroupParam("rangecntrl", "range controls")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.rangecntrl = param
    del param

    param = lastNode.createBooleanParam("rangeactivate", "activate")

    # Add the param to the group, no need to add it to the page
    lastNode.rangecntrl.addParam(param)

    # Set param properties
    param.setHelp("Activates the range-selection.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rangeactivate = param
    del param

    param = lastNode.createDoubleParam("whtrng", "white range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.rangecntrl.addParam(param)

    # Set param properties
    param.setHelp("Set the end of the core-selection in a range. \nimagine all points (black, white, white range and baclk range) would sit on one line. Everything left of black point will be black, fade between black point and white point, everything between white point and white range will be solid white, fade between white range and black range, and again everything right of black range will be black. Hope that makes sense.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.whtrng = param
    del param

    param = lastNode.createDoubleParam("blkrng", "black range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.rangecntrl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.blkrng = param
    del param

    param = lastNode.createSeparatorParam("sep01", "")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createBooleanParam("Grade1clampBlack", "clamp black")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Grade1clampBlack = param
    del param

    param = lastNode.createBooleanParam("Grade1clampWhite", "clamp white")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Grade1clampWhite = param
    del param

    param = lastNode.createBooleanParam("prmlt", "premultiply")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Premultiplies the image by the created Alpha.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.prmlt = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_SimpleKey v1.0\n(c) 2016 by lucas pfaff\ninspired by Nukes Keyer node, born out of need for a quick and simple keyer")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Settings', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(3261, 2161)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("img")
    lastNode.setPosition(3261, 46)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Max"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Max")
    lastNode.setLabel("Max")
    lastNode.setPosition(1648, 506)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMax = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Max")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Max"

    # Start of node "Saturation"
    lastNode = app.createNode("net.sf.openfx.RGBToHSL", 1, group)
    lastNode.setScriptName("Saturation")
    lastNode.setLabel("Saturation")
    lastNode.setPosition(2532, 510)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation"

    # Start of node "Lightness"
    lastNode = app.createNode("net.sf.openfx.RGBToHSL", 1, group)
    lastNode.setScriptName("Lightness")
    lastNode.setLabel("Lightness")
    lastNode.setPosition(2966, 509)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLightness = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Lightness"

    # Start of node "Value"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("Value")
    lastNode.setLabel("Value")
    lastNode.setPosition(3162, 504)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupValue = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Value"

    # Start of node "Luminance"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Luminance")
    lastNode.setLabel("Luminance")
    lastNode.setPosition(1413, 505)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupLuminance = lastNode

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("luminanceMath")
    if param is not None:
        param.set("Average")
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Luminance"

    # Start of node "ShuffleLum"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleLum")
    lastNode.setLabel("ShuffleLum")
    lastNode.setPosition(1499, 621)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleLum = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    del lastNode
    # End of node "ShuffleLum"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1544, 382)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "ShuffleMax"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleMax")
    lastNode.setLabel("ShuffleMax")
    lastNode.setPosition(1752, 632)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleMax = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    del lastNode
    # End of node "ShuffleMax"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(1797, 382)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "ShuffleMin"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleMin")
    lastNode.setLabel("ShuffleMin")
    lastNode.setPosition(2222, 622)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleMin = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    del lastNode
    # End of node "ShuffleMin"

    # Start of node "Dot1_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2")
    lastNode.setLabel("Dot1_2_2")
    lastNode.setPosition(2267, 375)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2"

    # Start of node "ShuffleSat"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleSat")
    lastNode.setLabel("ShuffleSat")
    lastNode.setPosition(2620, 627)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleSat = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    del lastNode
    # End of node "ShuffleSat"

    # Start of node "Dot1_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2_2")
    lastNode.setLabel("Dot1_2_2_2")
    lastNode.setPosition(2665, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2_2"

    # Start of node "ShuffleLight"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleLight")
    lastNode.setLabel("ShuffleLight")
    lastNode.setPosition(3055, 637)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleLight = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    del lastNode
    # End of node "ShuffleLight"

    # Start of node "Dot1_2_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2_2_2")
    lastNode.setLabel("Dot1_2_2_2_2")
    lastNode.setPosition(3100, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2_2_2"

    # Start of node "Hue"
    lastNode = app.createNode("net.sf.openfx.RGBToHSL", 1, group)
    lastNode.setScriptName("Hue")
    lastNode.setLabel("Hue")
    lastNode.setPosition(2328, 514)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupHue = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Hue"

    # Start of node "ShuffleHue"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleHue")
    lastNode.setLabel("ShuffleHue")
    lastNode.setPosition(2415, 630)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleHue = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    del lastNode
    # End of node "ShuffleHue"

    # Start of node "Dot1_2_2_2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2_2_3")
    lastNode.setLabel("Dot1_2_2_2_3")
    lastNode.setPosition(2460, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2_2_3 = lastNode

    del lastNode
    # End of node "Dot1_2_2_2_3"

    # Start of node "ShuffleVal"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleVal")
    lastNode.setLabel("ShuffleVal")
    lastNode.setPosition(3261, 630)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleVal = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    del lastNode
    # End of node "ShuffleVal"

    # Start of node "Dot1_2_2_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2_2_2_2")
    lastNode.setLabel("Dot1_2_2_2_2_2")
    lastNode.setPosition(3306, 378)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2_2_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2_2_2_2"

    # Start of node "ShuffleR"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleR")
    lastNode.setLabel("ShuffleR")
    lastNode.setPosition(943, 633)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleR = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    del lastNode
    # End of node "ShuffleR"

    # Start of node "ShuffleB"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleB")
    lastNode.setLabel("ShuffleB")
    lastNode.setPosition(1281, 627)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleB = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    del lastNode
    # End of node "ShuffleB"

    # Start of node "ShuffleG"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleG")
    lastNode.setLabel("ShuffleG")
    lastNode.setPosition(1110, 631)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleG = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    del lastNode
    # End of node "ShuffleG"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1326, 382)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(988, 382)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1155, 382)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(3261, 875)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(3, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(3306, 217)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(3261, 1739)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2009, 556)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("min")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("min")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "red"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("red")
    lastNode.setLabel("red")
    lastNode.setPosition(1880, 459)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupred = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "red"

    # Start of node "green"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("green")
    lastNode.setLabel("green")
    lastNode.setPosition(2009, 492)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgreen = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.g")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "green"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(2054, 375)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "blue"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("blue")
    lastNode.setLabel("blue")
    lastNode.setPosition(2140, 471)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupblue = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.b")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.b")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "blue"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(3261, 1260)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Grade_rng"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade_rng")
    lastNode.setLabel("Grade_rng")
    lastNode.setPosition(3515, 1265)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade_rng = lastNode

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade_rng"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(3306, 1153)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(3560, 1153)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(3515, 1436)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("difference")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("difference")
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(3261, 1566)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(3560, 1580)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(3261, 1938)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Premult1"

    # Start of node "ShuffleVal_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("ShuffleVal_2")
    lastNode.setLabel("ShuffleVal_2")
    lastNode.setPosition(2833, 642)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleVal_2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.g")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.b")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.g")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    del lastNode
    # End of node "ShuffleVal_2"

    # Start of node "Dot1_2_2_2_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2_2_2_2_2_2")
    lastNode.setLabel("Dot1_2_2_2_2_2_2")
    lastNode.setPosition(2878, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2_2_2_2_2_2 = lastNode

    del lastNode
    # End of node "Dot1_2_2_2_2_2_2"

    # Start of node "Saturation02"
    lastNode = app.createNode("net.sf.openfx.RGBToHSV", 1, group)
    lastNode.setScriptName("Saturation02")
    lastNode.setLabel("Saturation02")
    lastNode.setPosition(2727, 504)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation02 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Saturation02"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupPremult1)
    groupMax.connectInput(0, groupDot1_2)
    groupSaturation.connectInput(0, groupDot1_2_2_2)
    groupLightness.connectInput(0, groupDot1_2_2_2_2)
    groupValue.connectInput(0, groupDot1_2_2_2_2_2)
    groupLuminance.connectInput(0, groupDot1)
    groupShuffleLum.connectInput(0, groupDot1)
    groupShuffleLum.connectInput(1, groupLuminance)
    groupDot1.connectInput(0, groupDot1_2)
    groupShuffleMax.connectInput(0, groupDot1_2)
    groupShuffleMax.connectInput(1, groupMax)
    groupDot1_2.connectInput(0, groupDot6)
    groupShuffleMin.connectInput(0, groupDot1_2_2)
    groupShuffleMin.connectInput(1, groupMerge1)
    groupDot1_2_2.connectInput(0, groupDot1_2_2_2_3)
    groupShuffleSat.connectInput(0, groupDot1_2_2_2)
    groupShuffleSat.connectInput(1, groupSaturation)
    groupDot1_2_2_2.connectInput(0, groupDot1_2_2_2_2_2_2)
    groupShuffleLight.connectInput(0, groupDot1_2_2_2_2)
    groupShuffleLight.connectInput(1, groupLightness)
    groupDot1_2_2_2_2.connectInput(0, groupDot1_2_2_2_2_2)
    groupHue.connectInput(0, groupDot1_2_2_2_3)
    groupShuffleHue.connectInput(0, groupDot1_2_2_2_3)
    groupShuffleHue.connectInput(1, groupHue)
    groupDot1_2_2_2_3.connectInput(0, groupDot1_2_2_2)
    groupShuffleVal.connectInput(0, groupDot1_2_2_2_2_2)
    groupShuffleVal.connectInput(1, groupValue)
    groupDot1_2_2_2_2_2.connectInput(0, groupDot5)
    groupShuffleR.connectInput(0, groupDot3)
    groupShuffleR.connectInput(1, groupDot3)
    groupShuffleB.connectInput(0, groupDot2)
    groupShuffleB.connectInput(1, groupDot2)
    groupShuffleG.connectInput(0, groupDot4)
    groupShuffleG.connectInput(1, groupDot4)
    groupDot2.connectInput(0, groupDot1)
    groupDot3.connectInput(0, groupDot4)
    groupDot4.connectInput(0, groupDot2)
    groupSwitch1.connectInput(0, groupShuffleR)
    groupSwitch1.connectInput(1, groupShuffleG)
    groupSwitch1.connectInput(2, groupShuffleB)
    groupSwitch1.connectInput(3, groupShuffleLum)
    groupSwitch1.connectInput(4, groupShuffleMax)
    groupSwitch1.connectInput(5, groupShuffleMin)
    groupSwitch1.connectInput(6, groupShuffleHue)
    groupSwitch1.connectInput(7, groupShuffleSat)
    groupSwitch1.connectInput(8, groupShuffleVal_2)
    groupSwitch1.connectInput(9, groupShuffleLight)
    groupSwitch1.connectInput(10, groupShuffleVal)
    groupDot5.connectInput(0, groupInput1)
    groupInvert1.connectInput(0, groupSwitch2)
    groupMerge1.connectInput(0, groupgreen)
    groupMerge1.connectInput(1, groupred)
    groupMerge1.connectInput(3, groupblue)
    groupred.connectInput(1, groupDot6)
    groupgreen.connectInput(1, groupDot6)
    groupDot6.connectInput(0, groupDot1_2_2)
    groupblue.connectInput(1, groupDot6)
    groupGrade1.connectInput(0, groupDot7)
    groupGrade_rng.connectInput(0, groupDot8)
    groupDot7.connectInput(0, groupSwitch1)
    groupDot8.connectInput(0, groupDot7)
    groupMerge2.connectInput(0, groupGrade_rng)
    groupMerge2.connectInput(1, groupGrade1)
    groupSwitch2.connectInput(0, groupGrade1)
    groupSwitch2.connectInput(1, groupDot9)
    groupDot9.connectInput(0, groupMerge2)
    groupPremult1.connectInput(0, groupInvert1)
    groupShuffleVal_2.connectInput(0, groupDot1_2_2_2_2_2_2)
    groupShuffleVal_2.connectInput(1, groupSaturation02)
    groupDot1_2_2_2_2_2_2.connectInput(0, groupDot1_2_2_2_2)
    groupSaturation02.connectInput(0, groupDot1_2_2_2_2_2_2)

    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.keyoperation.get()", False, 0)
    del param
    param = groupInvert1.getParam("NatronOfxParamProcessA")
    group.getParam("Invert1NatronOfxParamProcessA").setAsAlias(param)
    del param
    param = groupGrade1.getParam("blackPoint")
    param.setExpression("thisGroup.blkpnt.get()", False, 0)
    param.setExpression("thisGroup.blkpnt.get()", False, 1)
    param.setExpression("thisGroup.blkpnt.get()", False, 2)
    param.setExpression("thisGroup.blkpnt.get()", False, 3)
    del param
    param = groupGrade1.getParam("whitePoint")
    param.setExpression("thisGroup.whtpnt.get()", False, 0)
    param.setExpression("thisGroup.whtpnt.get()", False, 1)
    param.setExpression("thisGroup.whtpnt.get()", False, 2)
    param.setExpression("thisGroup.whtpnt.get()", False, 3)
    del param
    param = groupGrade1.getParam("clampBlack")
    group.getParam("Grade1clampBlack").setAsAlias(param)
    del param
    param = groupGrade1.getParam("clampWhite")
    group.getParam("Grade1clampWhite").setAsAlias(param)
    del param
    param = groupGrade_rng.getParam("blackPoint")
    param.setExpression("thisGroup.whtrng.get()", False, 0)
    param.setExpression("thisGroup.whtrng.get()", False, 1)
    param.setExpression("thisGroup.whtrng.get()", False, 2)
    param.setExpression("thisGroup.whtrng.get()", False, 3)
    del param
    param = groupGrade_rng.getParam("whitePoint")
    param.setExpression("thisGroup.blkrng.get()", False, 0)
    param.setExpression("thisGroup.blkrng.get()", False, 1)
    param.setExpression("thisGroup.blkrng.get()", False, 2)
    param.setExpression("thisGroup.blkrng.get()", False, 3)
    del param
    param = groupGrade_rng.getParam("clampBlack")
    param.setExpression("thisGroup.Grade1.clampBlack.get()", False, 0)
    del param
    param = groupGrade_rng.getParam("clampWhite")
    param.setExpression("thisGroup.Grade1.clampWhite.get()", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.rangeactivate.get()", False, 0)
    del param
    param = groupPremult1.getParam("disableNode")
    param.setExpression("1-thisGroup.prmlt.get()", False, 0)
    del param

    try:
        extModule = sys.modules["lp_SimpleKeyerExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
