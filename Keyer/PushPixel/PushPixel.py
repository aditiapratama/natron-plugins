# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named PushPixelExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from PushPixelExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.PushPixel"

def getLabel():
    return "PushPixel"

def getVersion():
    return 1

def getIconPath():
    return "PushPixel.png"

def getGrouping():
    return "Community/Keyer"

def getPluginDescription():
    return "Push pixels of the RGB on the edges of the alpha channel."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "PushPixel")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createChoiceParam("PushPull", "mode")
    entries = [ ("Push", ""),
    ("Pull", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.PushPull = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createDoubleParam("SizeSlider", "size")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SizeSlider = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createDoubleParam("EdgeSizeSlider", "Edge_size")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.EdgeSizeSlider = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createDoubleParam("SoftSelect", "Soft_select")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.SoftSelect = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("Name", "PushPixel")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Name = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createSeparatorParam("line03", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line03 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createSeparatorParam("FF", "(Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FF = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "IDistort1"
    lastNode = app.createNode("net.sf.openfx.IDistort", 2, group)
    lastNode.setScriptName("IDistort1")
    lastNode.setLabel("IDistort1")
    lastNode.setPosition(1707, 1518)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupIDistort1 = lastNode

    param = lastNode.getParam("channelA")
    if param is not None:
        param.set("1")
        del param

    param = lastNode.getParam("uvOffset")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    param = lastNode.getParam("uvScale")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    del lastNode
    # End of node "IDistort1"

    # Start of node "InputRGB"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("InputRGB")
    lastNode.setLabel("InputRGB")
    lastNode.setPosition(1707, -23)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInputRGB = lastNode

    del lastNode
    # End of node "InputRGB"

    # Start of node "InputAlpha"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("InputAlpha")
    lastNode.setLabel("InputAlpha")
    lastNode.setPosition(2711, -24)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInputAlpha = lastNode

    del lastNode
    # End of node "InputAlpha"

    # Start of node "a_to_rgb"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("a_to_rgb")
    lastNode.setLabel("a_to_rgb")
    lastNode.setPosition(2711, 159)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupa_to_rgb = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "a_to_rgb"

    # Start of node "copy_alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("copy_alpha")
    lastNode.setLabel("copy_alpha")
    lastNode.setPosition(1707, 159)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupcopy_alpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "copy_alpha"

    # Start of node "Merge10"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge10")
    lastNode.setLabel("Merge10")
    lastNode.setPosition(1935, 709)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge10 = lastNode

    del lastNode
    # End of node "Merge10"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1968, 596)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Trans_value1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Trans_value1")
    lastNode.setLabel("Trans_value1")
    lastNode.setPosition(2146, 447)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTrans_value1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Trans_value1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(2179, 368)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2744, 386)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "ColorCorrect8"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect8")
    lastNode.setLabel("ColorCorrect8")
    lastNode.setPosition(2152, 866)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect8 = lastNode

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    del lastNode
    # End of node "ColorCorrect8"

    # Start of node "Merge11"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge11")
    lastNode.setLabel("Merge11")
    lastNode.setPosition(1935, 854)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge11 = lastNode

    del lastNode
    # End of node "Merge11"

    # Start of node "ColorCorrect7"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect7")
    lastNode.setLabel("ColorCorrect7")
    lastNode.setPosition(2149, 1017)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect7 = lastNode

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    del lastNode
    # End of node "ColorCorrect7"

    # Start of node "Merge12"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge12")
    lastNode.setLabel("Merge12")
    lastNode.setPosition(1937, 1005)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge12 = lastNode

    del lastNode
    # End of node "Merge12"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(2685, 567)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "ColorCorrect1"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1")
    lastNode.setLabel("ColorCorrect1")
    lastNode.setPosition(2899, 851)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1 = lastNode

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    del lastNode
    # End of node "ColorCorrect1"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(2685, 839)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    del lastNode
    # End of node "Merge8"

    # Start of node "ColorCorrect7_2"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect7_2")
    lastNode.setLabel("ColorCorrect7_2")
    lastNode.setPosition(2903, 1012)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect7_2 = lastNode

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    del lastNode
    # End of node "ColorCorrect7_2"

    # Start of node "Merge9"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge9")
    lastNode.setLabel("Merge9")
    lastNode.setPosition(2685, 1000)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge9 = lastNode

    del lastNode
    # End of node "Merge9"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(2309, 1253)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1970, 1270)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2718, 1270)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(2309, 1373)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(5, 0)
        param.setValue(5, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2498, 1373)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    del lastNode
    # End of node "Invert1"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2309, 1501)
    lastNode.setSize(80, 85)
    lastNode.setColor(1, 1, 1)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Segoe UI\">0=Push \n1=Pull</font>")
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(1703, 1750)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(3299, 1765)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(3299, -7)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1703, 2054)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Trans_value1_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Trans_value1_2")
    lastNode.setLabel("Trans_value1_2")
    lastNode.setPosition(2152, 721)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTrans_value1_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(5, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Trans_value1_2"

    # Start of node "Trans_value1_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Trans_value1_3")
    lastNode.setLabel("Trans_value1_3")
    lastNode.setPosition(2387, 866)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTrans_value1_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-5, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Trans_value1_3"

    # Start of node "Transform6"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform6")
    lastNode.setLabel("Transform6")
    lastNode.setPosition(2910, 457)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform6 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform6"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(2899, 563)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-5, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1938, 242)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(1938, 351)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(-1, 0)
        param.setValue(-1, 1)
        param.setValue(-1, 2)
        param.setValue(-1, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Shuffle4"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle4")
    lastNode.setLabel("Shuffle4")
    lastNode.setPosition(2014, 1519)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle4 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle4"

    # Now that all nodes are created we can connect them together, restore expressions
    groupIDistort1.connectInput(0, groupcopy_alpha)
    groupIDistort1.connectInput(1, groupShuffle4)
    groupa_to_rgb.connectInput(1, groupInputAlpha)
    groupcopy_alpha.connectInput(0, groupa_to_rgb)
    groupcopy_alpha.connectInput(1, groupInputRGB)
    groupMerge10.connectInput(0, groupDot1)
    groupMerge10.connectInput(1, groupTrans_value1_2)
    groupDot1.connectInput(0, groupGrade1)
    groupTrans_value1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupGrade1)
    groupDot3.connectInput(0, groupa_to_rgb)
    groupColorCorrect8.connectInput(0, groupTrans_value1_3)
    groupMerge11.connectInput(0, groupMerge10)
    groupMerge11.connectInput(1, groupColorCorrect8)
    groupColorCorrect7.connectInput(0, groupDot3)
    groupMerge12.connectInput(0, groupMerge11)
    groupMerge12.connectInput(1, groupColorCorrect7)
    groupMerge1.connectInput(0, groupDot1)
    groupMerge1.connectInput(1, groupTransform6)
    groupColorCorrect1.connectInput(0, groupTransform1)
    groupMerge8.connectInput(0, groupMerge1)
    groupMerge8.connectInput(1, groupColorCorrect1)
    groupColorCorrect7_2.connectInput(0, groupDot3)
    groupMerge9.connectInput(0, groupMerge8)
    groupMerge9.connectInput(1, groupColorCorrect7_2)
    groupShuffle1.connectInput(0, groupDot4)
    groupShuffle1.connectInput(1, groupDot5)
    groupDot4.connectInput(0, groupMerge12)
    groupDot5.connectInput(0, groupMerge9)
    groupBlur1.connectInput(0, groupShuffle1)
    groupInvert1.connectInput(0, groupBlur1)
    groupSwitch1.connectInput(0, groupInvert1)
    groupSwitch1.connectInput(1, groupBlur1)
    groupShuffle3.connectInput(0, groupDot6)
    groupShuffle3.connectInput(1, groupIDistort1)
    groupDot6.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupInputAlpha)
    groupOutput1.connectInput(0, groupShuffle3)
    groupTrans_value1_2.connectInput(0, groupDot3)
    groupTrans_value1_3.connectInput(0, groupDot3)
    groupTransform6.connectInput(0, groupDot3)
    groupTransform1.connectInput(0, groupDot3)
    groupShuffle2.connectInput(1, groupcopy_alpha)
    groupGrade1.connectInput(0, groupShuffle2)
    groupShuffle4.connectInput(1, groupSwitch1)

    param = groupIDistort1.getParam("uvScale")
    param.setExpression("thisGroup.SizeSlider.get()", False, 0)
    param.setExpression("thisGroup.SizeSlider.get()", False, 1)
    del param
    param = groupTrans_value1.getParam("translate")
    param.setExpression("thisGroup.EdgeSizeSlider.get()", False, 0)
    param.setExpression("thisGroup.EdgeSizeSlider.get()", False, 1)
    del param
    param = groupTrans_value1.getParam("center")
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.width()/2", True, 0)
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.height()/2", True, 1)
    del param
    param = groupBlur1.getParam("size")
    param.setExpression("thisGroup.SoftSelect.get()", False, 0)
    param.setExpression("thisGroup.SoftSelect.get()", False, 1)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.PushPull.get()", False, 0)
    del param
    param = groupTrans_value1_2.getParam("translate")
    param.setExpression("thisGroup.EdgeSizeSlider.get()", False, 1)
    del param
    param = groupTrans_value1_2.getParam("rotate")
    param.slaveTo(groupTrans_value1.getParam("rotate"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("scale")
    param.slaveTo(groupTrans_value1.getParam("scale"), 0, 0)
    param.slaveTo(groupTrans_value1.getParam("scale"), 1, 1)
    del param
    param = groupTrans_value1_2.getParam("uniform")
    param.slaveTo(groupTrans_value1.getParam("uniform"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("skewX")
    param.slaveTo(groupTrans_value1.getParam("skewX"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("skewY")
    param.slaveTo(groupTrans_value1.getParam("skewY"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("skewOrder")
    param.slaveTo(groupTrans_value1.getParam("skewOrder"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("transformAmount")
    param.slaveTo(groupTrans_value1.getParam("transformAmount"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("center")
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.width()/2", True, 0)
    param.slaveTo(groupTrans_value1.getParam("center"), 0, 0)
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.height()/2", True, 1)
    param.slaveTo(groupTrans_value1.getParam("center"), 1, 1)
    del param
    param = groupTrans_value1_2.getParam("transformCenterChanged")
    param.slaveTo(groupTrans_value1.getParam("transformCenterChanged"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("interactive")
    param.slaveTo(groupTrans_value1.getParam("interactive"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("invert")
    param.slaveTo(groupTrans_value1.getParam("invert"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("filter")
    param.slaveTo(groupTrans_value1.getParam("filter"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("clamp")
    param.slaveTo(groupTrans_value1.getParam("clamp"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("black_outside")
    param.slaveTo(groupTrans_value1.getParam("black_outside"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("motionBlur")
    param.slaveTo(groupTrans_value1.getParam("motionBlur"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("directionalBlur")
    param.slaveTo(groupTrans_value1.getParam("directionalBlur"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("shutter")
    param.slaveTo(groupTrans_value1.getParam("shutter"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("shutterOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterOffset"), 0, 0)
    del param
    param = groupTrans_value1_2.getParam("shutterCustomOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterCustomOffset"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("translate")
    param.setExpression("thisGroup.EdgeSizeSlider.get()*-1", False, 1)
    del param
    param = groupTrans_value1_3.getParam("rotate")
    param.slaveTo(groupTrans_value1.getParam("rotate"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("scale")
    param.slaveTo(groupTrans_value1.getParam("scale"), 0, 0)
    param.slaveTo(groupTrans_value1.getParam("scale"), 1, 1)
    del param
    param = groupTrans_value1_3.getParam("uniform")
    param.slaveTo(groupTrans_value1.getParam("uniform"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("skewX")
    param.slaveTo(groupTrans_value1.getParam("skewX"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("skewY")
    param.slaveTo(groupTrans_value1.getParam("skewY"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("skewOrder")
    param.slaveTo(groupTrans_value1.getParam("skewOrder"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("transformAmount")
    param.slaveTo(groupTrans_value1.getParam("transformAmount"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("center")
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.width()/2", True, 0)
    param.slaveTo(groupTrans_value1.getParam("center"), 0, 0)
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.height()/2", True, 1)
    param.slaveTo(groupTrans_value1.getParam("center"), 1, 1)
    del param
    param = groupTrans_value1_3.getParam("transformCenterChanged")
    param.slaveTo(groupTrans_value1.getParam("transformCenterChanged"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("interactive")
    param.slaveTo(groupTrans_value1.getParam("interactive"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("invert")
    param.slaveTo(groupTrans_value1.getParam("invert"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("filter")
    param.slaveTo(groupTrans_value1.getParam("filter"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("clamp")
    param.slaveTo(groupTrans_value1.getParam("clamp"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("black_outside")
    param.slaveTo(groupTrans_value1.getParam("black_outside"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("motionBlur")
    param.slaveTo(groupTrans_value1.getParam("motionBlur"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("directionalBlur")
    param.slaveTo(groupTrans_value1.getParam("directionalBlur"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("shutter")
    param.slaveTo(groupTrans_value1.getParam("shutter"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("shutterOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterOffset"), 0, 0)
    del param
    param = groupTrans_value1_3.getParam("shutterCustomOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterCustomOffset"), 0, 0)
    del param
    param = groupTransform6.getParam("translate")
    param.setExpression("thisGroup.EdgeSizeSlider.get()", False, 0)
    del param
    param = groupTransform6.getParam("rotate")
    param.slaveTo(groupTrans_value1.getParam("rotate"), 0, 0)
    del param
    param = groupTransform6.getParam("scale")
    param.slaveTo(groupTrans_value1.getParam("scale"), 0, 0)
    param.slaveTo(groupTrans_value1.getParam("scale"), 1, 1)
    del param
    param = groupTransform6.getParam("uniform")
    param.slaveTo(groupTrans_value1.getParam("uniform"), 0, 0)
    del param
    param = groupTransform6.getParam("skewX")
    param.slaveTo(groupTrans_value1.getParam("skewX"), 0, 0)
    del param
    param = groupTransform6.getParam("skewY")
    param.slaveTo(groupTrans_value1.getParam("skewY"), 0, 0)
    del param
    param = groupTransform6.getParam("skewOrder")
    param.slaveTo(groupTrans_value1.getParam("skewOrder"), 0, 0)
    del param
    param = groupTransform6.getParam("transformAmount")
    param.slaveTo(groupTrans_value1.getParam("transformAmount"), 0, 0)
    del param
    param = groupTransform6.getParam("center")
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.width()/2", True, 0)
    param.slaveTo(groupTrans_value1.getParam("center"), 0, 0)
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.height()/2", True, 1)
    param.slaveTo(groupTrans_value1.getParam("center"), 1, 1)
    del param
    param = groupTransform6.getParam("transformCenterChanged")
    param.slaveTo(groupTrans_value1.getParam("transformCenterChanged"), 0, 0)
    del param
    param = groupTransform6.getParam("interactive")
    param.slaveTo(groupTrans_value1.getParam("interactive"), 0, 0)
    del param
    param = groupTransform6.getParam("invert")
    param.slaveTo(groupTrans_value1.getParam("invert"), 0, 0)
    del param
    param = groupTransform6.getParam("filter")
    param.slaveTo(groupTrans_value1.getParam("filter"), 0, 0)
    del param
    param = groupTransform6.getParam("clamp")
    param.slaveTo(groupTrans_value1.getParam("clamp"), 0, 0)
    del param
    param = groupTransform6.getParam("black_outside")
    param.slaveTo(groupTrans_value1.getParam("black_outside"), 0, 0)
    del param
    param = groupTransform6.getParam("motionBlur")
    param.slaveTo(groupTrans_value1.getParam("motionBlur"), 0, 0)
    del param
    param = groupTransform6.getParam("directionalBlur")
    param.slaveTo(groupTrans_value1.getParam("directionalBlur"), 0, 0)
    del param
    param = groupTransform6.getParam("shutter")
    param.slaveTo(groupTrans_value1.getParam("shutter"), 0, 0)
    del param
    param = groupTransform6.getParam("shutterOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterOffset"), 0, 0)
    del param
    param = groupTransform6.getParam("shutterCustomOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterCustomOffset"), 0, 0)
    del param
    param = groupTransform1.getParam("translate")
    param.setExpression("thisGroup.EdgeSizeSlider.get()*-1", False, 0)
    del param
    param = groupTransform1.getParam("rotate")
    param.slaveTo(groupTrans_value1.getParam("rotate"), 0, 0)
    del param
    param = groupTransform1.getParam("scale")
    param.slaveTo(groupTrans_value1.getParam("scale"), 0, 0)
    param.slaveTo(groupTrans_value1.getParam("scale"), 1, 1)
    del param
    param = groupTransform1.getParam("uniform")
    param.slaveTo(groupTrans_value1.getParam("uniform"), 0, 0)
    del param
    param = groupTransform1.getParam("skewX")
    param.slaveTo(groupTrans_value1.getParam("skewX"), 0, 0)
    del param
    param = groupTransform1.getParam("skewY")
    param.slaveTo(groupTrans_value1.getParam("skewY"), 0, 0)
    del param
    param = groupTransform1.getParam("skewOrder")
    param.slaveTo(groupTrans_value1.getParam("skewOrder"), 0, 0)
    del param
    param = groupTransform1.getParam("transformAmount")
    param.slaveTo(groupTrans_value1.getParam("transformAmount"), 0, 0)
    del param
    param = groupTransform1.getParam("center")
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.width()/2", True, 0)
    param.slaveTo(groupTrans_value1.getParam("center"), 0, 0)
    param.setExpression("rod1 = Grade1.getRegionOfDefinition(frame,view)\nret = rod1.height()/2", True, 1)
    param.slaveTo(groupTrans_value1.getParam("center"), 1, 1)
    del param
    param = groupTransform1.getParam("transformCenterChanged")
    param.slaveTo(groupTrans_value1.getParam("transformCenterChanged"), 0, 0)
    del param
    param = groupTransform1.getParam("interactive")
    param.slaveTo(groupTrans_value1.getParam("interactive"), 0, 0)
    del param
    param = groupTransform1.getParam("invert")
    param.slaveTo(groupTrans_value1.getParam("invert"), 0, 0)
    del param
    param = groupTransform1.getParam("filter")
    param.slaveTo(groupTrans_value1.getParam("filter"), 0, 0)
    del param
    param = groupTransform1.getParam("clamp")
    param.slaveTo(groupTrans_value1.getParam("clamp"), 0, 0)
    del param
    param = groupTransform1.getParam("black_outside")
    param.slaveTo(groupTrans_value1.getParam("black_outside"), 0, 0)
    del param
    param = groupTransform1.getParam("motionBlur")
    param.slaveTo(groupTrans_value1.getParam("motionBlur"), 0, 0)
    del param
    param = groupTransform1.getParam("directionalBlur")
    param.slaveTo(groupTrans_value1.getParam("directionalBlur"), 0, 0)
    del param
    param = groupTransform1.getParam("shutter")
    param.slaveTo(groupTrans_value1.getParam("shutter"), 0, 0)
    del param
    param = groupTransform1.getParam("shutterOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterOffset"), 0, 0)
    del param
    param = groupTransform1.getParam("shutterCustomOffset")
    param.slaveTo(groupTrans_value1.getParam("shutterCustomOffset"), 0, 0)
    del param

    try:
        extModule = sys.modules["PushPixelExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
