# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Z2NormalExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Z2NormalExt import *
except ImportError:
    pass

def getPluginID():
    return "comunity.plugins.Z2Normal"

def getLabel():
    return "Z2Normal"

def getVersion():
    return 1

def getIconPath():
    return "Z2Normal.png"

def getGrouping():
    return "Community/Relight"

def getPluginDescription():
    return "Convert a Zpass or any Grayscale image ( black = near, white = far ) To a ViewSpace Normal Pass.\n\nThis can be used with the ReShade pyplug to do relighting effects.\n"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createChoiceParam("Shuffle2outputR", "ZChannel")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Input channel for the Z channel")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.Shuffle2outputR = param
    del param

    param = lastNode.createDoubleParam("scalez", "Compress Z")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(500, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Use this slider to reduce the distances in the Z buffer to get smoother normal.\nA good value can be the higher value in the Z divided by two.\n\nIf the Z buffer is between 0 and 1 you\'ll probably don\'t need that.\n\nUsing too high value flatten the normals ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.scalez = param
    del param

    param = lastNode.createBooleanParam("smooth", "Smooth Result")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Add a slight blur to smooth the result")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.smooth = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Settings', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(762, 617)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(762, 86)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Z2N"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Z2N")
    lastNode.setLabel("Z2N")
    lastNode.setPosition(774, 399)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupZ2N = lastNode

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec3 depth=vec3(texture2D(iChannel0, fragCoord.xy / iResolution.xy).r);\n\nconst vec2 offset1 = vec2(0.0,0.001);\nconst vec2 offset2 = vec2(0.001,0.0);\n\nfloat depth1 = texture2D(iChannel0, fragCoord.xy / iResolution.xy + offset1).r;\nfloat depth2 = texture2D(iChannel0, fragCoord.xy / iResolution.xy + offset2).r;\n\nvec3 p1 = vec3(offset1, depth1 - depth);\nvec3 p2 = vec3(offset2, depth2 - depth);\n\nvec3 normal = cross(p1, p2);\nnormal.z = -normal.z;\n\nvec3 nor = vec3(normalize(normal));\n\n// Shuffle\n// invert R -> G , invert G -> B ,invert B -> R\n\nvec3 res = vec3(nor.z*-1,nor.x*-1,nor.y*-1);\nfloat alpha=1.;\n\n//if (res.x == -1.){ if (res.y==0.) { if (res.z == 0.) alpha=0.} ; } ;\n\nif (res.x == -1. && res.y ==0. && res.z == 0.) {\nalpha=0. ;\nres.x=0. ;\n}\nfragColor = vec4(res,alpha);\n\n}\n")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Z2N"

    # Start of node "ScaleZ"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("ScaleZ")
    lastNode.setLabel("ScaleZ")
    lastNode.setPosition(762, 311)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupScaleZ = lastNode

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("clampBlack")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "ScaleZ"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(762, 225)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.r")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Blur3"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, group)
    lastNode.setScriptName("Blur3")
    lastNode.setLabel("Blur3")
    lastNode.setPosition(762, 505)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(3, 0)
        param.setValue(3, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("Quasi-Gaussian")
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur3"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupBlur3)
    groupZ2N.connectInput(0, groupScaleZ)
    groupScaleZ.connectInput(0, groupShuffle2)
    groupShuffle2.connectInput(1, groupInput1)
    groupBlur3.connectInput(0, groupZ2N)

    param = groupScaleZ.getParam("whitePoint")
    param.setExpression("thisGroup.scalez.get()", False, 0)
    param.setExpression("thisGroup.scalez.get()", False, 1)
    param.setExpression("thisGroup.scalez.get()", False, 2)
    param.setExpression("thisGroup.scalez.get()", False, 3)
    del param
    param = groupShuffle2.getParam("outputR")
    group.getParam("Shuffle2outputR").setAsAlias(param)
    del param
    param = groupBlur3.getParam("disableNode")
    param.setExpression("1-thisGroup.smooth.get()", False, 0)
    del param

    try:
        extModule = sys.modules["Z2NormalExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
