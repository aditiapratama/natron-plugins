# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named zDefocusExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from zDefocusExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.zDefocus"

def getLabel():
    return "zDefocus"

def getVersion():
    return 1

def getIconPath():
    return "zDefocus.png"

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "zDefocus node for Natron."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(1, 0.6667, 0)

    # Create the user parameters
    lastNode.zDefocus = lastNode.createPageParam("zDefocus", "zDefocus")
    param = lastNode.createSeparatorParam("sep_1", "")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_1 = param
    del param

    param = lastNode.createStringParam("CREDITS", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("zDefocus for Natron - by: Wanderson M. P")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.CREDITS = param
    del param

    param = lastNode.createStringParam("version", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("v1.01")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.version = param
    del param

    param = lastNode.createStringParam("label_2", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.label_2 = param
    del param

    param = lastNode.createStringParam("label_3", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.label_3 = param
    del param

    param = lastNode.createSeparatorParam("sep_2", "Principal Defocus ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_2 = param
    del param

    param = lastNode.createChoiceParam("Blur_Blueboundary", "Border: ")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("nearest")
    lastNode.Blur_Blueboundary = param
    del param

    param = lastNode.createChoiceParam("Blur_Bluefilter", "Filter: ")
    param.setDefaultValue(4)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("quadratic")
    lastNode.Blur_Bluefilter = param
    del param

    param = lastNode.createColorParam("ZRemap_Depth_OKgamma", "Gamma: ", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap_Depth_OKgamma = param
    del param

    param = lastNode.createBooleanParam("Show_DefocusdisableNode", "Hide zDepth: ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("Show zDepth pass.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Show_DefocusdisableNode = param
    del param

    param = lastNode.createStringParam("label_4", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.label_4 = param
    del param

    param = lastNode.createSeparatorParam("sep_3", "")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_3 = param
    del param

    param = lastNode.createDouble2DParam("Blur_Bluesize", "Blur Size: ")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blur_Bluesize = param
    del param

    param = lastNode.createColorParam("ZRemap_Depth_OKfarLimit", "Focal Plane: ", True)
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-100, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(20, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-100, 2)
    param.setMaximum(100, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(20, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-100, 3)
    param.setMaximum(100, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(20, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap_Depth_OKfarLimit = param
    del param

    param = lastNode.createColorParam("ZRemap_Depth_OKcloseLimit", "Focal Limit: ", True)
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-100, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-100, 2)
    param.setMaximum(100, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-100, 3)
    param.setMaximum(100, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap_Depth_OKcloseLimit = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Bluesize", "Refine: ")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Bluesize = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Blueblur", "Blur: ")
    param.setMinimum(-0.5, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Blueblur = param
    del param

    param = lastNode.createBooleanParam("Reference_Color", "Disable Preview Color: ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("Disable for final render.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Reference_Color = param
    del param

    param = lastNode.createStringParam("label_5", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.label_5 = param
    del param

    param = lastNode.createSeparatorParam("Sep_4", "Background Blur Gain ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Sep_4 = param
    del param

    param = lastNode.createBooleanParam("Defocus_BackdisableNode", "Disable Background Blur Gain: ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("Disable Background Blur Gain")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Defocus_BackdisableNode = param
    del param

    param = lastNode.createDouble2DParam("Blur_Defocus_Backsize", "Blur Size: ")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    param.setValue(10, 1)
    lastNode.Blur_Defocus_Backsize = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Backsize", "Refine: ")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Backsize = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Backblur", "Blur: ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Backblur = param
    del param

    param = lastNode.createDoubleParam("ZRemap2offset", "Offset: ")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-50, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(10, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap2offset = param
    del param

    param = lastNode.createBooleanParam("Preview_Back_2disableNode", "Disable Preview Color: ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("Disable preview color.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Preview_Back_2disableNode = param
    del param

    param = lastNode.createSeparatorParam("front_Sep", "Front Defocus ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.front_Sep = param
    del param

    param = lastNode.createBooleanParam("Defocus_FrontdisableNode", "Disable Defocus Front: ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Defocus_FrontdisableNode = param
    del param

    param = lastNode.createDouble2DParam("Blur_Frontsize", "Blur Size: ")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    param.setValue(10, 1)
    lastNode.Blur_Frontsize = param
    del param

    param = lastNode.createColorParam("ZRemap_Depth_FrontfarLimit", "Focal Plane: ", True)
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(50, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(50, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(0, 2)
    param.setMaximum(100, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(50, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(0, 3)
    param.setMaximum(100, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(50, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap_Depth_FrontfarLimit = param
    del param

    param = lastNode.createColorParam("ZRemap_Depth_FrontcloseLimit", "Focal Limit: ", True)
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-100, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-100, 2)
    param.setMaximum(100, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-100, 3)
    param.setMaximum(100, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ZRemap_Depth_FrontcloseLimit = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Redsize", "Refine: ")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Redsize = param
    del param

    param = lastNode.createDoubleParam("ErodeBlur_Redblur", "Blur: ")
    param.setMinimum(-0.5, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.ErodeBlur_Redblur = param
    del param

    param = lastNode.createBooleanParam("Preview_ReddisableNode", "Disable Preview Color: ")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Preview_ReddisableNode = param
    del param

    param = lastNode.createSeparatorParam("end", "")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.end = param
    del param

    param = lastNode.createStringParam("note_sep_1", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.note_sep_1 = param
    del param

    param = lastNode.createStringParam("NOTE", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("NOTE: Problems may occur at the edges of the composition, use transform to scale (1.02 may help)")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("NOTE: Problems may occur at the edges of the composition, use transform to scale (1.02 may help)")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.NOTE = param
    del param

    param = lastNode.createStringParam("note_sep_2", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.note_sep_2 = param
    del param

    param = lastNode.createSeparatorParam("sep_note", "")

    # Add the param to the page
    lastNode.zDefocus.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_note = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['zDefocus', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Dot1_6_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_6_2")
    lastNode.setLabel("Dot1_4_2")
    lastNode.setPosition(-430, 1726)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_6_2 = lastNode

    del lastNode
    # End of node "Dot1_6_2"

    # Start of node "Dot2_4_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_4_2")
    lastNode.setLabel("Dot2_4_2")
    lastNode.setPosition(-430, 2140)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_4_2 = lastNode

    del lastNode
    # End of node "Dot2_4_2"

    # Start of node "Keyer1_3_2"
    lastNode = app.createNode("net.sf.openfx.KeyerPlugin", 1, group)
    lastNode.setScriptName("Keyer1_3_2")
    lastNode.setLabel("Keyer1_3_2")
    lastNode.setPosition(181, 1909)
    lastNode.setSize(104, 55)
    lastNode.setColor(0, 1, 0)
    groupKeyer1_3_2 = lastNode

    del lastNode
    # End of node "Keyer1_3_2"

    # Start of node "ErodeBlur_Blue"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur_Blue")
    lastNode.setLabel("ErodeBlur_Blue")
    lastNode.setPosition(193, 2122)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur_Blue = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "ErodeBlur_Blue"

    # Start of node "Merge3_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3_3")
    lastNode.setLabel("Merge3_3")
    lastNode.setPosition(-79, 2323)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3_3 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.295, 0)
        del param

    param = lastNode.getParam("processAllPlanes")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge3_3"

    # Start of node "ZRemap_Depth_OK"
    lastNode = app.createNode("fr.inria.ZRemap", 1, group)
    lastNode.setScriptName("ZRemap_Depth_OK")
    lastNode.setLabel("ZRemap_Depth_OK")
    lastNode.setPosition(181, 1706)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupZRemap_Depth_OK = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(20, 0)
    param.setValue(20, 1)
    param.setValue(20, 2)
    param.setValue(20, 3)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneColour")
    lastNode.channels = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "ZRemap_Depth_OK"

    groupgroup = groupZRemap_Depth_OK
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(20, 0)
    param.setValue(20, 1)
    param.setValue(20, 2)
    param.setValue(20, 3)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneColour")
    lastNode.channels = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, groupgroup)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(726, 92)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupGrade1 = lastNode

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(20, 0)
        param.setValue(20, 1)
        param.setValue(20, 2)
        param.setValue(20, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, groupgroup)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(726, 230)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(882, 496)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(882, -40)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, groupgroup)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(882, 381)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("p1_channels")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour")
        del param

    del lastNode
    # End of node "Switch1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupGrade1.connectInput(0, groupgroupInputSource)
    groupgroupInvert1.connectInput(0, groupgroupGrade1)
    groupgroupOutput1.connectInput(0, groupgroupSwitch1)
    groupgroupSwitch1.connectInput(0, groupgroupInvert1)
    groupgroupSwitch1.connectInput(1, groupgroupInputSource)

    param = groupgroupGrade1.getParam("blackPoint")
    groupgroup.getParam("closeLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("whitePoint")
    groupgroup.getParam("farLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("gamma")
    groupgroup.getParam("gamma").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("Source_channels")
    groupgroup.getParam("Source_channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("channels")
    groupgroup.getParam("channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("disableNode")
    groupgroup.getParam("invertGradient").setAsAlias(param)
    del param
    param = groupgroupSwitch1.getParam("which")
    param.setExpression("thisGroup.zPicking.get()", False, 0)
    del param
    param = groupgroupSwitch1.getParam("p1_channels")
    param.setExpression("thisGroup.Source_channels.get()", False, 0)
    del param

    param = groupgroup.getParam("closeLimit")
    group.getParam("ZRemap_Depth_OKcloseLimit").setAsAlias(param)
    del param
    param = groupgroup.getParam("farLimit")
    group.getParam("ZRemap_Depth_OKfarLimit").setAsAlias(param)
    del param
    param = groupgroup.getParam("gamma")
    group.getParam("ZRemap_Depth_OKgamma").setAsAlias(param)
    del param

    # Start of node "Dot6_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_3")
    lastNode.setLabel("Dot6_3")
    lastNode.setPosition(-430, 2355)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_3 = lastNode

    del lastNode
    # End of node "Dot6_3"

    # Start of node "Merge4_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2")
    lastNode.setLabel("Merge4_2")
    lastNode.setPosition(-79, 2120)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge4_2"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(538, 1773)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.09084171056747437, 1)
        param.setValue(1, 2)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(538, 1966)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(226, 1986)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Constant1_2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1_2")
    lastNode.setLabel("Constant1_2")
    lastNode.setPosition(765, 1782)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1_2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Constant1_2"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(765, 2093)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(377, 2104)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    del lastNode
    # End of node "Invert1"

    # Start of node "Grade3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3")
    lastNode.setLabel("Grade3")
    lastNode.setPosition(538, 2197)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.3, 0)
        param.setValue(0.3, 1)
        param.setValue(0.3, 2)
        param.setValue(0.3, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.88, 0)
        param.setValue(0.88, 1)
        param.setValue(0.88, 2)
        param.setValue(0.88, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3"

    # Start of node "Blur_Blue"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_Blue")
    lastNode.setLabel("Blur_Defocus")
    lastNode.setPosition(-79, 1717)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_Blue = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("quadratic")
        del param

    param = lastNode.getParam("cropToFormat")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur_Blue"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(-34, 2666)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(810, 1954)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot2_4_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_4_2_2")
    lastNode.setLabel("Dot2_4_2_2")
    lastNode.setPosition(-430, 845)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_4_2_2 = lastNode

    del lastNode
    # End of node "Dot2_4_2_2"

    # Start of node "Keyer1_3_2_2"
    lastNode = app.createNode("net.sf.openfx.KeyerPlugin", 1, group)
    lastNode.setScriptName("Keyer1_3_2_2")
    lastNode.setLabel("Keyer1_3_2_2")
    lastNode.setPosition(-963, 533)
    lastNode.setSize(104, 55)
    lastNode.setColor(0, 1, 0)
    groupKeyer1_3_2_2 = lastNode

    del lastNode
    # End of node "Keyer1_3_2_2"

    # Start of node "ErodeBlur_Red"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur_Red")
    lastNode.setLabel("ErodeBlur_Red")
    lastNode.setPosition(-953, 836)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur_Red = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ErodeBlur_Red"

    # Start of node "Merge3_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3_3_2")
    lastNode.setLabel("Merge3_3_2")
    lastNode.setPosition(-732, 1024)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3_3_2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.295, 0)
        del param

    param = lastNode.getParam("processAllPlanes")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge3_3_2"

    # Start of node "ZRemap_Depth_Front"
    lastNode = app.createNode("fr.inria.ZRemap", 1, group)
    lastNode.setScriptName("ZRemap_Depth_Front")
    lastNode.setLabel("ZRemap_Depth_Front")
    lastNode.setPosition(-965, 432)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupZRemap_Depth_Front = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    param.setValue(50, 1)
    param.setValue(50, 2)
    param.setValue(50, 3)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(1, 1)
    param.setValue(1, 2)
    param.setValue(1, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneColour")
    lastNode.channels = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "ZRemap_Depth_Front"

    groupgroup = groupZRemap_Depth_Front
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    param.setValue(50, 1)
    param.setValue(50, 2)
    param.setValue(50, 3)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(1, 1)
    param.setValue(1, 2)
    param.setValue(1, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneColour")
    lastNode.channels = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, groupgroup)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(726, 92)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupGrade1 = lastNode

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(50, 0)
        param.setValue(50, 1)
        param.setValue(50, 2)
        param.setValue(50, 3)
        del param

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, groupgroup)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(726, 230)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(882, 496)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(882, -40)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, groupgroup)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(882, 381)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("p1_channels")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour")
        del param

    del lastNode
    # End of node "Switch1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupGrade1.connectInput(0, groupgroupInputSource)
    groupgroupInvert1.connectInput(0, groupgroupGrade1)
    groupgroupOutput1.connectInput(0, groupgroupSwitch1)
    groupgroupSwitch1.connectInput(0, groupgroupInvert1)
    groupgroupSwitch1.connectInput(1, groupgroupInputSource)

    param = groupgroupGrade1.getParam("blackPoint")
    groupgroup.getParam("closeLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("whitePoint")
    groupgroup.getParam("farLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("gamma")
    groupgroup.getParam("gamma").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("Source_channels")
    groupgroup.getParam("Source_channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("channels")
    groupgroup.getParam("channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("disableNode")
    groupgroup.getParam("invertGradient").setAsAlias(param)
    del param
    param = groupgroupSwitch1.getParam("which")
    param.setExpression("thisGroup.zPicking.get()", False, 0)
    del param
    param = groupgroupSwitch1.getParam("p1_channels")
    param.setExpression("thisGroup.Source_channels.get()", False, 0)
    del param

    param = groupgroup.getParam("closeLimit")
    group.getParam("ZRemap_Depth_FrontcloseLimit").setAsAlias(param)
    del param
    param = groupgroup.getParam("farLimit")
    group.getParam("ZRemap_Depth_FrontfarLimit").setAsAlias(param)
    del param
    param = groupgroup.getParam("gamma")
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 0)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 1)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 2)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 3)
    del param

    # Start of node "Merge4_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2_2")
    lastNode.setLabel("Merge4_2_2")
    lastNode.setPosition(-732, 825)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2_2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge4_2_2"

    # Start of node "Dot7_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7_2_2")
    lastNode.setLabel("Dot7_2_2")
    lastNode.setPosition(-430, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7_2_2 = lastNode

    del lastNode
    # End of node "Dot7_2_2"

    # Start of node "Constant1_3"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1_3")
    lastNode.setLabel("Constant1_3")
    lastNode.setPosition(-1182, 353)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6667, 0, 0)
    groupConstant1_3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.4019778668880463, 0)
        del param

    del lastNode
    # End of node "Constant1_3"

    # Start of node "Merge1_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_3")
    lastNode.setLabel("Merge1_3")
    lastNode.setPosition(-1182, 560)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_3 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_3"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(-920, 679)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Preview_Red"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Preview_Red")
    lastNode.setLabel("Preview_Red")
    lastNode.setPosition(-732, 1186)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPreview_Red = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Preview_Red"

    # Start of node "Grade3_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3_2")
    lastNode.setLabel("Grade3_2")
    lastNode.setPosition(-1182, 791)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3_2 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.3, 0)
        param.setValue(0.3, 1)
        param.setValue(0.3, 2)
        param.setValue(0.3, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.88, 0)
        param.setValue(0.88, 1)
        param.setValue(0.88, 2)
        param.setValue(0.88, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3_2"

    # Start of node "Blur_Front"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_Front")
    lastNode.setLabel("Blur_Front")
    lastNode.setPosition(-732, 447)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_Front = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(10, 0)
        param.setValue(10, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("quadratic")
        del param

    param = lastNode.getParam("cropToFormat")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Blur_Front"

    # Start of node "Defocus_Front"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Defocus_Front")
    lastNode.setLabel("Defocus_Front")
    lastNode.setPosition(-732, 2838)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupDefocus_Front = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Defocus_Front"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(768, 2541)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(768, 2355)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(-687, 373)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Preview_Blue"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Preview_Blue")
    lastNode.setLabel("Preview_Blue")
    lastNode.setPosition(-79, 2521)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPreview_Blue = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Preview_Blue"

    # Start of node "Premult2_2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult2_2")
    lastNode.setLabel("Premult2_2")
    lastNode.setPosition(-79, 2452)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult2_2 = lastNode

    del lastNode
    # End of node "Premult2_2"

    # Start of node "Premult1_2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1_2")
    lastNode.setLabel("Premult1_2")
    lastNode.setPosition(-732, 1131)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1_2 = lastNode

    del lastNode
    # End of node "Premult1_2"

    # Start of node "Grade6"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade6")
    lastNode.setLabel("Grade6")
    lastNode.setPosition(181, 2849)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade6 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.059, 0)
        param.setValue(0.059, 1)
        param.setValue(0.059, 2)
        param.setValue(0.059, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1.25, 0)
        param.setValue(1.25, 1)
        param.setValue(1.25, 2)
        param.setValue(1.25, 3)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1.2, 0)
        param.setValue(1.2, 1)
        param.setValue(1.2, 2)
        param.setValue(1.2, 3)
        del param

    del lastNode
    # End of node "Grade6"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(-475, 90)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSource = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">adsd</font>")
        del param

    del lastNode
    # End of node "Source"

    # Start of node "Output3"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output3")
    lastNode.setPosition(-732, 4762)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput3 = lastNode

    del lastNode
    # End of node "Output3"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(-920, 362)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(226, 1672)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "zDepth"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("zDepth")
    lastNode.setLabel("zDepth")
    lastNode.setPosition(-965, 104)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupzDepth = lastNode

    del lastNode
    # End of node "zDepth"

    # Start of node "Dot1_6_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_6_2_2")
    lastNode.setLabel("Dot1_4_2_2")
    lastNode.setPosition(-38, 3595)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_6_2_2 = lastNode

    del lastNode
    # End of node "Dot1_6_2_2"

    # Start of node "Dot2_4_2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_4_2_3")
    lastNode.setLabel("Dot2_4_2_3")
    lastNode.setPosition(-38, 3789)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_4_2_3 = lastNode

    del lastNode
    # End of node "Dot2_4_2_3"

    # Start of node "Keyer1_3_2_3"
    lastNode = app.createNode("net.sf.openfx.KeyerPlugin", 1, group)
    lastNode.setScriptName("Keyer1_3_2_3")
    lastNode.setLabel("Keyer1_3_2_3")
    lastNode.setPosition(311, 3702)
    lastNode.setSize(104, 55)
    lastNode.setColor(0, 1, 0)
    groupKeyer1_3_2_3 = lastNode

    del lastNode
    # End of node "Keyer1_3_2_3"

    # Start of node "ErodeBlur_Back"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur_Back")
    lastNode.setLabel("ErodeBlur_Back")
    lastNode.setPosition(323, 3911)
    lastNode.setSize(80, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur_Back = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("cropToFormat")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "ErodeBlur_Back"

    # Start of node "Merge3_3_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3_3_3")
    lastNode.setLabel("Merge3_3_3")
    lastNode.setPosition(49, 3972)
    lastNode.setSize(104, 78)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3_3_3 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.295, 0)
        del param

    param = lastNode.getParam("processAllPlanes")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge3_3_3"

    # Start of node "Dot6_3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_3_2")
    lastNode.setLabel("Dot6_3_2")
    lastNode.setPosition(-38, 4004)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_3_2 = lastNode

    del lastNode
    # End of node "Dot6_3_2"

    # Start of node "Merge4_2_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2_3")
    lastNode.setLabel("Merge4_2_3")
    lastNode.setPosition(49, 3769)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2_3 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge4_2_3"

    # Start of node "Constant1_4"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1_4")
    lastNode.setLabel("Constant1_4")
    lastNode.setPosition(668, 3573)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1_4 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.4019778668880463, 0)
        del param

    del lastNode
    # End of node "Constant1_4"

    # Start of node "Merge1_4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_4")
    lastNode.setLabel("Merge1_4")
    lastNode.setPosition(668, 3767)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_4 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_4"

    # Start of node "Dot1_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_3")
    lastNode.setLabel("Dot1_3")
    lastNode.setPosition(356, 3787)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_3 = lastNode

    del lastNode
    # End of node "Dot1_3"

    # Start of node "Constant1_2_2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1_2_2")
    lastNode.setLabel("Constant1_2_2")
    lastNode.setPosition(896, 3583)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1_2_2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Constant1_2_2"

    # Start of node "Merge1_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2")
    lastNode.setLabel("Merge1_2_2")
    lastNode.setPosition(896, 3894)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1_2_2"

    # Start of node "Invert1_2"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1_2")
    lastNode.setLabel("Invert1_2")
    lastNode.setPosition(508, 3905)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1_2 = lastNode

    del lastNode
    # End of node "Invert1_2"

    # Start of node "Grade3_3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade3_3")
    lastNode.setLabel("Grade3_3")
    lastNode.setPosition(668, 3998)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade3_3 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(0.3, 0)
        param.setValue(0.3, 1)
        param.setValue(0.3, 2)
        param.setValue(0.3, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.88, 0)
        param.setValue(0.88, 1)
        param.setValue(0.88, 2)
        param.setValue(0.88, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade3_3"

    # Start of node "Blur_Defocus_Back"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur_Defocus_Back")
    lastNode.setLabel("Blur_Defocus_Back")
    lastNode.setPosition(49, 3575)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur_Defocus_Back = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(10, 0)
        param.setValue(10, 1)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("quadratic")
        del param

    param = lastNode.getParam("cropToFormat")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur_Defocus_Back"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(94, 4467)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(941, 3755)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "Dot4_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4_2")
    lastNode.setLabel("Dot4_2")
    lastNode.setPosition(713, 4238)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4_2 = lastNode

    del lastNode
    # End of node "Dot4_2"

    # Start of node "Premult2_2_2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult2_2_2")
    lastNode.setLabel("Premult2_2_2")
    lastNode.setPosition(49, 4115)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult2_2_2 = lastNode

    del lastNode
    # End of node "Premult2_2_2"

    # Start of node "Dot10_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10_2")
    lastNode.setLabel("Dot10_2")
    lastNode.setPosition(711, 3397)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10_2 = lastNode

    del lastNode
    # End of node "Dot10_2"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(1061, 3397)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1061, 1672)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "ZRemap2"
    lastNode = app.createNode("fr.inria.built-in.Group", 1, group)
    lastNode.setScriptName("ZRemap2")
    lastNode.setLabel("ZRemap_Back")
    lastNode.setPosition(311, 3584)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupZRemap2 = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(18, 0)
    param.setValue(18, 1)
    param.setValue(18, 2)
    param.setValue(18, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    param.setValue(30, 1)
    param.setValue(30, 2)
    param.setValue(30, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneStereoDisparityLeft")
    lastNode.channels = param
    del param

    param = lastNode.createDoubleParam("offset", "Offset")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-20, 0)
    param.setDisplayMaximum(40, 0)
    param.setDefaultValue(10, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.offset = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "ZRemap2"

    groupgroup = groupZRemap2
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createBooleanParam("zPicking", "Z Picking mode")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.zPicking = param
    del param

    param = lastNode.createColorParam("closeLimit", "Close Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(18, 0)
    param.setValue(18, 1)
    param.setValue(18, 2)
    param.setValue(18, 3)
    lastNode.closeLimit = param
    del param

    param = lastNode.createColorParam("farLimit", "Far Limit", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(100, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(100, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(100, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(100, 3)
    param.setDefaultValue(100, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("Define the Z value remapped to black.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    param.setValue(30, 1)
    param.setValue(30, 2)
    param.setValue(30, 3)
    lastNode.farLimit = param
    del param

    param = lastNode.createColorParam("gamma", "Gamma", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0.2, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0.2, 1)
    param.setDisplayMaximum(5, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0.2, 2)
    param.setDisplayMaximum(5, 2)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0.2, 3)
    param.setDisplayMaximum(5, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    param.setEnabled(False, 3)
    lastNode.gamma = param
    del param

    param = lastNode.createBooleanParam("invertGradient", "Invert Gradient")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.invertGradient = param
    del param

    param = lastNode.createChoiceParam("Source_channels", "Source Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Source_channels = param
    del param

    param = lastNode.createChoiceParam("channels", "Output Layer")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.set("uk.co.thefoundry.OfxImagePlaneStereoDisparityLeft")
    lastNode.channels = param
    del param

    param = lastNode.createDoubleParam("offset", "Offset")
    param.setMinimum(-100, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(-20, 0)
    param.setDisplayMaximum(40, 0)
    param.setDefaultValue(10, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.offset = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, groupgroup)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(726, 92)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupGrade1 = lastNode

    param = lastNode.getParam("blackPoint")
    if param is not None:
        param.setValue(18, 0)
        param.setValue(18, 1)
        param.setValue(18, 2)
        param.setValue(18, 3)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(18, 0)
        param.setValue(18, 1)
        param.setValue(18, 2)
        param.setValue(18, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, groupgroup)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(726, 230)
    lastNode.setSize(104, 52)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("channels")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneStereoDisparityLeft")
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(882, 496)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(882, -40)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, groupgroup)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(882, 381)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("p1_channels")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour")
        del param

    del lastNode
    # End of node "Switch1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupGrade1.connectInput(0, groupgroupInputSource)
    groupgroupInvert1.connectInput(0, groupgroupGrade1)
    groupgroupOutput1.connectInput(0, groupgroupSwitch1)
    groupgroupSwitch1.connectInput(0, groupgroupInvert1)
    groupgroupSwitch1.connectInput(1, groupgroupInputSource)

    param = groupgroupGrade1.getParam("blackPoint")
    groupgroup.getParam("closeLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("whitePoint")
    groupgroup.getParam("farLimit").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("gamma")
    groupgroup.getParam("gamma").setAsAlias(param)
    del param
    param = groupgroupGrade1.getParam("Source_channels")
    groupgroup.getParam("Source_channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("channels")
    groupgroup.getParam("channels").setAsAlias(param)
    del param
    param = groupgroupInvert1.getParam("disableNode")
    groupgroup.getParam("invertGradient").setAsAlias(param)
    del param
    param = groupgroupSwitch1.getParam("which")
    param.setExpression("thisGroup.zPicking.get()", False, 0)
    del param
    param = groupgroupSwitch1.getParam("p1_channels")
    param.setExpression("thisGroup.Source_channels.get()", False, 0)
    del param

    param = groupgroup.getParam("closeLimit")
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 0)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 1)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 2)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 3)
    del param
    param = groupgroup.getParam("farLimit")
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 0)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 1)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 2)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 3)
    del param
    param = groupgroup.getParam("gamma")
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 0, 0)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 1, 1)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 2, 2)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 3, 3)
    del param
    param = groupgroup.getParam("offset")
    group.getParam("ZRemap2offset").setAsAlias(param)
    del param

    # Start of node "Defocus_Back"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Defocus_Back")
    lastNode.setLabel("Defocus_Back")
    lastNode.setPosition(-732, 4447)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupDefocus_Back = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Defocus_Back"

    # Start of node "Preview_Back_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Preview_Back_2")
    lastNode.setLabel("Preview_Back")
    lastNode.setPosition(49, 4216)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPreview_Back_2 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Preview_Back_2"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(-687, 3595)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "Show_Defocus"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Show_Defocus")
    lastNode.setLabel("Show_Defocus")
    lastNode.setPosition(-732, 3038)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupShow_Defocus = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Show_Defocus"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(226, 1846)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "BACKGROUND_GAIN"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("BACKGROUND_GAIN")
    lastNode.setLabel("BACKGROUND GAIN")
    lastNode.setPosition(-221, 3275)
    lastNode.setSize(1454, 1260)
    lastNode.setColor(0.5098, 0.5098, 0.5098)
    groupBACKGROUND_GAIN = lastNode

    del lastNode
    # End of node "BACKGROUND_GAIN"

    # Start of node "PRINCIPAL_DEFOCUS"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("PRINCIPAL_DEFOCUS")
    lastNode.setLabel("PRINCIPAL DEFOCUS")
    lastNode.setPosition(-241, 1494)
    lastNode.setSize(1448, 1251)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupPRINCIPAL_DEFOCUS = lastNode

    del lastNode
    # End of node "PRINCIPAL_DEFOCUS"

    # Start of node "FRONT_DEFOCUS"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("FRONT_DEFOCUS")
    lastNode.setLabel("FRONT DEFOCUS")
    lastNode.setPosition(-1373, 260)
    lastNode.setSize(896, 1173)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupFRONT_DEFOCUS = lastNode

    del lastNode
    # End of node "FRONT_DEFOCUS"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(331, 3058)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(331, 1846)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(-426, 2666)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Now that all nodes are created we can connect them together, restore expressions
    groupDot1_6_2.connectInput(0, groupDot2_4_2_2)
    groupDot2_4_2.connectInput(0, groupDot1_6_2)
    groupKeyer1_3_2.connectInput(0, groupDot15)
    groupErodeBlur_Blue.connectInput(0, groupDot1)
    groupMerge3_3.connectInput(0, groupMerge4_2)
    groupMerge3_3.connectInput(1, groupDot6_3)
    groupMerge3_3.connectInput(2, groupErodeBlur_Blue)
    groupZRemap_Depth_OK.connectInput(0, groupDot10)
    groupDot6_3.connectInput(0, groupDot2_4_2)
    groupMerge4_2.connectInput(0, groupBlur_Blue)
    groupMerge4_2.connectInput(1, groupDot2_4_2)
    groupMerge4_2.connectInput(2, groupErodeBlur_Blue)
    groupConstant1.connectInput(0, groupDot10)
    groupMerge1.connectInput(1, groupConstant1)
    groupMerge1.connectInput(2, groupInvert1)
    groupDot1.connectInput(0, groupKeyer1_3_2)
    groupConstant1_2.connectInput(0, groupDot10)
    groupMerge1_2.connectInput(0, groupMerge1)
    groupMerge1_2.connectInput(1, groupDot3)
    groupMerge1_2.connectInput(2, groupInvert1)
    groupInvert1.connectInput(0, groupDot1)
    groupGrade3.connectInput(0, groupMerge1_2)
    groupBlur_Blue.connectInput(0, groupDot1_6_2)
    groupDot2.connectInput(0, groupPreview_Blue)
    groupDot3.connectInput(0, groupConstant1_2)
    groupDot2_4_2_2.connectInput(0, groupDot7_2_2)
    groupKeyer1_3_2_2.connectInput(0, groupZRemap_Depth_Front)
    groupErodeBlur_Red.connectInput(0, groupDot1_2)
    groupMerge3_3_2.connectInput(0, groupMerge4_2_2)
    groupMerge3_3_2.connectInput(1, groupDot2_4_2_2)
    groupMerge3_3_2.connectInput(2, groupErodeBlur_Red)
    groupZRemap_Depth_Front.connectInput(0, groupDot8)
    groupMerge4_2_2.connectInput(0, groupBlur_Front)
    groupMerge4_2_2.connectInput(1, groupDot2_4_2_2)
    groupMerge4_2_2.connectInput(2, groupErodeBlur_Red)
    groupDot7_2_2.connectInput(0, groupSource)
    groupConstant1_3.connectInput(0, groupDot8)
    groupMerge1_3.connectInput(1, groupConstant1_3)
    groupMerge1_3.connectInput(2, groupDot1_2)
    groupDot1_2.connectInput(0, groupKeyer1_3_2_2)
    groupPreview_Red.connectInput(0, groupPremult1_2)
    groupPreview_Red.connectInput(1, groupGrade3_2)
    groupGrade3_2.connectInput(0, groupMerge1_3)
    groupBlur_Front.connectInput(0, groupDot7)
    groupDefocus_Front.connectInput(0, groupDot16)
    groupDefocus_Front.connectInput(1, groupPreview_Red)
    groupDefocus_Front.connectInput(2, groupGrade6)
    groupDot4.connectInput(0, groupDot5)
    groupDot5.connectInput(0, groupGrade3)
    groupDot7.connectInput(0, groupDot7_2_2)
    groupPreview_Blue.connectInput(0, groupPremult2_2)
    groupPreview_Blue.connectInput(1, groupDot4)
    groupPremult2_2.connectInput(0, groupMerge3_3)
    groupPremult1_2.connectInput(0, groupMerge3_3_2)
    groupGrade6.connectInput(0, groupErodeBlur_Blue)
    groupOutput3.connectInput(0, groupDefocus_Back)
    groupDot8.connectInput(0, groupzDepth)
    groupDot10.connectInput(0, groupDot8)
    groupDot1_6_2_2.connectInput(0, groupDot14)
    groupDot2_4_2_3.connectInput(0, groupDot1_6_2_2)
    groupKeyer1_3_2_3.connectInput(0, groupZRemap2)
    groupErodeBlur_Back.connectInput(0, groupDot1_3)
    groupMerge3_3_3.connectInput(0, groupMerge4_2_3)
    groupMerge3_3_3.connectInput(1, groupDot6_3_2)
    groupMerge3_3_3.connectInput(2, groupErodeBlur_Back)
    groupDot6_3_2.connectInput(0, groupDot2_4_2_3)
    groupMerge4_2_3.connectInput(0, groupBlur_Defocus_Back)
    groupMerge4_2_3.connectInput(1, groupDot2_4_2_3)
    groupMerge4_2_3.connectInput(2, groupErodeBlur_Back)
    groupConstant1_4.connectInput(0, groupDot10_2)
    groupMerge1_4.connectInput(1, groupConstant1_4)
    groupMerge1_4.connectInput(2, groupInvert1_2)
    groupDot1_3.connectInput(0, groupKeyer1_3_2_3)
    groupConstant1_2_2.connectInput(0, groupDot10_2)
    groupMerge1_2_2.connectInput(0, groupMerge1_4)
    groupMerge1_2_2.connectInput(1, groupDot3_2)
    groupMerge1_2_2.connectInput(2, groupInvert1_2)
    groupInvert1_2.connectInput(0, groupDot1_3)
    groupGrade3_3.connectInput(0, groupMerge1_2_2)
    groupBlur_Defocus_Back.connectInput(0, groupDot1_6_2_2)
    groupDot2_2.connectInput(0, groupPreview_Back_2)
    groupDot3_2.connectInput(0, groupConstant1_2_2)
    groupDot4_2.connectInput(0, groupGrade3_3)
    groupPremult2_2_2.connectInput(0, groupMerge3_3_3)
    groupDot10_2.connectInput(0, groupDot11)
    groupDot11.connectInput(0, groupDot12)
    groupDot12.connectInput(0, groupDot10)
    groupZRemap2.connectInput(0, groupDot10_2)
    groupDefocus_Back.connectInput(0, groupDot14)
    groupDefocus_Back.connectInput(1, groupDot2_2)
    groupPreview_Back_2.connectInput(0, groupPremult2_2_2)
    groupPreview_Back_2.connectInput(1, groupDot4_2)
    groupDot14.connectInput(0, groupShow_Defocus)
    groupShow_Defocus.connectInput(0, groupDefocus_Front)
    groupShow_Defocus.connectInput(1, groupDot9)
    groupDot15.connectInput(0, groupZRemap_Depth_OK)
    groupDot9.connectInput(0, groupDot13)
    groupDot13.connectInput(0, groupDot15)
    groupDot16.connectInput(0, groupDot2)

    param = groupErodeBlur_Blue.getParam("size")
    group.getParam("ErodeBlur_Bluesize").setAsAlias(param)
    del param
    param = groupErodeBlur_Blue.getParam("blur")
    group.getParam("ErodeBlur_Blueblur").setAsAlias(param)
    del param
    param = groupZRemap_Depth_OK.getParam("closeLimit")
    group.getParam("ZRemap_Depth_OKcloseLimit").setAsAlias(param)
    del param
    param = groupZRemap_Depth_OK.getParam("farLimit")
    group.getParam("ZRemap_Depth_OKfarLimit").setAsAlias(param)
    del param
    param = groupZRemap_Depth_OK.getParam("gamma")
    group.getParam("ZRemap_Depth_OKgamma").setAsAlias(param)
    del param
    param = groupBlur_Blue.getParam("size")
    group.getParam("Blur_Bluesize").setAsAlias(param)
    del param
    param = groupBlur_Blue.getParam("boundary")
    group.getParam("Blur_Blueboundary").setAsAlias(param)
    del param
    param = groupBlur_Blue.getParam("filter")
    group.getParam("Blur_Bluefilter").setAsAlias(param)
    del param
    param = groupErodeBlur_Red.getParam("size")
    group.getParam("ErodeBlur_Redsize").setAsAlias(param)
    del param
    param = groupErodeBlur_Red.getParam("blur")
    group.getParam("ErodeBlur_Redblur").setAsAlias(param)
    del param
    param = groupZRemap_Depth_Front.getParam("closeLimit")
    group.getParam("ZRemap_Depth_FrontcloseLimit").setAsAlias(param)
    del param
    param = groupZRemap_Depth_Front.getParam("farLimit")
    group.getParam("ZRemap_Depth_FrontfarLimit").setAsAlias(param)
    del param
    param = groupZRemap_Depth_Front.getParam("gamma")
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 0)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 1)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 2)
    param.setExpression("ZRemap_Depth_OK.gamma.get()[dimension]", False, 3)
    del param
    param = groupPreview_Red.getParam("disableNode")
    group.getParam("Preview_ReddisableNode").setAsAlias(param)
    del param
    param = groupBlur_Front.getParam("size")
    group.getParam("Blur_Frontsize").setAsAlias(param)
    del param
    param = groupBlur_Front.getParam("filter")
    param.slaveTo(groupBlur_Blue.getParam("filter"), 0, 0)
    del param
    param = groupDefocus_Front.getParam("disableNode")
    group.getParam("Defocus_FrontdisableNode").setAsAlias(param)
    del param
    param = groupPreview_Blue.getParam("disableNode")
    group.getParam("Reference_Color").setAsAlias(param)
    del param
    param = groupErodeBlur_Back.getParam("size")
    group.getParam("ErodeBlur_Backsize").setAsAlias(param)
    del param
    param = groupErodeBlur_Back.getParam("blur")
    group.getParam("ErodeBlur_Backblur").setAsAlias(param)
    del param
    param = groupBlur_Defocus_Back.getParam("size")
    group.getParam("Blur_Defocus_Backsize").setAsAlias(param)
    del param
    param = groupZRemap2.getParam("closeLimit")
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 0)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 1)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 2)
    param.setExpression("ZRemap2.farLimit.get()[dimension] - 12", False, 3)
    del param
    param = groupZRemap2.getParam("farLimit")
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 0)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 1)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 2)
    param.setExpression("ZRemap_Depth_OK.farLimit.get()[dimension] + ZRemap2.offset.get();", False, 3)
    del param
    param = groupZRemap2.getParam("gamma")
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 0, 0)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 1, 1)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 2, 2)
    param.slaveTo(groupZRemap_Depth_OK.getParam("gamma"), 3, 3)
    del param
    param = groupZRemap2.getParam("offset")
    group.getParam("ZRemap2offset").setAsAlias(param)
    del param
    param = groupDefocus_Back.getParam("disableNode")
    group.getParam("Defocus_BackdisableNode").setAsAlias(param)
    del param
    param = groupPreview_Back_2.getParam("disableNode")
    group.getParam("Preview_Back_2disableNode").setAsAlias(param)
    del param
    param = groupShow_Defocus.getParam("disableNode")
    group.getParam("Show_DefocusdisableNode").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["zDefocusExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
