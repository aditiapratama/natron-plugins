# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named lp_DespotExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from lp_DespotExt import *
except ImportError:
    pass

def getPluginID():
    return "lp_Despot"

def getLabel():
    return "lp_Despot"

def getVersion():
    return 2

def getIconPath():
    return "lp_Despot.png"

def getGrouping():
    return "Filter"

def getPluginDescription():
    return "Eliminates black and white spots in channels. Can harm edge-detail.\n\nINPUTS\nimg = Connect the image (or alpha) you want to despot\nmask = A connected alpha will mask the operation, leaving the original alpha of the img-input\n\nHOW TO USE IT\nJust connect any source you want to despot in any way. Usually this only used on alpha channels, therefore it will only work on that one by default; a positive value will despot white pixels, a negative value is targeted for black pixels.\nStill, you can also activate the RGB channels in case you want to utilize it for some retouching or beauty work.\nBecause of the nature of this tool, it can easily harm edge-detail, so use it with caution and don\'t over use :)\n\nHOW DOES IT WORK\nEssentially the tool erodes and afterwards dilates a channel by the same value (and vice versa, depending if you despot for white or black). This will maintain the same shape overall, but get rid of fine detail; spots as well as edges, so be careful."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "Controls")
    param = lastNode.createBooleanParam("Erode1NatronOfxParamProcessR", "R")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Process red component. It\'s not recommended to process RGB and A at the same time.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(False)
    lastNode.Erode1NatronOfxParamProcessR = param
    del param

    param = lastNode.createBooleanParam("Erode1NatronOfxParamProcessG", "G")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Process green component. It\'s not recommended to process RGB and A at the same time.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Erode1NatronOfxParamProcessG = param
    del param

    param = lastNode.createBooleanParam("Erode1NatronOfxParamProcessB", "B")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Process blue component. It\'s not recommended to process RGB and A at the same time.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Erode1NatronOfxParamProcessB = param
    del param

    param = lastNode.createBooleanParam("Erode1NatronOfxParamProcessA", "A")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Process alpha component. It\'s not recommended to process RGB and A at the same time.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Erode1NatronOfxParamProcessA = param
    del param

    param = lastNode.createInt2DParam("Erode1size", "despot")
    param.setMinimum(-1000, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(-25, 0)
    param.setDisplayMaximum(25, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1000, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(-25, 1)
    param.setDisplayMaximum(25, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Negative values despot for black, positive values despot for white")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Erode1size = param
    del param

    param = lastNode.createChoiceParam("filterselect", "filter")
    entries = [ ("default", ""),
    ("round", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Sets the filter for the operation.\n\n\'default\' is the default filter of the Erode-Node. No idea what that is; Box? Gaussian? Anyways, it\'s that.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.filterselect = param
    del param

    param = lastNode.createSeparatorParam("sep01", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createDouble2DParam("Blur1size", "blur")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Blurs the result of despot operation")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blur1size = param
    del param

    param = lastNode.createChoiceParam("Blur1filter", "blur filter")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Blur1filter = param
    del param

    param = lastNode.createSeparatorParam("sep02", " ")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp(" ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createBooleanParam("invmask", "invert mask")

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("Inverts the connected mask.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.invmask = param
    del param

    param = lastNode.createStringParam("copyright", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setHelp("lp_Despot v1.0\n(c) 2016 by lucas pfaff")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.copyright = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(1393, 787)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "img"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("img")
    lastNode.setLabel("img")
    lastNode.setPosition(1393, -116)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupimg = lastNode

    del lastNode
    # End of node "img"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(1393, 120)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "Erode1_2"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1_2")
    lastNode.setLabel("Erode1_2")
    lastNode.setPosition(1393, 288)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("expandRoD")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1_2"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1438, 26)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(803, 214)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmask = lastNode

    param = lastNode.getParam("optional")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("isMask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mask"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1393, 578)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("copy")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("copy")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(849, 604)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(1054, 424)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    del lastNode
    # End of node "Constant1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1248, 26)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1248, 315)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1099, 315)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(803, 412)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("under")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(803, 520)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "ErodeBlur1"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur1")
    lastNode.setLabel("ErodeBlur1")
    lastNode.setPosition(1588, 120)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "ErodeBlur1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(1621, 26)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "ErodeBlur1_2"
    lastNode = app.createNode("eu.cimg.ErodeBlur", 4, group)
    lastNode.setScriptName("ErodeBlur1_2")
    lastNode.setLabel("ErodeBlur1_2")
    lastNode.setPosition(1588, 285)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErodeBlur1_2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "ErodeBlur1_2"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(1393, 371)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(1393, 492)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Blur1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge1)
    groupErode1.connectInput(0, groupDot2)
    groupErode1_2.connectInput(0, groupErode1)
    groupDot2.connectInput(0, groupimg)
    groupMerge1.connectInput(0, groupBlur1)
    groupMerge1.connectInput(1, groupDot4)
    groupMerge1.connectInput(2, groupDot1)
    groupDot1.connectInput(0, groupInvert1)
    groupConstant1.connectInput(0, groupDot5)
    groupDot3.connectInput(0, groupDot2)
    groupDot4.connectInput(0, groupDot3)
    groupDot5.connectInput(0, groupDot4)
    groupMerge2.connectInput(0, groupmask)
    groupMerge2.connectInput(1, groupConstant1)
    groupInvert1.connectInput(0, groupMerge2)
    groupErodeBlur1.connectInput(0, groupDot6)
    groupDot6.connectInput(0, groupDot2)
    groupErodeBlur1_2.connectInput(0, groupErodeBlur1)
    groupSwitch1.connectInput(0, groupErode1_2)
    groupSwitch1.connectInput(1, groupErodeBlur1_2)
    groupBlur1.connectInput(0, groupSwitch1)

    param = groupErode1.getParam("NatronOfxParamProcessR")
    group.getParam("Erode1NatronOfxParamProcessR").setAsAlias(param)
    del param
    param = groupErode1.getParam("NatronOfxParamProcessG")
    group.getParam("Erode1NatronOfxParamProcessG").setAsAlias(param)
    del param
    param = groupErode1.getParam("NatronOfxParamProcessB")
    group.getParam("Erode1NatronOfxParamProcessB").setAsAlias(param)
    del param
    param = groupErode1.getParam("NatronOfxParamProcessA")
    group.getParam("Erode1NatronOfxParamProcessA").setAsAlias(param)
    del param
    param = groupErode1.getParam("size")
    group.getParam("Erode1size").setAsAlias(param)
    del param
    param = groupErode1_2.getParam("NatronOfxParamProcessR")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessR"), 0, 0)
    del param
    param = groupErode1_2.getParam("NatronOfxParamProcessG")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessG"), 0, 0)
    del param
    param = groupErode1_2.getParam("NatronOfxParamProcessB")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessB"), 0, 0)
    del param
    param = groupErode1_2.getParam("NatronOfxParamProcessA")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessA"), 0, 0)
    del param
    param = groupErode1_2.getParam("size")
    param.setExpression("thisGroup.Erode1.size.get()[dimension]*-1", False, 0)
    param.setExpression("thisGroup.Erode1.size.get()[dimension]*-1", False, 1)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("1-thisGroup.invmask.get()", False, 0)
    del param
    param = groupErodeBlur1.getParam("NatronOfxParamProcessR")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessR"), 0, 0)
    del param
    param = groupErodeBlur1.getParam("NatronOfxParamProcessG")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessG"), 0, 0)
    del param
    param = groupErodeBlur1.getParam("NatronOfxParamProcessB")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessB"), 0, 0)
    del param
    param = groupErodeBlur1.getParam("NatronOfxParamProcessA")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessA"), 0, 0)
    del param
    param = groupErodeBlur1.getParam("size")
    param.setExpression("Erode1.size.get()[dimension]", False, 0)
    del param
    param = groupErodeBlur1_2.getParam("NatronOfxParamProcessR")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessR"), 0, 0)
    del param
    param = groupErodeBlur1_2.getParam("NatronOfxParamProcessG")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessG"), 0, 0)
    del param
    param = groupErodeBlur1_2.getParam("NatronOfxParamProcessB")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessB"), 0, 0)
    del param
    param = groupErodeBlur1_2.getParam("NatronOfxParamProcessA")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessA"), 0, 0)
    del param
    param = groupErodeBlur1_2.getParam("size")
    param.setExpression("Erode1.size.get()[dimension]*-1", False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.filterselect.get()", False, 0)
    del param
    param = groupBlur1.getParam("NatronOfxParamProcessR")
    param.slaveTo(groupErodeBlur1_2.getParam("NatronOfxParamProcessR"), 0, 0)
    del param
    param = groupBlur1.getParam("NatronOfxParamProcessG")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessG"), 0, 0)
    del param
    param = groupBlur1.getParam("NatronOfxParamProcessB")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessB"), 0, 0)
    del param
    param = groupBlur1.getParam("NatronOfxParamProcessA")
    param.slaveTo(groupErode1.getParam("NatronOfxParamProcessA"), 0, 0)
    del param
    param = groupBlur1.getParam("size")
    group.getParam("Blur1size").setAsAlias(param)
    del param
    param = groupBlur1.getParam("filter")
    group.getParam("Blur1filter").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["lp_DespotExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
