# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named PM_CameraExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from PM_CameraExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.PM_Camera"

def getLabel():
    return "PM_Camera"

def getVersion():
    return 1

def getIconPath():
    return "PM_Camera.png"

def getGrouping():
    return "Community/Transform"

def getPluginDescription():
    return "Set a 3D camera to be used with PM_Card3D, \n\nthe main use is to import .chan files.\n\nat that time, only the XYZ rotation order is supported (this is blender .chan exporter default)\nAlso , the importer is set to Y up. \n\nIf you use blender , just export the camera as a .chan file, and you should be good.\n\nIf your camera as a different sensor size than the default (32) , you should change the sensor size value of the Pyplug.\"\n"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("PM_Camera.cam_load_chan")
        del param


    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createSeparatorParam("sepa", "chan importer")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sepa = param
    del param

    param = lastNode.createFileParam("chan", "chan file")
    param.setSequenceEnabled(False)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("select a .chan file to import")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.chan = param
    del param

    param = lastNode.createButtonParam("import_chan_file", "import Chan File")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.import_chan_file = param
    del param

    param = lastNode.createSeparatorParam("sep", "Camera")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep = param
    del param

    param = lastNode.createIntParam("sensor", "Sensor X")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(65, 0)
    param.setDefaultValue(32, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("the width of the camera sensor in mm, as this information is not contained in the chan file, you must enter it by hand.\nBlender default is 32")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.sensor = param
    del param

    param = lastNode.createDoubleParam("fov", "FOV")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(35, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("the vertical field of view of the camera in degree.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(28, 0)
    lastNode.fov = param
    del param

    lastNode.cam_trans = lastNode.createPageParam("cam_trans", "Transforms")
    param = lastNode.createSeparatorParam("sepd", "Location")

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sepd = param
    del param

    param = lastNode.createDoubleParam("locx", "Loc X")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.locx = param
    del param

    param = lastNode.createDoubleParam("locy", "Loc Y")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.locy = param
    del param

    param = lastNode.createDoubleParam("locz", "Loc Z")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-10, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.locz = param
    del param

    param = lastNode.createSeparatorParam("sepb", "Rotation")

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sepb = param
    del param

    param = lastNode.createDoubleParam("rotx", "Rot X")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("X rotation of the camera in degree")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rotx = param
    del param

    param = lastNode.createDoubleParam("roty", "Rot Y")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("Y rotation of the camera in degree")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.roty = param
    del param

    param = lastNode.createDoubleParam("rotz", "Rot Z")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.cam_trans.addParam(param)

    # Set param properties
    param.setHelp("Z rotation of the camera in degree")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rotz = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'cam_trans', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Cam"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Cam")
    lastNode.setLabel("Cam")
    lastNode.setPosition(591, 289)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupCam = lastNode

    param = lastNode.getParam("paramValueVec30")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("paramValueVec31")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(28, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(32, 0)
        del param

    param = lastNode.getParam("imageShaderPresetDir")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("uniform float focal = 13.685547; // field of view\nuniform float sensor = 32.0 ;\nuniform vec3 cam_loc = vec3(0.0);\nuniform vec3 cam_rot = vec3(0.0);\n\nfloat M_PI = 3.14159265359 ;\n//float M_PI = 3.14159265358979323846264338327950288419;\n\nmat4 translate( float x, float y, float z )\n {\n    return mat4(\n         1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n }\nfloat deg2rad(float deg)\n { return deg * M_PI / 180.0; }\n\nmat4 mat3to4(mat3 m){\n\treturn mat4(\n\t\tm[0][0],m[0][1],m[0][2],0,\n\t\tm[1][0],m[1][1],m[1][2],0,\n\t\tm[2][0],m[2][1],m[2][2],0,\n\t\t0,0,0,1);}\nmat3 rotx(float x){\n\treturn mat3 (\n\t\t1,     0,      0,\n\t\t0, cos(x), sin(x),\n\t\t0,-sin(x), cos(x));}\nmat3 roty(float y){\n\treturn mat3 (\n\t\tcos(y), 0,-sin(y),\n\t\t    0,  1,     0,\n\t\tsin(y), 0, cos(y));}\nmat3 rotz(float z){\n\t\treturn mat3 (\n\t   cos(z),sin(z),0,\n\t\t-sin(z),cos(z),0,\n\t    \t 0,     0, 1);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n    mat3 rx=rotx(deg2rad(cam_rot.x));\n    mat3 ry=roty(deg2rad(cam_rot.y));\n    mat3 rz=rotz(deg2rad(cam_rot.z));\n    mat4 crot = mat3to4(rz*ry*rx); //ZYX (work even if we import XYZ rotation order (don\'t know why ...))\n\n\t\tmat4 cloc=translate( cam_loc.x, cam_loc.y, cam_loc.z );\n\n\t\tmat4 cm = cloc*crot; // camera to world\n\n    float fov = tan(deg2rad(focal)*0.5) ;\n\t\tfloat sensor_offset = (-2.66666667*12)/sensor;\n\n\t\tvec2 p = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n\t\tvec4 inf = texture2D( iChannel0, p );\n\t\tvec2 shift=vec2(0,0);\n\t\tvec4 foc=vec4(fov,sensor_offset,shift.xy);\n\t\tinf=cm[0];\n\t\tif (p.x > 0.5) {inf=cm[1];}\n\t\tif (p.y>0.35){\n\t\t\tinf=cm[2];\n\t\tif (p.x > 0.5) {inf=cm[3];};}\n\t\tif (p.y>0.70){inf=foc;}\n\t\tfragColor = vec4(inf);\n }\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("Nearest")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video 640x480")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("cam_loc")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("cam_loc")
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("cam_rot")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("cam_rot")
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("focal")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("focal")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(13.68555, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("sensor")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("sensor")
        del param

    param = lastNode.getParam("paramDefaultFloat3")
    if param is not None:
        param.setValue(32, 0)
        del param

    param = lastNode.getParam("enableGPU")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Cam"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(579, 429)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(579, 160)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("Size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video 640x480")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(32, 0)
        param.setValue(40, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        del param

    del lastNode
    # End of node "Constant1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupCam.connectInput(0, groupConstant1)
    groupOutput1.connectInput(0, groupCam)

    param = groupCam.getParam("paramValueVec30")
    param.setExpression("thisGroup.locx.get()", False, 0)
    param.setExpression("thisGroup.locy.get()", False, 1)
    param.setExpression("thisGroup.locz.get()", False, 2)
    del param
    param = groupCam.getParam("paramValueVec31")
    param.setExpression("thisGroup.rotx.get()", False, 0)
    param.setExpression("thisGroup.roty.get()", False, 1)
    param.setExpression("thisGroup.rotz.get()", False, 2)
    del param
    param = groupCam.getParam("paramValueFloat2")
    param.setExpression("thisGroup.fov.get()", False, 0)
    del param
    param = groupCam.getParam("paramValueFloat3")
    param.setExpression("thisGroup.sensor.get()", False, 0)
    del param

    try:
        extModule = sys.modules["PM_CameraExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
