# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Crop_NExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Crop_NExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Crop_N"

def getLabel():
    return "Crop_N"

def getVersion():
    return 1

def getIconPath():
    return "Crop_N.png"

def getGrouping():
    return "Community/Transform"

def getPluginDescription():
    return "Crop node similar to Nuke's one."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("Crop_N", "Crop_N")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Crop_N = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createSeparatorParam("line06", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line06 = param
    del param

    param = lastNode.createDouble2DParam("Crop1bottomLeft", "Bottom Left")
    param.setDisplayMinimum(-10000, 0)
    param.setDisplayMaximum(10000, 0)
    param.setDisplayMinimum(-10000, 1)
    param.setDisplayMaximum(10000, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Crop1bottomLeft = param
    del param

    param = lastNode.createDouble2DParam("Crop1size", "Size")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10000, 0)
    param.setDefaultValue(320, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(10000, 1)
    param.setDefaultValue(240, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Crop1size = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createDoubleParam("Crop1softness", "Softness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Crop1softness = param
    del param

    param = lastNode.createBooleanParam("Crop1reformat", "Reformat")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Crop1reformat = param
    del param

    param = lastNode.createBooleanParam("Crop1intersect", "Intersect")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Crop1intersect = param
    del param

    param = lastNode.createBooleanParam("Crop1blackOutside", "Black Outside")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Crop1blackOutside = param
    del param

    param = lastNode.createChoiceParam("Reformat_INfilter", "Filter")
    entries = [ ("impulse", "(nearest neighbor / box) Use original values."),
    ("box", "Integrate the source image over the bounding box of the back-transformed pixel."),
    ("bilinear", "(tent / triangle) Bilinear interpolation between original values."),
    ("cubic", "(cubic spline) Some smoothing."),
    ("keys", "(Catmull-Rom / Hermite spline) Some smoothing, plus minor sharpening (*)."),
    ("simon", "Some smoothing, plus medium sharpening (*)."),
    ("rifman", "Some smoothing, plus significant sharpening (*)."),
    ("mitchell", "Some smoothing, plus blurring to hide pixelation (*+)."),
    ("parzen", "(cubic B-spline) Greatest smoothing of all filters (+)."),
    ("notch", "Flat smoothing (which tends to hide moire\' patterns) (+).")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Filtering algorithm - some filters may produce values outside of the initial range (*) or modify the values even if there is no movement (+).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Reformat_INfilter = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("Name", "Crop_N")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Name = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createSeparatorParam("line03", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.line03 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createSeparatorParam("FF", "(Fabrice Fernandez - 2017)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FF = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "rgba"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("rgba")
    lastNode.setLabel("rgba")
    lastNode.setPosition(480, 52)
    lastNode.setSize(80, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouprgba = lastNode

    del lastNode
    # End of node "rgba"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(480, 257)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(320, 0)
        param.setValue(240, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "Reformat1"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat1")
    lastNode.setLabel("Reformat")
    lastNode.setPosition(480, 425)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat1 = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(320, 0)
        param.setValue(240, 1)
        del param

    param = lastNode.getParam("resize")
    if param is not None:
        param.set("distort")
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("impulse")
        del param

    del lastNode
    # End of node "Reformat1"

    # Start of node "Blur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur")
    lastNode.setLabel("Blur")
    lastNode.setPosition(480, 156)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(480, 543)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(478, 337)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.65625, 0)
        param.setValue(1.3375, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("impulse")
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupCrop1.connectInput(0, groupBlur)
    groupReformat1.connectInput(0, groupTransform1)
    groupBlur.connectInput(0, grouprgba)
    groupOutput1.connectInput(0, groupReformat1)
    groupTransform1.connectInput(0, groupCrop1)

    param = groupCrop1.getParam("bottomLeft")
    group.getParam("Crop1bottomLeft").setAsAlias(param)
    del param
    param = groupCrop1.getParam("size")
    group.getParam("Crop1size").setAsAlias(param)
    del param
    param = groupCrop1.getParam("softness")
    group.getParam("Crop1softness").setAsAlias(param)
    del param
    param = groupCrop1.getParam("reformat")
    group.getParam("Crop1reformat").setAsAlias(param)
    del param
    param = groupCrop1.getParam("intersect")
    group.getParam("Crop1intersect").setAsAlias(param)
    del param
    param = groupCrop1.getParam("blackOutside")
    group.getParam("Crop1blackOutside").setAsAlias(param)
    del param
    param = groupReformat1.getParam("boxSize")
    param.setExpression("rod = Crop1.getRegionOfDefinition(frame,view)\nret = rod.width()", True, 0)
    param.setExpression("rod = Crop1.getRegionOfDefinition(frame,view)\nret = rod.height()", True, 1)
    del param
    param = groupTransform1.getParam("translate")
    param.setExpression("ret = -Transform1.center.get()[0]", False, 0)
    param.setExpression("ret = -Transform1.center.get()[1]", False, 1)
    del param
    param = groupTransform1.getParam("scale")
    param.setExpression("rod1 = Blur.getRegionOfDefinition(frame,view)\nvalue1 = rod1.width()\nrod2 = Crop1.getRegionOfDefinition(frame,view)\nvalue2 = rod2.width()\nret = value1/value2", True, 0)
    param.setExpression("rod1 = Blur.getRegionOfDefinition(frame,view)\nvalue1 = rod1.height()\nrod2 = Crop1.getRegionOfDefinition(frame,view)\nvalue2 = rod2.height()\nret = value1/value2", True, 1)
    del param
    param = groupTransform1.getParam("center")
    param.setExpression("ret = Crop1.bottomLeft.get()[0]", False, 0)
    param.setExpression("ret = Crop1.bottomLeft.get()[1]", False, 1)
    del param
    param = groupTransform1.getParam("filter")
    param.slaveTo(groupReformat1.getParam("filter"), 0, 0)
    del param

    try:
        extModule = sys.modules["Crop_NExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
