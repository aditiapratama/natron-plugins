# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named y_bilat_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from y_bilat_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.y_bilat_GL"

def getLabel():
    return "y_bilat_GL"

def getVersion():
    return 1.0

def getIconPath():
    return "y_bilat_GL.png"

def getGrouping():
    return "Community/GLSL/Blur"

def getPluginDescription():
    return "A bilateral filter, with a few more options, and the abiltiy to intake a mask."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(1, 0.5765, 0.3333)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("SETUP", "Setup")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.SETUP = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createIntParam("pass3paramValueInt0", "Samples : ")
    param.setMinimum(1, 0)
    param.setMaximum(50, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(10, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass3paramValueInt0 = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createDoubleParam("pass3paramValueFloat1", "Strength : ")
    param.setMinimum(1, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass3paramValueFloat1 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createIntParam("pass3paramValueInt2", "Detail : ")
    param.setMinimum(1, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass3paramValueInt2 = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("OPTIONS", "Options")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OPTIONS = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createChoiceParam("colorspaceChoice", "Colorspace : ")
    entries = [ ("Rec 709", ""),
    ("sRGB", ""),
    ("Linear", ""),
    ("Gamma 2.2", ""),
    ("Gamma 1.8", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colorspaceChoice = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "y_bilat_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE103", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE103 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4956, 5320)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(5128, 4609)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Source_2"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source_2")
    lastNode.setLabel("Mask")
    lastNode.setPosition(5265, 4610)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupSource_2 = lastNode

    del lastNode
    # End of node "Source_2"

    # Start of node "pass1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass1")
    lastNode.setLabel("pass1")
    lastNode.setPosition(5128, 4836)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass1 = lastNode

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_bilat pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_bilat for Autodesk Flame\n\n\n// iChannel0: Front,filter=linear,wrap=repeat\n// iChannel1: Matte,filter=nearest,wrap=clamp\n// BBox: iChannel0\n\n\n\n#define luma(col) dot(col, vec3(0.2126, 0.7152, 0.0722))\n#define PI 3.141592653589793238462643383279502884197969\n\n\nuniform float ratio;\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\n\nuniform int i_colorspace = 0; // Colorspace : (Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).), min=0, max=4\n\nvec3 from_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n         col.r = pow((col.r +.055)/ 1.055, 2.4);\n    }\n\n    if (col.g >= 0.0) {\n         col.g = pow((col.g +.055)/ 1.055, 2.4);\n    }\n\n    if (col.b >= 0.0) {\n         col.b = pow((col.b +.055)/ 1.055, 2.4);\n    }\n\n    return col;\n}\n\nvec3 from_rec709(vec3 col)\n{\n    if (col.r < .081) {\n         col.r /= 4.5;\n    } else {\n         col.r = pow((col.r +.099)/ 1.099, 1.0 / .45);\n    }\n\n    if (col.g < .081) {\n         col.g /= 4.5;\n    } else {\n         col.g = pow((col.g +.099)/ 1.099, 1.0 / .45);\n    }\n\n    if (col.b < .081) {\n         col.b /= 4.5;\n    } else {\n         col.b = pow((col.b +.099)/ 1.099, 1.0 / .45);\n    }\n\n    return col;\n}\n\nvec3 to_rec709(vec3 col)\n{\n    if (col.r < .018) {\n         col.r *= 4.5;\n    } else if (col.r >= 0.0) {\n         col.r = (1.099 * pow(col.r, .45)) - .099;\n    }\n\n    if (col.g < .018) {\n         col.g *= 4.5;\n    } else if (col.g >= 0.0) {\n         col.g = (1.099 * pow(col.g, .45)) - .099;\n    }\n\n    if (col.b < .018) {\n         col.b *= 4.5;\n    } else if (col.b >= 0.0) {\n         col.b = (1.099 * pow(col.b, .45)) - .099;\n    }\n\n\n    return col;\n}\n\nvec3 to_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n         col.r = (1.055 * pow(col.r, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.g >= 0.0) {\n         col.g = (1.055 * pow(col.g, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.b >= 0.0) {\n         col.b = (1.055 * pow(col.b, 1.0 / 2.4)) - .055;\n    }\n\n    return col;\n}\n\nvec3 adjust_gamma(vec3 col, float gamma)\n{\n    col.r = pow(col.r, gamma);\n    col.g = pow(col.g, gamma);\n    col.b = pow(col.b, gamma);\n\n    return col;\n}\n\nvec3 do_colorspace(vec3 front, int op)\n{\n    if (op == 0)\n    {\n        if (i_colorspace == 0) {\n            front = from_rec709(front);\n        } else if (i_colorspace == 1) {\n            front = from_sRGB(front);\n        } else if (i_colorspace == 2) {\n            //linear\n        } else if (i_colorspace == 3) {\n            front = adjust_gamma(front, 2.2);\n        } else if (i_colorspace == 4) {\n            front = adjust_gamma(front, 1.8);\n        }\n    }\n    else if (op == 1)\n    {\n        if (i_colorspace == 0) {\n            front = to_rec709(front);\n        } else if (i_colorspace == 1) {\n            front = to_sRGB(front);\n        } else if (i_colorspace == 2) {\n            //linear\n        } else if (i_colorspace == 3) {\n            front = adjust_gamma(front, 1.0 / 2.2);\n        } else if (i_colorspace == 4) {\n            front = adjust_gamma(front, 1.0 / 1.8);\n        }\n    }\n\n    return front;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / res;\n\n    vec3 front = texture2D(iChannel0, st).rgb;\n    front = do_colorspace(front, 0);\n\n    float matte = texture2D(iChannel1, st).r;\n\n    fragColor = vec4(front, matte);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Front")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("nearest")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("Matte")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("i_colorspace")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Colorspace :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(4, 0)
        del param

    del lastNode
    # End of node "pass1"

    # Start of node "pass2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass2")
    lastNode.setLabel("pass2")
    lastNode.setPosition(5128, 4985)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass2 = lastNode

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_bilat pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_bilat for Autodesk Flame\n\n\n// iChannel0: result_pass1,filter=linear,wrap=repeat\n// BBox: iChannel0\n\n\n\n#define luma(col) dot(col, vec3(0.2126, 0.7152, 0.0722))\n#define PI 3.141592653589793238462643383279502884197969\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / res;\n\n\tvec4 front = texture2D(iChannel0, st);\n\n\tfragColor = vec4(front.rgb * front.a, front.a);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass1")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "pass2"

    # Start of node "pass3"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass3")
    lastNode.setLabel("pass3")
    lastNode.setPosition(4956, 4985)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass3 = lastNode

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramValueInt2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_bilat pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_bilat for Autodesk Flame\n\n\n// iChannel0: result_pass1,filter=linear,wrap=clamp\n// iChannel1: result_pass2,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n#define luma(col) dot(col, vec3(0.2126, 0.7152, 0.0722))\n#define PI 3.141592653589793238462643383279502884197969\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\n#define max_detail 11\n\n\nuniform int samples = 10; // Samples : (Samples.), min=1, max=50\nuniform float amount = 5.0; // Strength : (Strength.),min=1.0, max=10.0\nuniform int detail = 1; //Detail : (Detail.), min=1, max=10\n\nfloat normpdf(float x, float sigma)\n{\n\treturn .39894 * exp(-.5 * x * x / (sigma * sigma)) / sigma;\n}\n\nfloat normpdf3(vec3 v, float sigma)\n{\n\treturn .39894 * exp(-.5 * dot(v, v) / (sigma * sigma)) / sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / res;\n\n\tvec4 front = texture2D(iChannel1, st);\n\tvec3 orig = texture2D(iChannel0, st).rgb;\n\tint kernel_size = (samples - 1) / 2;\n\tfloat kernel[100];\n\n\n\tfor (int i = 0 ; i <= kernel_size; ++i) {\n\t\tkernel[kernel_size + i] = kernel[kernel_size - i] = normpdf(float(i), amount);\n\t}\n\n\tfloat bsigma = (max_detail - detail) * .01;\n\tvec4 out_col = vec4(0.0);\n\tvec4 cc = vec4(0.0);\n\tfloat factor;\n\tfloat Z = 0.0;\n\tfloat bZ = 1.0 / normpdf(0.0, bsigma);\n\n\tfor (int i = -kernel_size ; i <= kernel_size; ++i) {\n\t\tfor (int j = -kernel_size ; j <= kernel_size; ++j) {\n\t\t\tcc = texture2D(iChannel1, st + vec2(float(i), float(j)) * texel);\n\t\t\tfactor = normpdf3(cc.rgb - front.rgb, bsigma) * bZ * kernel[kernel_size + j] * kernel[kernel_size + i];\n\t\t\tZ += factor;\n\t\t\tout_col += factor * cc;\n\t\t}\n\t}\n\n\tout_col /= vec4(Z);\n\n\tout_col.rgb /= max(vec3(out_col.a), .0001);\n\n\tout_col.rgb = mix(orig, out_col.rgb, out_col.a);\n\n\tfragColor = out_col;\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass1")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("result_pass2")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("samples")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Samples :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("Samples.")
        del param

    param = lastNode.getParam("paramDefaultInt0")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(50, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("amount")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Strength :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("Strength.")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("detail")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Detail :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("Detail.")
        del param

    param = lastNode.getParam("paramDefaultInt2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinInt2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxInt2")
    if param is not None:
        param.setValue(10, 0)
        del param

    del lastNode
    # End of node "pass3"

    # Start of node "pass4"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass4")
    lastNode.setLabel("pass4")
    lastNode.setPosition(4956, 5135)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass4 = lastNode

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_bilat pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_bilat for Autodesk Flame\n\n\n// iChannel0: result_pass3,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n\n\n#define luma(col) dot(col, vec3(0.2126, 0.7152, 0.0722))\n#define PI 3.141592653589793238462643383279502884197969\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\n\nuniform int i_colorspace = 0; // Colorspace : (Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).), min=0, max=4\n\n\nvec3 from_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n         col.r = pow((col.r +.055)/ 1.055, 2.4);\n    }\n\n    if (col.g >= 0.0) {\n         col.g = pow((col.g +.055)/ 1.055, 2.4);\n    }\n\n    if (col.b >= 0.0) {\n         col.b = pow((col.b +.055)/ 1.055, 2.4);\n    }\n\n    return col;\n}\n\nvec3 from_rec709(vec3 col)\n{\n    if (col.r < .081) {\n         col.r /= 4.5;\n    } else {\n         col.r = pow((col.r +.099)/ 1.099, 1.0 / .45);\n    }\n\n    if (col.g < .081) {\n         col.g /= 4.5;\n    } else {\n         col.g = pow((col.g +.099)/ 1.099, 1.0 / .45);\n    }\n\n    if (col.b < .081) {\n         col.b /= 4.5;\n    } else {\n         col.b = pow((col.b +.099)/ 1.099, 1.0 / .45);\n    }\n\n    return col;\n}\n\nvec3 to_rec709(vec3 col)\n{\n    if (col.r < .018) {\n         col.r *= 4.5;\n    } else if (col.r >= 0.0) {\n         col.r = (1.099 * pow(col.r, .45)) - .099;\n    }\n\n    if (col.g < .018) {\n         col.g *= 4.5;\n    } else if (col.g >= 0.0) {\n         col.g = (1.099 * pow(col.g, .45)) - .099;\n    }\n\n    if (col.b < .018) {\n         col.b *= 4.5;\n    } else if (col.b >= 0.0) {\n         col.b = (1.099 * pow(col.b, .45)) - .099;\n    }\n\n\n    return col;\n}\n\nvec3 to_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n         col.r = (1.055 * pow(col.r, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.g >= 0.0) {\n         col.g = (1.055 * pow(col.g, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.b >= 0.0) {\n         col.b = (1.055 * pow(col.b, 1.0 / 2.4)) - .055;\n    }\n\n    return col;\n}\n\nvec3 adjust_gamma(vec3 col, float gamma)\n{\n    col.r = pow(col.r, gamma);\n    col.g = pow(col.g, gamma);\n    col.b = pow(col.b, gamma);\n\n    return col;\n}\n\nvec3 do_colorspace(vec3 front, int op)\n{\n    if (op == 0)\n    {\n        if (i_colorspace == 0) {\n            front = from_rec709(front);\n        } else if (i_colorspace == 1) {\n            front = from_sRGB(front);\n        } else if (i_colorspace == 2) {\n            //linear\n        } else if (i_colorspace == 3) {\n            front = adjust_gamma(front, 2.2);\n        } else if (i_colorspace == 4) {\n            front = adjust_gamma(front, 1.8);\n        }\n    }\n    else if (op == 1)\n    {\n        if (i_colorspace == 0) {\n            front = to_rec709(front);\n        } else if (i_colorspace == 1) {\n            front = to_sRGB(front);\n        } else if (i_colorspace == 2) {\n            //linear\n        } else if (i_colorspace == 3) {\n            front = adjust_gamma(front, 1.0 / 2.2);\n        } else if (i_colorspace == 4) {\n            front = adjust_gamma(front, 1.0 / 1.8);\n        }\n    }\n\n    return front;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / res;\n\n    vec4 front = texture2D(iChannel0, st);\n    front.rgb = do_colorspace(front.rgb, 1);\n\n    fragColor = front;\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass3")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("i_colorspace")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Colorspace :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(4, 0)
        del param

    del lastNode
    # End of node "pass4"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(5298, 4845)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, grouppass4)
    grouppass1.connectInput(0, groupSource)
    grouppass1.connectInput(1, groupDot1)
    grouppass2.connectInput(0, grouppass1)
    grouppass3.connectInput(0, grouppass1)
    grouppass3.connectInput(1, grouppass2)
    grouppass4.connectInput(0, grouppass3)
    groupDot1.connectInput(0, groupSource_2)

    param = grouppass1.getParam("paramValueInt0")
    param.setExpression("thisGroup.colorspaceChoice.get()", False, 0)
    del param
    param = grouppass3.getParam("paramValueInt0")
    group.getParam("pass3paramValueInt0").setAsAlias(param)
    del param
    param = grouppass3.getParam("paramValueFloat1")
    group.getParam("pass3paramValueFloat1").setAsAlias(param)
    del param
    param = grouppass3.getParam("paramValueInt2")
    group.getParam("pass3paramValueInt2").setAsAlias(param)
    del param
    param = grouppass4.getParam("paramValueInt0")
    param.setExpression("thisGroup.colorspaceChoice.get()", False, 0)
    param.slaveTo(grouppass1.getParam("paramValueInt0"), 0, 0)
    del param

    try:
        extModule = sys.modules["y_bilat_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
