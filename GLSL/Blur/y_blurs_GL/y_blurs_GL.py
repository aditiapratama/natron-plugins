# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named y_blurs_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from y_blurs_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.y_blurs_GL"

def getLabel():
    return "y_blurs_GL"

def getVersion():
    return 1

def getIconPath():
    return "y_blurs_GL.png"

def getGrouping():
    return "Community/GLSL/Blur"

def getPluginDescription():
    return "Blur a thing. Options include the abilty to constrain the blur within an optional matte input. This shader also provides the means to drive the amount of blur with the optional black and white strength channel. The blur algorithm is the artistry of Lewis Saunders."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(1, 0.5686, 0.3333)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("SETUP", "Setup")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.SETUP = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createChoiceParam("colorspaceChoice", "Colorspace : ")
    entries = [ ("Rec 709", ""),
    ("sRGB", ""),
    ("Linear", ""),
    ("2.2 Gamma", ""),
    ("1.8 Gamma", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.colorspaceChoice = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createDoubleParam("pass4paramValueFloat1", "Blur : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass4paramValueFloat1 = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createDoubleParam("pass4paramValueFloat0", "Blur X : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass4paramValueFloat0 = param
    del param

    param = lastNode.createDoubleParam("pass5paramValueFloat2", "Blur Y : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass5paramValueFloat2 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createDoubleParam("pass4paramValueFloat2", "Red Bias : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass4paramValueFloat2 = param
    del param

    param = lastNode.createDoubleParam("pass4paramValueFloat3", "Green Bias : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass4paramValueFloat3 = param
    del param

    param = lastNode.createDoubleParam("pass4paramValueFloat4", "Blue Bias : ")
    param.setMinimum(0, 0)
    param.setMaximum(27000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(20, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass4paramValueFloat4 = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    param = lastNode.createSeparatorParam("OPTIONS", "Options")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OPTIONS = param
    del param

    param = lastNode.createStringParam("sep19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep19 = param
    del param

    param = lastNode.createStringParam("sep20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep20 = param
    del param

    param = lastNode.createBooleanParam("pass1paramValueBool1", "Invert Matte : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Invert the matte.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pass1paramValueBool1 = param
    del param

    param = lastNode.createBooleanParam("pass5paramValueBool0", "Constrain Blur to Matte : ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.pass5paramValueBool0 = param
    del param

    param = lastNode.createBooleanParam("pass2paramValueBool0", "Matte is Strength : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.pass2paramValueBool0 = param
    del param

    param = lastNode.createStringParam("sep21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep21 = param
    del param

    param = lastNode.createStringParam("sep22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep22 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "y_blurs_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE103", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE103 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4424, 4791)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Front"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Front")
    lastNode.setLabel("Front")
    lastNode.setPosition(4663, 3609)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupFront = lastNode

    del lastNode
    # End of node "Front"

    # Start of node "Matte"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Matte")
    lastNode.setLabel("Matte")
    lastNode.setPosition(4799, 3603)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupMatte = lastNode

    del lastNode
    # End of node "Matte"

    # Start of node "Strength"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Strength")
    lastNode.setLabel("Strength")
    lastNode.setPosition(4915, 3606)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupStrength = lastNode

    del lastNode
    # End of node "Strength"

    # Start of node "pass1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass1")
    lastNode.setLabel("pass1")
    lastNode.setPosition(4663, 3971)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass1 = lastNode

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueBool1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_blurs Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_blurs Matchbox for Autodesk Flame\n\n\n// iChannel0: Front,filter=linear,wrap=clamp\n// iChannel1: Matte,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel  = vec2(1.0) / res;\n\nuniform int i_colorspace = 0; // Colorspace : (orking colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).), min=0, max=4\nuniform bool invert_matte = false; // Invert Matte : (Invert the matte)\n\nvec3 from_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n        col.r = pow((col.r +.055)/ 1.055, 2.4);\n    }\n\n    if (col.g >= 0.0) {\n        col.g = pow((col.g +.055)/ 1.055, 2.4);\n    }\n\n    if (col.b >= 0.0) {\n        col.b = pow((col.b +.055)/ 1.055, 2.4);\n    }\n\n    return col;\n}\n\nvec3 from_rec709(vec3 col)\n{\n    if (col.r < .081) {\n        col.r /= 4.5;\n    } else {\n        col.r = pow((col.r +.099)/ 1.099, 1 / .45);\n    }\n\n    if (col.g < .081) {\n        col.g /= 4.5;\n    } else {\n        col.g = pow((col.g +.099)/ 1.099, 1 / .45);\n    }\n\n    if (col.b < .081) {\n        col.b /= 4.5;\n    } else {\n        col.b = pow((col.b +.099)/ 1.099, 1 / .45);\n    }\n\n    return col;\n}\n\nvec3 adjust_gamma(vec3 col, float gamma)\n{\n    col.r = pow(col.r, gamma);\n    col.g = pow(col.g, gamma);\n    col.b = pow(col.b, gamma);\n\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / res;\n   \tvec3 front = texture2D(iChannel0, st).rgb;\n    float matte = texture2D(iChannel1, st).a;\n\n    if (invert_matte)\n    {\n        matte = 1.0 - matte;\n    }\n\n    if (i_colorspace == 0) {\n        front = from_rec709(front);\n    } else if (i_colorspace == 1) {\n        front = from_sRGB(front);\n    } else if (i_colorspace == 2) {\n        //linear\n    } else if (i_colorspace == 3) {\n        front = adjust_gamma(front, 2.2);\n    } else if (i_colorspace == 4) {\n        front = adjust_gamma(front, 1.8);\n    }\n\n    fragColor = vec4(front, matte);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Front")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("Matte")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("i_colorspace")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Colorspace :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("orking colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("invert_matte")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Invert Matte :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("Invert the matte")
        del param

    del lastNode
    # End of node "pass1"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(4832, 3980)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "pass2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass2")
    lastNode.setLabel("pass2")
    lastNode.setPosition(4663, 4220)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass2 = lastNode

    param = lastNode.getParam("paramValueBool0")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_blurs Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_blurs Matchbox for Autodesk Flame\n\n\n// iChannel0: result_pass1,filter=linear,wrap=clamp\n// iChannel1: Strength,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\nuniform bool matte_is_strength = false; // Matte is Strength : (Use the matte input as the strength input as well.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 st = fragCoord.xy / res;\n\tvec4 front = texture2D(iChannel0, st);\n   \tfloat strength = texture2D(iChannel1, st).a;\n\n\tif (matte_is_strength) {\n\t\tstrength = front.a;\n\t}\n\n\tfragColor = vec4(front.rgb * front.a, strength);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass1")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("Strength")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("matte_is_strength")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Matte is Strength :")
        del param

    del lastNode
    # End of node "pass2"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(4948, 4229)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "pass3"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass3")
    lastNode.setLabel("pass3")
    lastNode.setPosition(4424, 4231)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass3 = lastNode

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_blurs Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_blurs Matchbox for Autodesk Flame\n\n\n// iChannel0: result_pass1,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel = vec2(1.0) / res;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 st = fragCoord.xy / res;\n\tvec4 front = texture2D(iChannel0, st);\n\n\tfragColor = vec4(front.rgb * front.a, front.a);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass1")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "pass3"

    # Start of node "pass5"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass5")
    lastNode.setLabel("pass5")
    lastNode.setPosition(4424, 4603)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass5 = lastNode

    param = lastNode.getParam("paramValueBool0")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramValueInt1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat4")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat5")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat6")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_blurs Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_blurs Matchbox for Autodesk Flame\n\n\n// iChannel0: result_pass1,filter=linear,wrap=clamp\n// iChannel1: result_pass4,filter=linear,wrap=clamp\n// iChannel2: result_pass2,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n\n// Change the folling 4 lines to suite\n#define STRENGTH adsk_results_pass2\n//#define VERTICAL \n#define STRENGTH_CHANNEL \n\n\n\n\nuniform bool keep_inside = true; // Constrain Blur to Matte : (Blur only the pixels that reside inside the area of the matte.)\nuniform int i_colorspace = 0; // Colorspace : (Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).), min=0, max=4\n\n\n\n\n\n#define PI 3.141592653589793238462643383279502884197969\n\n#ifdef STRENGTH_CHANNEL\n\tuniform sampler2D STRENGTH;\n#endif\n\n#ifndef VERTICAL\n\tuniform float v_bias = 1.0; // Blur Y : (Set the vertical bias.), min=0.0, max=27000\n\tfloat bias = v_bias;\n\tconst vec2 dir = vec2(0.0, 1.0);\n#else\n\tuniform float h_bias = 1.0; // Blur X : (Set the horizontal bias.), min=0.0, max=27000\n\tfloat bias = h_bias;\n\tconst vec2 dir = vec2(1.0, 0.0);\n#endif\n\n\n\nuniform float blur_amount = 0.0; // Blur : (Overall blur amount.), min=0.0, max=27000\nuniform float blur_red = 1.0; // Red Bias : (Set the bias for the red channel.), min=0.0, max=27000\nuniform float blur_green = 1.0; // Green Bias : (Set the bias for the green channel.), min=0.0, max=27000\nuniform float blur_blue = 1.0; // Blue Bias : (Set the bias for the blue channel.), min=0.0, max=27000\nfloat blur_matte = 1.0;\n\n\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel  = vec2(1.0) / res;\n\nvec4 gblur(vec2 fragCoord)\n{\n\t //The blur function is the work of Lewis Saunders.\n\tvec2 xy = fragCoord.xy;\n\n\tfloat strength = 1.0;\n\n\t//Optional texture used to weight amount of blur\n\t#ifdef STRENGTH_CHANNEL\n\t\tstrength = texture2D(iChannel2, fragCoord.xy / res).a;\n\t#endif\n\n\tfloat br = blur_red * blur_amount * bias * strength;\n\tfloat bg = blur_green * blur_amount * bias * strength;\n\tfloat bb = blur_blue * blur_amount * bias * strength;\n\tfloat bm = blur_matte * blur_amount * bias * strength;\n\n\tfloat support = max(max(max(br, bg), bb), bm) * 3.0;\n\n\tvec4 sigmas = vec4(br, bg, bb, bm);\n\tsigmas = max(sigmas, 0.0001);\n\n\tvec4 gx, gy, gz;\n\tgx = 1.0 / (sqrt(2.0 * PI) * sigmas);\n\tgy = exp(-0.5 / (sigmas * sigmas));\n\tgz = gy * gy;\n\n\tvec4 a = gx * texture2D(iChannel1, xy * texel);\n\tvec4 energy = gx;\n\tgx *= gy;\n\tgy *= gz;\n\n\tfor(float i = 1; i <= support; i++) {\n        a += gx * texture2D(iChannel1, (xy - i * dir) * texel);\n        a += gx * texture2D(iChannel1, (xy + i * dir) * texel);\n\t\tenergy += 2.0 * gx;\n\t\tgx *= gy;\n\t\tgy *= gz;\n\t}\n\n\ta /= energy;\n\n\treturn a;\n}\n\nvec3 adjust_cgamma(vec3 col, float gamma)\n{\n    if (col.r >= 0.0) {\n        col.r = pow(col.r, 1.0 / gamma);\n    }\n\n    if (col.g >= 0.0) {\n        col.g = pow(col.g, 1.0 / gamma);\n    }\n\n    if (col.b >= 0.0) {\n        col.b = pow(col.b, 1.0 / gamma);\n    }\n\n    return col;\n}\n\n\nvec3 to_rec709(vec3 col)\n{\n    if (col.r < .018) {\n        col.r *= 4.5;\n    } else if (col.r >= 0.0) {\n        col.r = (1.099 * pow(col.r, .45)) - .099;\n    }\n\n    if (col.g < .018) {\n        col.g *= 4.5;\n    } else if (col.g >= 0.0) {\n        col.g = (1.099 * pow(col.g, .45)) - .099;\n    }\n\n    if (col.b < .018) {\n        col.b *= 4.5;\n    } else if (col.b >= 0.0) {\n        col.b = (1.099 * pow(col.b, .45)) - .099;\n    }\n\n\n    return col;\n}\n\nvec3 to_sRGB(vec3 col)\n{\n    if (col.r >= 0.0) {\n        col.r = (1.055 * pow(col.r, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.g >= 0.0) {\n        col.g = (1.055 * pow(col.g, 1.0 / 2.4)) - .055;\n    }\n\n    if (col.b >= 0.0) {\n        col.b = (1.055 * pow(col.b, 1.0 / 2.4)) - .055;\n    }\n\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\tvec2 st = fragCoord.xy / res;\n\tvec4 front = texture2D(iChannel0, st);\n\tvec4 blur = gblur(fragCoord);\n\n\tfloat matte = front.a;\n\n\tblur.rgb /= max(blur.a, .0001);\n\n\tif (! keep_inside) {\n\t\tmatte = blur.a;\n\t}\n\n\tmatte = clamp(matte, 0.0, 1.0);\n\n\tvec4 comp = mix(front, blur, matte);\n\n\tif (i_colorspace == 0) {\n        comp.rgb = to_rec709(comp.rgb);\n    } else if (i_colorspace == 1) {\n        comp.rgb = to_sRGB(comp.rgb);\n    } else if (i_colorspace == 2) {\n        //linear\n    } else if (i_colorspace == 3) {\n        comp.rgb = adjust_cgamma(comp.rgb, 2.2);\n    } else if (i_colorspace == 4) {\n        comp.rgb = adjust_cgamma(comp.rgb, 1.8);\n    }\n\n\tfragColor = vec4(comp.rgb, matte);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass1")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("result_pass4")
        del param

    param = lastNode.getParam("mipmap2")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap2")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel2")
    if param is not None:
        param.setValue("result_pass2")
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(7, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("keep_inside")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Constrain Blur to Matte :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("Blur only the pixels that reside inside the area of the matte.")
        del param

    param = lastNode.getParam("paramDefaultBool0")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("i_colorspace")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Colorspace :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("Working colorspace. Set this to the current working colorspace. This insures a linear blur (no dark edges).")
        del param

    param = lastNode.getParam("paramMinInt1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt1")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("v_bias")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Blur Y :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("Set the vertical bias.")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat2")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("blur_amount")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Blur :")
        del param

    param = lastNode.getParam("paramHint3")
    if param is not None:
        param.setValue("Overall blur amount.")
        del param

    param = lastNode.getParam("paramMinFloat3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat3")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("blur_red")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("Red Bias :")
        del param

    param = lastNode.getParam("paramHint4")
    if param is not None:
        param.setValue("Set the bias for the red channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat4")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat4")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat4")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType5")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName5")
    if param is not None:
        param.setValue("blur_green")
        del param

    param = lastNode.getParam("paramLabel5")
    if param is not None:
        param.setValue("Green Bias :")
        del param

    param = lastNode.getParam("paramHint5")
    if param is not None:
        param.setValue("Set the bias for the green channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat5")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat5")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat5")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType6")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName6")
    if param is not None:
        param.setValue("blur_blue")
        del param

    param = lastNode.getParam("paramLabel6")
    if param is not None:
        param.setValue("Blue Bias :")
        del param

    param = lastNode.getParam("paramHint6")
    if param is not None:
        param.setValue("Set the bias for the blue channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat6")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat6")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat6")
    if param is not None:
        param.setValue(27000, 0)
        del param

    del lastNode
    # End of node "pass5"

    # Start of node "pass4"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("pass4")
    lastNode.setLabel("pass4")
    lastNode.setPosition(4424, 4390)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouppass4 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat3")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat4")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : y_blurs Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : y_blurs Matchbox for Autodesk Flame\n\n\n// iChannel0: result_pass3,filter=linear,wrap=clamp\n// iChannel1: Strength,filter=linear,wrap=clamp\n// BBox: iChannel0\n\n\n// Change the folling 4 lines to suite\n#define STRENGTH adsk_results_pass2\n#define VERTICAL \n#define STRENGTH_CHANNEL \n\n\n\n#define PI 3.141592653589793238462643383279502884197969\n\n\n\n#ifndef VERTICAL\n\tuniform float v_bias = 1.0; // Blur Y : (Set the vertical bias.), min=0.0, max=27000\n\tfloat bias = v_bias;\n\tconst vec2 dir = vec2(0.0, 1.0);\n#else\n\tuniform float h_bias = 1.0; // Blur X : (Set the horizontal bias.), min=0.0, max=27000\n\tfloat bias = h_bias;\n\tconst vec2 dir = vec2(1.0, 0.0);\n#endif\n\nuniform float blur_amount = 0.0; // Blur : (Overall blur amount.), min=0.0, max=27000\nuniform float blur_red = 1.0; // Red Bias : (Set the bias for the red channel.), min=0.0, max=27000\nuniform float blur_green = 1.0; // Green Bias : (Set the bias for the green channel.), min=0.0, max=27000\nuniform float blur_blue = 1.0; // Blue Bias : (Set the bias for the blue channel.), min=0.0, max=27000\nfloat blur_matte = 1.0;\n\n\nvec2 res = vec2(iResolution.x, iResolution.y);\nvec2 texel  = vec2(1.0) / res;\n\nvec4 gblur(vec2 fragCoord)\n{\n\t //The blur function is the work of Lewis Saunders.\n\tvec2 xy = fragCoord.xy;\n\n\tfloat strength = 1.0;\n\n\t//Optional texture used to weight amount of blur\n\t#ifdef STRENGTH_CHANNEL\n\t\tstrength = texture2D(iChannel1, fragCoord.xy / res).a;\n\t#endif\n\n\tfloat br = blur_red * blur_amount * bias * strength;\n\tfloat bg = blur_green * blur_amount * bias * strength;\n\tfloat bb = blur_blue * blur_amount * bias * strength;\n\tfloat bm = blur_matte * blur_amount * bias * strength;\n\n\tfloat support = max(max(max(br, bg), bb), bm) * 3.0;\n\n\tvec4 sigmas = vec4(br, bg, bb, bm);\n\tsigmas = max(sigmas, 0.0001);\n\n\tvec4 gx, gy, gz;\n\tgx = 1.0 / (sqrt(2.0 * PI) * sigmas);\n\tgy = exp(-0.5 / (sigmas * sigmas));\n\tgz = gy * gy;\n\n\tvec4 a = gx * texture2D(iChannel0, xy * texel);\n\tvec4 energy = gx;\n\tgx *= gy;\n\tgy *= gz;\n\n\tfor(float i = 1; i <= support; i++) {\n        a += gx * texture2D(iChannel0, (xy - i * dir) * texel);\n        a += gx * texture2D(iChannel0, (xy + i * dir) * texel);\n\t\tenergy += 2.0 * gx;\n\t\tgx *= gy;\n\t\tgy *= gz;\n\t}\n\n\ta /= energy;\n\n\treturn a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = gblur(fragCoord);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("result_pass3")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("Strength")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("h_bias")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Blur X :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("Set the horizontal bias.")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("blur_amount")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Blur :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("Overall blur amount.")
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("blur_red")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Red Bias :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("Set the bias for the red channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat2")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("blur_green")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Green Bias :")
        del param

    param = lastNode.getParam("paramHint3")
    if param is not None:
        param.setValue("Set the bias for the green channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat3")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat3")
    if param is not None:
        param.setValue(27000, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("blur_blue")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("Blue Bias :")
        del param

    param = lastNode.getParam("paramHint4")
    if param is not None:
        param.setValue("Set the bias for the blue channel.")
        del param

    param = lastNode.getParam("paramDefaultFloat4")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat4")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat4")
    if param is not None:
        param.setValue(27000, 0)
        del param

    del lastNode
    # End of node "pass4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(4237, 3980)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(4948, 4399)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(4457, 3979)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(4237, 4612)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(4696, 4612)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, grouppass5)
    grouppass1.connectInput(0, groupFront)
    grouppass1.connectInput(1, groupDot2_2)
    groupDot2_2.connectInput(0, groupMatte)
    grouppass2.connectInput(0, grouppass1)
    grouppass2.connectInput(1, groupDot4)
    groupDot4.connectInput(0, groupStrength)
    grouppass3.connectInput(0, groupDot7)
    grouppass5.connectInput(0, groupDot8)
    grouppass5.connectInput(1, grouppass4)
    grouppass5.connectInput(2, groupDot9)
    grouppass4.connectInput(0, grouppass3)
    grouppass4.connectInput(1, groupDot6)
    groupDot5.connectInput(0, groupDot7)
    groupDot6.connectInput(0, groupDot4)
    groupDot7.connectInput(0, grouppass1)
    groupDot8.connectInput(0, groupDot5)
    groupDot9.connectInput(0, grouppass2)

    param = grouppass1.getParam("paramValueInt0")
    param.setExpression("thisGroup.colorspaceChoice.get()", False, 0)
    del param
    param = grouppass1.getParam("paramValueBool1")
    group.getParam("pass1paramValueBool1").setAsAlias(param)
    del param
    param = grouppass2.getParam("paramValueBool0")
    group.getParam("pass2paramValueBool0").setAsAlias(param)
    del param
    param = grouppass5.getParam("paramValueBool0")
    group.getParam("pass5paramValueBool0").setAsAlias(param)
    del param
    param = grouppass5.getParam("paramValueInt1")
    param.setExpression("thisGroup.colorspaceChoice.get()", False, 0)
    param.slaveTo(grouppass1.getParam("paramValueInt0"), 0, 0)
    del param
    param = grouppass5.getParam("paramValueFloat2")
    group.getParam("pass5paramValueFloat2").setAsAlias(param)
    del param
    param = grouppass5.getParam("paramValueFloat3")
    param.slaveTo(grouppass4.getParam("paramValueFloat1"), 0, 0)
    del param
    param = grouppass5.getParam("paramValueFloat4")
    param.slaveTo(grouppass4.getParam("paramValueFloat2"), 0, 0)
    del param
    param = grouppass5.getParam("paramValueFloat5")
    param.slaveTo(grouppass4.getParam("paramValueFloat3"), 0, 0)
    del param
    param = grouppass5.getParam("paramValueFloat6")
    param.slaveTo(grouppass4.getParam("paramValueFloat4"), 0, 0)
    del param
    param = grouppass4.getParam("paramValueFloat0")
    group.getParam("pass4paramValueFloat0").setAsAlias(param)
    del param
    param = grouppass4.getParam("paramValueFloat1")
    group.getParam("pass4paramValueFloat1").setAsAlias(param)
    del param
    param = grouppass4.getParam("paramValueFloat2")
    group.getParam("pass4paramValueFloat2").setAsAlias(param)
    del param
    param = grouppass4.getParam("paramValueFloat3")
    group.getParam("pass4paramValueFloat3").setAsAlias(param)
    del param
    param = grouppass4.getParam("paramValueFloat4")
    group.getParam("pass4paramValueFloat4").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["y_blurs_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
