# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Crok_heathaze_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Crok_heathaze_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Crok_heathaze_GL"

def getLabel():
    return "Crok_heathaze_GL"

def getVersion():
    return 1

def getIconPath():
    return "Crok_heathaze_GL.png"

def getGrouping():
    return "Community/GLSL/Distort"

def getPluginDescription():
    return "Creates a heat haze effect.\n( https://vimeo.com/115514251 )"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.07451, 0.5686, 0.4863)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("DISTORSION", "Distorsion")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.DISTORSION = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createDoubleParam("Shader_pass5paramValueFloat0", "Amount : ")
    param.setMinimum(0, 0)
    param.setMaximum(512, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(512, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass5paramValueFloat0 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy2paramValueFloat0", "Smoothness : ")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy2paramValueFloat0 = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createSeparatorParam("MOTIONBLUR", "Motion Blur")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.MOTIONBLUR = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat0", "Amount : ")
    param.setMinimum(0, 0)
    param.setMaximum(512, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(512, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat0 = param
    del param

    param = lastNode.createIntParam("Shadertoy1_2paramValueInt1", "Samples : ")
    param.setMinimum(2, 0)
    param.setMaximum(128, 0)
    param.setDisplayMinimum(2, 0)
    param.setDisplayMaximum(128, 0)
    param.setDefaultValue(16, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueInt1 = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createSeparatorParam("NOISEGENERATOR", "Noise Generator")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NOISEGENERATOR = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createDoubleParam("Shader_pass1paramValueFloat0", "Speed : ")
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass1paramValueFloat0 = param
    del param

    param = lastNode.createDoubleParam("Shader_pass1paramValueFloat1", "Detail : ")
    param.setDisplayMinimum(-50, 0)
    param.setDisplayMaximum(50, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass1paramValueFloat1 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createDoubleParam("xDir", "Direction x : ")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.xDir = param
    del param

    param = lastNode.createDoubleParam("yDir", "Direction y : ")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.yDir = param
    del param

    param = lastNode.createDoubleParam("zDir", "Direction z : ")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-100, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.zDir = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    param = lastNode.createSeparatorParam("INOUT", "Input / Output")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.INOUT = param
    del param

    param = lastNode.createStringParam("sep19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep19 = param
    del param

    param = lastNode.createStringParam("sep20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep20 = param
    del param

    param = lastNode.createBooleanParam("Shadertoy2paramValueBool1", "External matte : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy2paramValueBool1 = param
    del param

    param = lastNode.createBooleanParam("Shader_pass5paramValueBool3", "Output matte : ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass5paramValueBool3 = param
    del param

    param = lastNode.createStringParam("sep21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep21 = param
    del param

    param = lastNode.createStringParam("sep22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep22 = param
    del param

    param = lastNode.createSeparatorParam("QUALITY", "Quality")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.QUALITY = param
    del param

    param = lastNode.createStringParam("sep23", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep23 = param
    del param

    param = lastNode.createStringParam("sep24", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep24 = param
    del param

    param = lastNode.createDoubleParam("Shader_pass5paramValueFloat1", "Softness : ")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass5paramValueFloat1 = param
    del param

    param = lastNode.createIntParam("Shader_pass5paramValueInt2", "Oversampling : ")
    param.setMinimum(1, 0)
    param.setMaximum(32, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(32, 0)
    param.setDefaultValue(4, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shader_pass5paramValueInt2 = param
    del param

    param = lastNode.createStringParam("sep25", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep25 = param
    del param

    param = lastNode.createStringParam("sep26", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep26 = param
    del param

    param = lastNode.createSeparatorParam("OUTPUT", "Output")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OUTPUT = param
    del param

    param = lastNode.createStringParam("sep27", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep27 = param
    del param

    param = lastNode.createStringParam("sep28", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep28 = param
    del param

    param = lastNode.createChoiceParam("outChoice", "Output : ")
    entries = [ ("Noise", ""),
    ("UV", ""),
    ("Result", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Result")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.outChoice = param
    del param

    param = lastNode.createStringParam("sep29", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep29 = param
    del param

    param = lastNode.createStringParam("sep30", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep30 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "Crok_heathaze_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE103", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE103 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4461, 5400)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(3687, 4686)
    lastNode.setSize(80, 36)
    lastNode.setColor(1, 1, 1)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Mask")
    lastNode.setLabel("Mask")
    lastNode.setPosition(3688, 4481)
    lastNode.setSize(80, 32)
    lastNode.setColor(1, 1, 1)
    groupMask = lastNode

    del lastNode
    # End of node "Mask"

    # Start of node "Displace_map"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Displace_map")
    lastNode.setLabel("Displace_map")
    lastNode.setPosition(4514, 3653)
    lastNode.setSize(80, 36)
    lastNode.setColor(1, 1, 1)
    groupDisplace_map = lastNode

    del lastNode
    # End of node "Displace_map"

    # Start of node "Strength_map"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Strength_map")
    lastNode.setLabel("Strength_map")
    lastNode.setPosition(4699, 3650)
    lastNode.setSize(80, 36)
    lastNode.setColor(1, 1, 1)
    groupStrength_map = lastNode

    del lastNode
    # End of node "Strength_map"

    # Start of node "Shader_pass3"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shader_pass3")
    lastNode.setLabel("Shader_pass3")
    lastNode.setPosition(4062, 4115)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShader_pass3 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : crok_heathaze Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : crok_heathaze Matchbox for Autodesk Flame\r\n\r\n\r\n// setting inputs names and filtering options\r\n// iChannel0: pass2_result, filter = linear,wrap=clamp\r\n// BBox: iChannel0\r\n\r\n// low frequency blur in y \r\n\r\n\r\nuniform float blur_low = 20.0; // Smoothness : (smoothness), min=0.0, max=1000.0\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n   vec2 coords = fragCoord.xy / vec2( iResolution.x, iResolution.y );\r\n   float softness = blur_low;\r\n   int f0int = int(softness);\r\n   vec4 accu = vec4(0);\r\n   float energy = 0.0;\r\n   vec4 finalColor = vec4(0.0);\r\n   \r\n   for( int y = -f0int; y <= f0int; y++)\r\n   {\r\n      vec2 currentCoord = vec2(coords.x, coords.y+float(y)/iResolution.y);\r\n      vec4 aSample = texture2D(iChannel0, currentCoord).rgba;\r\n      float anEnergy = 1.0 - ( abs(float(y)) / softness);\r\n      energy += anEnergy;\r\n      accu+= aSample * anEnergy;\r\n   }\r\n   \r\n   finalColor = \r\n      energy > 0.0 ? (accu / energy) : \r\n                     texture2D(iChannel0, coords).rgba;\r\n                     \r\n   fragColor = vec4( finalColor );\r\n}\r\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("pass2_result")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("blur_low")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Smoothness :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("smoothness")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(1000, 0)
        del param

    del lastNode
    # End of node "Shader_pass3"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(4546, 4048)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(4548, 4358)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(4731, 4695)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(4731, 5077)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Shadertoy2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy2")
    lastNode.setLabel("Shader_pass2")
    lastNode.setPosition(4062, 4035)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy2 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramValueBool1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : crok_heathaze Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : crok_heathaze Matchbox for Autodesk Flame\r\n\r\n\r\n// setting inputs names and filtering options\r\n// iChannel0: pass1_result, filter = linear,wrap=clamp\r\n// iChannel1: displace_map, filter = linear,wrap=clamp\r\n// BBox: iChannel0\r\n\r\n// low frequency blur in x \r\n\r\nuniform float blur_low = 20.0; // Smoothness : (blur the incomming distortion matte), min=0.0, max=1000.0\r\nuniform bool external_matte = false; // External matte : (use an external matte instead of the internal matte for the displacement)\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n   vec2 coords = fragCoord.xy / vec2( iResolution.x, iResolution.y );\r\n   float softness = blur_low;\r\n   int f0int = int(softness);\r\n   vec4 accu = vec4(0);\r\n   float energy = 0.0;\r\n   vec4 finalColor = vec4(0.0);\r\n\r\nif ( external_matte )\r\n  {\r\n   for( int x = -f0int; x <= f0int; x++)\r\n   {\r\n      vec2 currentCoord = vec2(coords.x+float(x)/iResolution.x, coords.y);\r\n      vec4 aSample = texture2D(iChannel1, currentCoord).rgba;\r\n      float anEnergy = 1.0 - ( abs(float(x)) / softness);\r\n      energy += anEnergy;\r\n      accu+= aSample * anEnergy;\r\n   }\r\n\r\n   finalColor = \r\n      energy > 0.0 ? (accu / energy) : \r\n                     texture2D(iChannel1, coords).rgba;\r\n  }   \r\n  \r\n  else\r\n  {\r\n      for( int x = -f0int; x <= f0int; x++)\r\n      {\r\n         vec2 currentCoord = vec2(coords.x+float(x)/iResolution.x, coords.y);\r\n         vec4 aSample = texture2D(iChannel0, currentCoord).rgba;\r\n         float anEnergy = 1.0 - ( abs(float(x)) / softness);\r\n         energy += anEnergy;\r\n         accu+= aSample * anEnergy;\r\n      }\r\n\r\n      finalColor = \r\n         energy > 0.0 ? (accu / energy) : \r\n                        texture2D(iChannel0, coords).rgba;\r\n  }\r\n\r\n\r\n\r\n\t\t\r\n\t\t\t  \t\t  \r\n                     \r\n   fragColor = vec4( finalColor );\r\n}\r\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("pass1_result")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("displace_map")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("blur_low")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Smoothness :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("blur the incomming distortion matte")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(1000, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("external_matte")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("External matte :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("use an external matte instead of the internal matte for the displacement")
        del param

    del lastNode
    # End of node "Shadertoy2"

    # Start of node "Shader_pass4"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shader_pass4")
    lastNode.setLabel("Shader_pass4")
    lastNode.setPosition(4062, 4349)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShader_pass4 = lastNode

    param = lastNode.getParam("paramValueBool0")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : crok_heathaze Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : crok_heathaze Matchbox for Autodesk Flame\r\n\r\n\r\n// setting inputs names and filtering options\r\n// iChannel0: pass3_result, filter = linear,wrap=clamp\r\n// iChannel1: displace_map, filter = linear,wrap=clamp\r\n// BBox: iChannel0\r\n\r\n// Pass 1: make the  low frequency vectors\r\n// lewis@lewissaunders.com\r\n\r\n\r\nuniform bool external_matte = false; // External matte : (use an external matte instead of the internal matte for the displacement)\r\n\r\nconst float ksize = 1.0;\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\r\n\tvec2 xy = fragCoord.xy;\r\n\r\n\t// Factor to convert pixels to [0,1] texture coords\r\n\tvec2 px = vec2(1.0) / vec2(iResolution.x, iResolution.y);\r\n\tvec2 d = vec2(0.0);\r\n\r\n\tif ( external_matte )\r\n\t{\r\n\t\t// Convolve by x and y Sobel matrices to get gradient vector\r\n\t\td.x  =  1.0 * texture2D(iChannel1, (xy + ksize * vec2(-1.0, -1.0)) * px).g;\r\n\t\td.x +=  2.0 * texture2D(iChannel1, (xy + ksize * vec2(-1.0,  0.0)) * px).g;\r\n\t\td.x +=  1.0 * texture2D(iChannel1, (xy + ksize * vec2(-1.0, +1.0)) * px).g;\r\n\t\td.x += -1.0 * texture2D(iChannel1, (xy + ksize * vec2(+1.0, -1.0)) * px).g;\r\n\t\td.x += -2.0 * texture2D(iChannel1, (xy + ksize * vec2(+1.0,  0.0)) * px).g;\r\n\t\td.x += -1.0 * texture2D(iChannel1, (xy + ksize * vec2(+1.0, +1.0)) * px).g;\r\n\t\td.y +=  1.0 * texture2D(iChannel1, (xy + ksize * vec2(-1.0, -1.0)) * px).g;\r\n\t\td.y +=  2.0 * texture2D(iChannel1, (xy + ksize * vec2( 0.0, -1.0)) * px).g;\r\n\t\td.y +=  1.0 * texture2D(iChannel1, (xy + ksize * vec2(+1.0, -1.0)) * px).g;\r\n\t\td.y += -1.0 * texture2D(iChannel1, (xy + ksize * vec2(-1.0, +1.0)) * px).g;\r\n\t\td.y += -2.0 * texture2D(iChannel1, (xy + ksize * vec2( 0.0, +1.0)) * px).g;\r\n\t\td.y += -1.0 * texture2D(iChannel1, (xy + ksize * vec2(+1.0, +1.0)) * px).g;\r\n\t}\t\r\n\telse\r\n\t{\r\n\t\td.x  =  1.0 * texture2D(iChannel0, (xy + ksize * vec2(-1.0, -1.0)) * px).g;\r\n\t\td.x +=  2.0 * texture2D(iChannel0, (xy + ksize * vec2(-1.0,  0.0)) * px).g;\r\n\t\td.x +=  1.0 * texture2D(iChannel0, (xy + ksize * vec2(-1.0, +1.0)) * px).g;\r\n\t\td.x += -1.0 * texture2D(iChannel0, (xy + ksize * vec2(+1.0, -1.0)) * px).g;\r\n\t\td.x += -2.0 * texture2D(iChannel0, (xy + ksize * vec2(+1.0,  0.0)) * px).g;\r\n\t\td.x += -1.0 * texture2D(iChannel0, (xy + ksize * vec2(+1.0, +1.0)) * px).g;\r\n\t\td.y +=  1.0 * texture2D(iChannel0, (xy + ksize * vec2(-1.0, -1.0)) * px).g;\r\n\t\td.y +=  2.0 * texture2D(iChannel0, (xy + ksize * vec2( 0.0, -1.0)) * px).g;\r\n\t\td.y +=  1.0 * texture2D(iChannel0, (xy + ksize * vec2(+1.0, -1.0)) * px).g;\r\n\t\td.y += -1.0 * texture2D(iChannel0, (xy + ksize * vec2(-1.0, +1.0)) * px).g;\r\n\t\td.y += -2.0 * texture2D(iChannel0, (xy + ksize * vec2( 0.0, +1.0)) * px).g;\r\n\t\td.y += -1.0 * texture2D(iChannel0, (xy + ksize * vec2(+1.0, +1.0)) * px).g;\r\n\t\t\r\n\t}\r\n\t\t// Convolve by x and y Sobel matrices to get gradient vector\r\n\t\r\n\t// Bit of a bodge factor right here\r\n\td *= 32.0 / ksize;\r\n\r\n\t// Output vectors for second pass\r\n\tfragColor = vec4(d.x, d.y, 0.0, 1.0);\r\n}\r\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("pass3_result")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("displace_map")
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("external_matte")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("External matte :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("use an external matte instead of the internal matte for the displacement")
        del param

    del lastNode
    # End of node "Shader_pass4"

    # Start of node "Shader_pass1"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shader_pass1")
    lastNode.setLabel("Shader_pass1")
    lastNode.setPosition(4062, 3765)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShader_pass1 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueVec32")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("\r\n\r\nuniform float Speed = 1.0; // Speed : (speed of noise)\r\nuniform float Noise = 1.0; // Detail : (detail of the noise structure)\r\nuniform vec3 NoiseAnim = vec3(0, 0, 0); // Direction : (noise animation direction)\r\n\r\nconst vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);\r\nconst int VolumeSteps = 20;\r\nconst float StepSize = 0.25; \r\nconst float Density = 0.15;\r\nconst float Offset = 0.0;\r\nconst float Detail = 1.0;\r\nconst vec2 Aspect = vec2(1.0, 1.0);\r\nconst vec3 tint_col = vec3(3.8, 0.8, -0.8);\r\nconst float tint = 0.4;\r\nconst float saturation = 0.0;\r\nconst float brightness = 1.0;\r\nconst float contrast = 2.0;\r\nconst float Zoom = 2.0;\r\nconst vec3 co0 = vec3(1.1, 2.3, 0.8);\r\nconst vec3 co1 = vec3(2.1, 0.5, 0.5);\r\nconst vec3 co2 = vec3(0.0, 0.0, 0.0);\r\nconst vec3 co3 = vec3(1.5, -1.2, -1.3);\r\nconst vec3 co4 = vec3(3.0, 0.0, 0.0);\r\nconst float NoiseAmp = 5.0;\r\nconst float NoiseFreq = 1.0;\r\n//const float Noise = 3.0;\r\n\r\nvec2 resolution = vec2(iResolution.x, iResolution.y);\r\nfloat time = iTime *.02 * Speed + Offset;\r\n\r\nmat3 m = mat3( 0.00,  0.80,  0.60,\r\n              -0.80,  0.36, -0.48,\r\n              -0.60, -0.48,  0.64 );\r\n\r\nfloat hash( float n )\r\n{\r\n    return fract(sin(n)*43758.5453);\r\n}\r\n\r\n\r\nfloat noise( in vec3 x )\r\n{\r\n    vec3 p = floor(x);\r\n    vec3 f = fract(x);\r\n\r\n    f = f*f*(3.0-2.0*f);\r\n\r\n    float n = p.x + p.y*57.0 + 113.0*p.z;\r\n\r\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\r\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\r\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\r\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\r\n    return res;\r\n}\r\n\r\nfloat fbm( vec3 p )\r\n{\r\n    float f;\r\n    f = 0.5000*noise( p ); p = m*p*2.02;\r\n    f += 0.2500*noise( p ); p = m*p*2.03;\r\n    f += 0.1250*noise( p ); p = m*p*2.01;\r\n    f += 0.0625*noise( p );\r\n    return f;\r\n}\r\n\r\nfloat distanceFunc(vec3 p)\r\n{\t\r\n\tfloat d = length(p);\t// distance to sphere\r\n\td += fbm(p*NoiseFreq + vec3(NoiseAnim.z, NoiseAnim.y, NoiseAnim.x)*time) * NoiseAmp;\r\n\treturn d;\r\n}\r\n\r\nvec4 gradient(float x)\r\n{\r\n\tx=sin(x-time);\r\n\r\n\tvec4 c0 = vec4(co0, 0.1);\t// yellow\r\n\tvec4 c1 = vec4(co1, 0.9);\t// red\r\n\tvec4 c2 = vec4(co2, 0); \t// black\r\n\tvec4 c3 = vec4(co3, 0.2); \t// blue\r\n\tvec4 c4 = vec4(co4, 0); \t// black\r\n\t\r\n\tx = clamp(x, 0.0, 0.999);\r\n\tfloat t = fract(x*4.0);\r\n\tvec4 c;\r\n\tif (x < 0.25) {\r\n\t\tc =  mix(c0, c1, t);\r\n\t} else if (x < 0.5) {\r\n\t\tc = mix(c1, c2, t);\r\n\t} else if (x < 0.75) {\r\n\t\tc = mix(c2, c3, t);\r\n\t} else {\r\n\t\tc = mix(c3, c4, t);\t\t\r\n\t}\r\n\treturn c;\r\n}\r\n\r\nvec4 shade(float d)\r\n{\t\r\n\tvec4 c = gradient(d);\r\n\treturn c;\r\n}\r\n\r\n\r\nvec4 volumeFunc(vec3 p)\r\n{\r\n\tfloat d = distanceFunc(p);\r\n\treturn shade(d);\r\n}\r\n\r\nvec4 rayMarch(vec3 rayOrigin, vec3 rayStep, out vec3 pos)\r\n{\r\n\tvec4 sum = vec4(0, 0, 0, 0);\r\n\tpos = rayOrigin;\r\n\tfor(int i=0; i<VolumeSteps; i++) {\r\n\t\tvec4 col = volumeFunc(pos);\r\n\t\tcol.a *= Density;\r\n\t\tcol.rgb *= col.a;\r\n\t\tsum = sum + col*(1.0 - sum.a);\t\r\n\t\tpos += rayStep;\r\n\t}\r\n\treturn sum;\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    vec2 q = fragCoord.xy / resolution.xy;\r\n    vec2 p = -1.0 + 2.0 * q;\r\n    p.x *= resolution.x/resolution.y;\r\n\t\r\n    float rotx = 0.0;\r\n    float roty = 0.0;\r\n\r\n    vec3 ro = Detail * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\r\n    vec3 ww = normalize(vec3(0.0,0.0,0.0) - ro);\r\n    vec3 uu = Aspect.x * normalize(cross( vec3(0.0,1.0,0.0), ww ));\r\n    vec3 vv = Aspect.y * normalize(cross(ww,uu));\r\n    vec3 rd = normalize( p.x*uu + p.y*vv + ww * Zoom );\r\n\r\n    ro += rd * Noise;\r\n\t\r\n    vec3 hitPos;\r\n    vec4 col = rayMarch(ro, rd*StepSize, hitPos);\r\n    vec3 avg_lum = vec3(0.5, 0.5, 0.5);\r\n    vec3 intensity = vec3(dot(col.rgb, LumCoeff));\r\n\r\n    vec3 sat_color = mix(intensity, col.rgb, saturation);\r\n    vec3 con_color = mix(avg_lum, sat_color, contrast);\r\n\tvec3 brt_color = con_color - 1.0 + brightness;\r\n\tvec3 fin_color = mix(brt_color, brt_color * tint_col, tint);\r\n\r\n    fragColor = vec4(fin_color, 1.0);\r\n\t}")
        del param

    param = lastNode.getParam("inputEnable0")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("Speed")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Speed :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("speed of noise")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("Noise")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Detail :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("detail of the noise structure")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("NoiseAnim")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Direction :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("noise animation direction")
        del param

    del lastNode
    # End of node "Shader_pass1"

    # Start of node "Shader_pass5"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shader_pass5")
    lastNode.setLabel("Shader_pass5")
    lastNode.setPosition(4062, 4686)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShader_pass5 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueFloat1")
    if param is not None:
        param.setValue(1.5, 0)
        del param

    param = lastNode.getParam("paramValueInt2")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramValueBool3")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : crok_heathaze Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : crok_heathaze Matchbox for Autodesk Flame\r\n\r\n\r\n// setting inputs names and filtering options\r\n// iChannel0: pass4_result, filter = linear,wrap=clamp\r\n// iChannel1: source, filter = linear,wrap=clamp\r\n// iChannel2: strength_map, filter = linear,wrap=clamp\r\n// iChannel3: mask, filter = linear,wrap=clamp\r\n// BBox: iChannel0\r\n\r\n// Pass 2: do the displace\r\n// lewis@lewissaunders.com\r\n\r\n\r\nuniform float blength = 1.0; // Amount : (strength of the distortion), min=0.0, max=512.0\r\nuniform float spacing = 1.5; // Softness : (spacing between pixel samples), min=0.0, max=10.0\r\n\r\nuniform int oversamples = 4; // Oversampling : (number of pixel samples), min=1, max=32\r\nuniform bool output_matte = true; // Output matte : (output matte)\r\n\r\nconst float sidestep = 0.0;\r\n\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\r\n\tvec2 xy = fragCoord.xy;\r\n\tvec2 uv = fragCoord.xy / vec2( iResolution.x, iResolution.y );\r\n\t\r\n\tfloat strength = texture2D(iChannel2, uv).r;\r\n\r\n\t// Factor to convert pixels to [0,1] texture coords\r\n\tvec2 px = vec2(1.0) / vec2(iResolution.x, iResolution.y);\r\n\r\n\t// Get vectors from previous pass\r\n\tvec2 d = texture2D(iChannel0, xy * px).xy;\r\n\r\n\tvec4 acc = vec4(0.0);\r\n\tfor(int j = 0; j < oversamples; j++) {\r\n\t\tfor(int k = 0; k < oversamples; k++) {\r\n\t\t\t// Starting point for this sample\r\n\t\t\txy = fragCoord.xy + spacing * vec2(float(j) / (float(oversamples) + 1.0), float(k) / (float(oversamples) + 1.0));\r\n\t\t\tfloat dist = 0.0;\r\n\t\t\t// Walk along path by sampling vector image, moving, sampling, moving...\r\n\t\t\tfor(float i = 0.0; i < 1.0; i++) {\r\n\t\t\t\td = texture2D(iChannel0, xy * px).xy;\r\n\t\t\t\tif(length(d) == 0.0) {\r\n\t\t\t\t\t// No gradient at this point in the map, early out\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\txy += d * (blength * strength) + blength * strength * sidestep/1000.0 * vec2(-d.y, d.x) + (blength * strength /32.0);\r\n\t\t\t\tdist += length(d * (blength * strength));\r\n\t\t\t}\r\n\t\t\t// Sample iChannel1 image where our walk ended up\r\n\t\t\tacc.rgb += texture2D(iChannel1, xy * px).rgb;\r\n\t\t\t\r\n\t\t\tif ( output_matte )\r\n\t\t\t{\r\n\t\t\t\t// Sample matte image where our walk ended up\r\n\t\t\t\tacc.a += texture2D(iChannel3, xy * px).r;\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Length we\'ve travelled to the matte output  \r\n\t\t\t\tacc.a += dist * (blength * strength / 32.0);\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\tacc /= float(oversamples * oversamples);\r\n\r\n\tfragColor = acc; \r\n}\r\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("pass4_result")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("source")
        del param

    param = lastNode.getParam("mipmap2")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap2")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel2")
    if param is not None:
        param.setValue("strength_map")
        del param

    param = lastNode.getParam("mipmap3")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap3")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel3")
    if param is not None:
        param.setValue("mask")
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("blength")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Amount :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("strength of the distortion")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(511.9999999999999, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("spacing")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Softness :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("spacing between pixel samples")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(1.5, 0)
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("oversamples")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Oversampling :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("number of pixel samples")
        del param

    param = lastNode.getParam("paramDefaultInt2")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramMinInt2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxInt2")
    if param is not None:
        param.setValue(32, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("output_matte")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Output matte :")
        del param

    param = lastNode.getParam("paramHint3")
    if param is not None:
        param.setValue("output matte")
        del param

    param = lastNode.getParam("paramDefaultBool3")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Shader_pass5"

    # Start of node "Shadertoy1_2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1_2")
    lastNode.setLabel("Shader_pass6")
    lastNode.setPosition(4461, 5067)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1_2 = lastNode

    param = lastNode.getParam("paramValueFloat0")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramValueInt1")
    if param is not None:
        param.setValue(16, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\r\n//\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//                        MM.                          .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\r\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\r\n//                   MM.  .MmM              MMMM      MMM.  .MM\r\n//                  MM.  .MMM                 MM       MMM.  .MM\r\n//                 MM.  .MMM                   M        MMM.  .MM\r\n//                MM.  .MMM                              MMM.  .MM\r\n//                 MM.  .MMM                            MMM.  .MM\r\n//                  MM.  .MMM       M                  MMM.  .MM\r\n//                   MM.  .MMM      MM                MMM.  .MM\r\n//                    MM.  .MMM     MMM              MMM.  .MM\r\n//                     MM.  .MMM    MMMM            MMM.  .MM\r\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\r\n//                        MM.                          .MM\r\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n//\r\n//\r\n//\r\n//\r\n// Adaptation pour Natron par F. Fernandez\r\n// Code original : crok_heathaze Matchbox pour Autodesk Flame\r\n\r\n// Adapted to Natron by F.Fernandez\r\n// Original code : crok_heathaze Matchbox for Autodesk Flame\r\n\r\n\r\n// iChannel0: pass4_result, filter = linear,wrap=clamp\r\n// iChannel1: pass5_result, filter = linear,wrap=clamp\r\n// iChannel2: strength_map, filter = linear,wrap=clamp\r\n// BBox: iChannel0\r\n\r\n// Directional blur driven by gradient vectors of front input\r\n// lewis@lewissaunders.com\r\n\r\n\r\nuniform float blur_length = 3.0; // Amount : (strength of applied hmotion blu), min=0.0, max=512.0\r\nuniform int samples = 16; // Samples : (motion blur samples), min=2, max=128\r\n\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\r\n\tvec2 xy = fragCoord.xy;\r\n\tvec2 uv = fragCoord.xy / vec2( iResolution.x, iResolution.y );\r\n\t\r\n\tfloat strength = texture2D(iChannel2, uv).r;\r\n\r\n\t// Factor to convert [0,1] texture coords to pixels\r\n\tvec2 px = vec2(1.0) / vec2(iResolution.x, iResolution.y);\r\n\r\n\t// Get vectors from previous pass\r\n\tvec2 d = texture2D(iChannel0, xy * px).xy;\r\n\r\n\tif(length(d) == 0.0) {\r\n\t\t// No gradient at this point in the map, early out\r\n\t\tfragColor = texture2D(iChannel1, xy * px);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvec4 a = vec4(0.0);\r\n\tfloat sam = float(samples);\r\n\tfloat steps;\r\n\tbool odd = false;\r\n\r\n\tif(mod(sam, 2.0) == 1.0) {\r\n\t\todd = true;\r\n\t}\r\n\tif(odd) {\r\n\t\t// Odd number of samples, start with a sample from the current position\r\n\t\ta = texture2D(iChannel1, xy * px);\r\n\t\tsteps = (sam - 1.0) / 2.0;\r\n\t} else {\r\n\t\t// Even number of samples, start with nothing\r\n\t\ta = vec4(0.0);\r\n\t\tsteps = (sam / 2.0) - 1.0;\r\n\t}\r\n\r\n\t// Now accumulate along the path forwards...\r\n\tif(!odd) {\r\n\t\t// Even number of samples, first step is half length\r\n\t\txy += 0.5 * d * blur_length * strength / (sam - 1.0);\r\n\t\ta += texture2D(iChannel1, xy * px);\r\n\t}\r\n\tfor(float i = 0.0; i < steps; i++) {\r\n\t\td = texture2D(iChannel0, xy * px).xy;\r\n\t\txy += d * blur_length * strength / (sam - 1.0);\r\n\t\ta += texture2D(iChannel1, xy * px);\r\n\t}\r\n\t\r\n\t// ...and backwards\r\n\txy = fragCoord.xy;\r\n\td = texture2D(iChannel0, xy * px).xy;\r\n\tif(!odd) {\r\n\t\t// Even number of samples, first step is half length\r\n\t\txy -= 0.5 * d * blur_length * strength / (sam - 1.0);\r\n\t\ta += texture2D(iChannel1, xy * px);\r\n\t}\r\n\tfor(float i = 0.0; i < steps; i++) {\r\n\t\txy -= d * blur_length * strength / (sam - 1.0);\r\n\t\ta += texture2D(iChannel1, xy * px);\r\n\t\td = texture2D(iChannel0, xy * px).xy;\r\n\t}\r\n\r\n\ta /= sam;\r\n\tfragColor = a;\r\n}\r\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("pass4_result")
        del param

    param = lastNode.getParam("mipmap1")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap1")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel1")
    if param is not None:
        param.setValue("pass5_result")
        del param

    param = lastNode.getParam("mipmap2")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap2")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel2")
    if param is not None:
        param.setValue("strength_map")
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("blur_length")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Amount :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("strength of applied hmotion blu")
        del param

    param = lastNode.getParam("paramDefaultFloat0")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramMinFloat0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat0")
    if param is not None:
        param.setValue(511.9999999999999, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("samples")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Samples :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("motion blur samples")
        del param

    param = lastNode.getParam("paramDefaultInt1")
    if param is not None:
        param.setValue(16, 0)
        del param

    param = lastNode.getParam("paramMinInt1")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramMaxInt1")
    if param is not None:
        param.setValue(128, 0)
        del param

    del lastNode
    # End of node "Shadertoy1_2"

    # Start of node "Backdrop1"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop1")
    lastNode.setLabel("Backdrop1")
    lastNode.setPosition(3875, 3567)
    lastNode.setSize(500, 318)
    lastNode.setColor(0.702, 0.702, 0.702)
    groupBackdrop1 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"8\" color=\"#000000\" face=\"Segoe UI\">NOISE GENERATOR</font>")
        del param

    del lastNode
    # End of node "Backdrop1"

    # Start of node "Backdrop2"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop2")
    lastNode.setLabel("Backdrop2")
    lastNode.setPosition(4278, 4935)
    lastNode.setSize(416, 281)
    lastNode.setColor(0.702, 0.702, 0.702)
    groupBackdrop2 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"8\" color=\"#000000\" face=\"Segoe UI\">MOTION BLUR</font>")
        del param

    del lastNode
    # End of node "Backdrop2"

    # Start of node "Switch_OUT"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_OUT")
    lastNode.setLabel("Switch_OUT")
    lastNode.setPosition(4461, 5145)
    lastNode.setSize(80, 32)
    lastNode.setColor(1, 1, 1)
    groupSwitch_OUT = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(2, 0)
        del param

    del lastNode
    # End of node "Switch_OUT"

    # Start of node "Crop_Source"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop_Source")
    lastNode.setLabel("Crop_Source")
    lastNode.setPosition(3848, 4684)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop_Source = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop_Source"

    # Start of node "Crop_Mask"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop_Mask")
    lastNode.setLabel("Crop_Mask")
    lastNode.setPosition(3832, 4479)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop_Mask = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop_Mask"

    # Start of node "Crop_Displace"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop_Displace")
    lastNode.setLabel("Crop_Displace")
    lastNode.setPosition(4509, 3822)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop_Displace = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop_Displace"

    # Start of node "Crop_Strength"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop_Strength")
    lastNode.setLabel("Crop_Strength")
    lastNode.setPosition(4694, 3824)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop_Strength = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop_Strength"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupSwitch_OUT)
    groupShader_pass3.connectInput(0, groupShadertoy2)
    groupDot1.connectInput(0, groupCrop_Displace)
    groupDot2.connectInput(0, groupDot1)
    groupDot3.connectInput(0, groupCrop_Strength)
    groupDot4.connectInput(0, groupDot3)
    groupShadertoy2.connectInput(0, groupShader_pass1)
    groupShadertoy2.connectInput(1, groupDot1)
    groupShader_pass4.connectInput(0, groupShader_pass3)
    groupShader_pass4.connectInput(1, groupDot2)
    groupShader_pass5.connectInput(0, groupShader_pass4)
    groupShader_pass5.connectInput(1, groupCrop_Source)
    groupShader_pass5.connectInput(2, groupDot3)
    groupShader_pass5.connectInput(3, groupCrop_Mask)
    groupShadertoy1_2.connectInput(0, groupShader_pass4)
    groupShadertoy1_2.connectInput(1, groupShader_pass5)
    groupShadertoy1_2.connectInput(2, groupDot4)
    groupSwitch_OUT.connectInput(0, groupShader_pass1)
    groupSwitch_OUT.connectInput(1, groupShader_pass4)
    groupSwitch_OUT.connectInput(2, groupShadertoy1_2)
    groupCrop_Source.connectInput(0, groupSource)
    groupCrop_Mask.connectInput(0, groupMask)
    groupCrop_Displace.connectInput(0, groupDisplace_map)
    groupCrop_Strength.connectInput(0, groupStrength_map)

    param = groupShader_pass3.getParam("paramValueFloat0")
    param.slaveTo(groupShadertoy2.getParam("paramValueFloat0"), 0, 0)
    del param
    param = groupShadertoy2.getParam("paramValueFloat0")
    group.getParam("Shadertoy2paramValueFloat0").setAsAlias(param)
    del param
    param = groupShadertoy2.getParam("paramValueBool1")
    group.getParam("Shadertoy2paramValueBool1").setAsAlias(param)
    del param
    param = groupShader_pass4.getParam("paramValueBool0")
    param.slaveTo(groupShadertoy2.getParam("paramValueBool1"), 0, 0)
    del param
    param = groupShader_pass1.getParam("paramValueFloat0")
    group.getParam("Shader_pass1paramValueFloat0").setAsAlias(param)
    del param
    param = groupShader_pass1.getParam("paramValueFloat1")
    group.getParam("Shader_pass1paramValueFloat1").setAsAlias(param)
    del param
    param = groupShader_pass1.getParam("paramValueVec32")
    param.slaveTo(group.getParam("xDir"), 0, 0)
    param.slaveTo(group.getParam("yDir"), 1, 0)
    param.slaveTo(group.getParam("zDir"), 2, 0)
    del param
    param = groupShader_pass5.getParam("paramValueFloat0")
    group.getParam("Shader_pass5paramValueFloat0").setAsAlias(param)
    del param
    param = groupShader_pass5.getParam("paramValueFloat1")
    group.getParam("Shader_pass5paramValueFloat1").setAsAlias(param)
    del param
    param = groupShader_pass5.getParam("paramValueInt2")
    group.getParam("Shader_pass5paramValueInt2").setAsAlias(param)
    del param
    param = groupShader_pass5.getParam("paramValueBool3")
    group.getParam("Shader_pass5paramValueBool3").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat0")
    group.getParam("Shadertoy1_2paramValueFloat0").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt1")
    group.getParam("Shadertoy1_2paramValueInt1").setAsAlias(param)
    del param
    param = groupSwitch_OUT.getParam("which")
    param.setExpression("thisGroup.outChoice.get()", False, 0)
    del param
    param = groupCrop_Source.getParam("size")
    param.setExpression("myWidth = Source.getOutputFormat().width()\nret = myWidth", True, 0)
    param.setExpression("myWidth = Source.getOutputFormat().height()\nret = myWidth", True, 1)
    del param
    param = groupCrop_Mask.getParam("size")
    param.setExpression("myWidth = Mask.getOutputFormat().width()\nret = myWidth", True, 0)
    param.setExpression("myWidth = Mask.getOutputFormat().height()\nret = myWidth", True, 1)
    del param
    param = groupCrop_Displace.getParam("size")
    param.setExpression("myWidth = Displace_map.getOutputFormat().width()\nret = myWidth", True, 0)
    param.setExpression("myWidth = Displace_map.getOutputFormat().height()\nret = myWidth", True, 1)
    del param
    param = groupCrop_Strength.getParam("size")
    param.setExpression("myWidth = Strength_map.getOutputFormat().width()\nret = myWidth", True, 0)
    param.setExpression("myWidth = Strength_map.getOutputFormat().height()\nret = myWidth", True, 1)
    del param

    try:
        extModule = sys.modules["Crok_heathaze_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
