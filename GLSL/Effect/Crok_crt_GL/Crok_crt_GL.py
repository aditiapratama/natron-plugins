# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Crok_crt_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Crok_crt_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Crok_crt_GL"

def getLabel():
    return "Crok_crt_GL"

def getVersion():
    return 1.0

def getIconPath():
    return "Crok_crt_GL.png"

def getGrouping():
    return "Community/GLSL/Effect"

def getPluginDescription():
    return "Creates a CRT style scan-line effect with additional shadowmasking."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(1, 0.2353, 0.2353)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("SCANLINE", "Scanline")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.SCANLINE = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createChoiceParam("typeChoice", "Type : ")
    entries = [ ("no mask", ""),
    ("TV 1", ""),
    ("TV 2", ""),
    ("VGA", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("TV 1")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.typeChoice = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat2", "Amount : ")
    param.setMinimum(1, 0)
    param.setMaximum(99.99999999999999, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(99.99999999999999, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat2 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat4", "Contrast : ")
    param.setMinimum(-1, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.7, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat4 = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("WARP", "Warp")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.WARP = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createBooleanParam("Shadertoy1_2paramValueBool0", "Warp : ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueBool0 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat1", "Warp : ")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat1 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createSeparatorParam("BLUR", "Blur")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.BLUR = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat5", "Blur input : ")
    param.setMinimum(0, 0)
    param.setMaximum(5, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat5 = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat6", "Amount : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat6 = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "Crok_crt_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE01", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE01 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4138, 4078)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput2 = lastNode

    del lastNode
    # End of node "Output2"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(4138, 3575)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Shadertoy1_2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1_2")
    lastNode.setLabel("Shadertoy1_2")
    lastNode.setPosition(4138, 3837)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1_2 = lastNode

    param = lastNode.getParam("paramValueInt3")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : crok_crt Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : crok_crt Matchbox for Autodesk Flame\n\n\n// iChannel0: Source, filter=linear, wrap=clamp\n// BBox: iChannel0\n\n// based on https://www.shadertoy.com/view/MtSfRK by TimothyLottes\n\n\n\nuniform bool vignette_enable = true; // Warp : (warp)\n\nuniform float warp = 3.0; // Warp : (warp), min=0.0, max=10.0\nuniform float reso = 3.0; // Amount : (amount), min=1.0, max=100.0\n\n\n#define CRTS_WARP\n\n// Try different masks\nuniform int mask_grille = 1; // Type : (type), min=0, max=3\n//#define CRTS_MASK_NONE\n//#define CRTS_MASK_GRILLE_LITE\n//#define CRTS_MASK_GRILLE\n//#define CRTS_MASK_SHADOW\n//--------------------------------------------------------------\n// Since shadertoy doesn\'t have sRGB textures\n// And we need linear input into shader\n// Don\'t do this in your code\nfloat FromSrgb1(float c){\n return (c<=0.04045)?c*(1.0/12.92):\n  pow(c*(1.0/1.055)+(0.055/1.055),2.4);}\n//--------------------------------------------------------------\nvec3 FromSrgb(vec3 c){return vec3(\n FromSrgb1(c.r),FromSrgb1(c.g),FromSrgb1(c.b));}\n//--------------------------------------------------------------\n// Scanline thinness\n//  0.50 = fused scanlines\n//  0.70 = recommended default\n//  1.00 = thinner scanlines (too thin)\nuniform float INPUT_THIN = 0.70; // Contrast : (contrast), min=-1.0, max=1.0\n//--------------------------------------------------------------\n// Horizonal scan blur\n//  -3.0 = pixely\n//  -2.5 = default\n//  -2.0 = smooth\n//  -1.0 = too blurry\nuniform float INPUT_BLUR = 3.0; // Blur input : (blur input), min=0.0, max=5.0\n//--------------------------------------------------------------\n// Shadow mask effect, ranges from,\n//  0.25 = large amount of mask (not recommended, too dark)\n//  0.50 = recommended default\n//  1.00 = no shadow mask\nuniform float INPUT_MASK = 0.5; // Amount : (amount), min=0.0, max=1.0\n//--------------------------------------------------------------\n//#define INPUT_X 128.0\n//#define INPUT_Y 54.0\nfloat INPUT_X = iResolution.x / reso;\nfloat INPUT_Y = iResolution.y / reso;\n\n//--------------------------------------------------------------\n\n// Setup the function which returns input image color\nvec3 CrtsFetch(vec2 uv){\n return FromSrgb(texture2D(iChannel0,uv.xy).rgb);}\n\n  #define CrtsF1 float\n  #define CrtsF2 vec2\n  #define CrtsF3 vec3\n  #define CrtsF4 vec4\n  #define CrtsFractF1 fract\n  #define CrtsRcpF1(x) (1.0/(x))\n  #define CrtsSatF1(x) clamp((x),0.0,1.0)\n//--------------------------------------------------------------\n  CrtsF1 CrtsMax3F1(CrtsF1 a,CrtsF1 b,CrtsF1 c){\n   return max(a,max(b,c));}\n\n//==============================================================\n //_____________________________/\\_______________________________\n//==============================================================\n//              TONAL CONTROL CONSTANT GENERATION\n//--------------------------------------------------------------\n// This is in here for rapid prototyping\n// Please use the CPU code and pass in as constants\n//==============================================================\n CrtsF4 CrtsTone(\n CrtsF1 contrast,\n CrtsF1 saturation,\n CrtsF1 thin,\n CrtsF1 mask){\n//--------------------------------------------------------------\n  if (mask_grille == 0)\n     mask=1.0;\n//--------------------------------------------------------------\n  if (mask_grille == 1)\n  {\n    // Normal R mask is {1.0,mask,mask}\n    // LITE   R mask is {mask,1.0,1.0}\n    mask=0.5+mask*0.5;\n  }\n\n//--------------------------------------------------------------\n  CrtsF4 ret;\n  CrtsF1 midOut=0.18/((1.5-thin)*(0.5*mask+0.5));\n  CrtsF1 pMidIn=pow(0.18,contrast);\n  ret.x=contrast;\n  ret.y=((-pMidIn)+midOut)/((1.0-pMidIn)*midOut);\n  ret.z=((-pMidIn)*midOut+pMidIn)/(midOut*(-pMidIn)+midOut);\n  ret.w=contrast+saturation;\n  return ret;}\n//_____________________________/\\_______________________________\n//==============================================================\n//                            MASK\n//--------------------------------------------------------------\n// Letting LCD/OLED pixel elements function like CRT phosphors\n// So \"phosphor\" resolution scales with display resolution\n//--------------------------------------------------------------\n// Not applying any warp to the mask (want high frequency)\n// Real aperture grille has a mask which gets wider on ends\n// Not attempting to be \"real\" but instead look the best\n//--------------------------------------------------------------\n// Shadow mask is stretched horizontally\n//  RRGGBB\n//  GBBRRG\n//  RRGGBB\n// This tends to look better on LCDs than vertical\n// Also 2 pixel width is required to get triad centered\n//--------------------------------------------------------------\n// The LITE version of the Aperture Grille is brighter\n// Uses {dark,1.0,1.0} for R channel\n// Non LITE version uses {1.0,dark,dark}\n//--------------------------------------------------------------\n// \'pos\' - This is \'fragCoord.xy\'\n//         Pixel {0,0} should be {0.5,0.5}\n//         Pixel {1,1} should be {1.5,1.5}\n//--------------------------------------------------------------\n// \'dark\' - Exposure of of masked channel\n//          0.0=fully off, 1.0=no effect\n//==============================================================\n CrtsF3 CrtsMask(CrtsF2 pos,CrtsF1 dark){\n  if (mask_grille == 2)\n  {\n    CrtsF3 m=CrtsF3(dark,dark,dark);\n    CrtsF1 x=CrtsFractF1(pos.x*(1.0/3.0));\n    if(x<(1.0/3.0))m.r=1.0;\n    else if(x<(2.0/3.0))m.g=1.0;\n    else m.b=1.0;\n    return m;\n  }\n\n//--------------------------------------------------------------\n  if (mask_grille == 1)\n  {\n    CrtsF3 m=CrtsF3(1.0,1.0,1.0);\n    CrtsF1 x=CrtsFractF1(pos.x*(1.0/3.0));\n    if(x<(1.0/3.0))m.r=dark;\n    else if(x<(2.0/3.0))m.g=dark;\n    else m.b=dark;\n    return m;\n  }\n\n//--------------------------------------------------------------\n  if (mask_grille == 0)\n   return CrtsF3(1.0,1.0,1.0);\n//--------------------------------------------------------------\n  if (mask_grille == 3)\n  {\n    pos.x+=pos.y*3.0;\n    CrtsF3 m=CrtsF3(dark,dark,dark);\n    CrtsF1 x=CrtsFractF1(pos.x*(1.0/6.0));\n    if(x<(1.0/3.0))m.r=1.0;\n    else if(x<(2.0/3.0))m.g=1.0;\n    else m.b=1.0;\n    return m;\n  }\n }\n//_____________________________/\\_______________________________\n//==============================================================\n//                        FILTER ENTRY\n//--------------------------------------------------------------\n// Input must be linear\n// Output color is linear\n//--------------------------------------------------------------\n// Must have fetch function setup: CrtsF3 CrtsFetch(CrtsF2 uv)\n//  - The \'uv\' range is {0.0 to 1.0} for input texture\n//  - Output of this must be linear color\n//--------------------------------------------------------------\n// SCANLINE MATH & AUTO-EXPOSURE NOTES\n// ===================================\n// Each output line has contribution from at most 2 scanlines\n// Scanlines are shaped by a windowed cosine function\n// This shape blends together well with only 2 lines of overlap\n//--------------------------------------------------------------\n// Base scanline intensity is as follows\n// which leaves output intensity range from {0 to 1.0}\n// --------\n// thin := range {thick 0.5 to thin 1.0}\n// off  := range {0.0 to <1.0},\n//         sub-pixel offset between two scanlines\n//  --------\n//  a0=cos(min(0.5,     off *thin)*2pi)*0.5+0.5;\n//  a1=cos(min(0.5,(1.0-off)*thin)*2pi)*0.5+0.5;\n//--------------------------------------------------------------\n// This leads to a image darkening factor of roughly:\n//  {(1.5-thin)/1.0}\n// This is further reduced by the mask:\n//  {1.0/2.0+mask*1.0/2.0}\n// Reciprocal of combined effect is used for auto-exposure\n//  to scale up the mid-level in the tonemapper\n//==============================================================\n CrtsF3 CrtsFilter(\n//--------------------------------------------------------------\n  // SV_POSITION, fragCoord.xy\n  CrtsF2 ipos,\n//--------------------------------------------------------------\n  // inputSize / outputSize (in pixels)\n  CrtsF2 inputSizeDivOutputSize,\n//--------------------------------------------------------------\n  // 0.5 * inputSize (in pixels)\n  CrtsF2 halfInputSize,\n//--------------------------------------------------------------\n  // 1.0 / inputSize (in pixels)\n  CrtsF2 rcpInputSize,\n//--------------------------------------------------------------\n  // 1.0 / outputSize (in pixels)\n  CrtsF2 rcpOutputSize,\n//--------------------------------------------------------------\n  // 2.0 / outputSize (in pixels)\n  CrtsF2 twoDivOutputSize,\n//--------------------------------------------------------------\n  // inputSize.y\n  CrtsF1 inputHeight,\n//--------------------------------------------------------------\n  // Warp scanlines but not phosphor mask\n  //  0.0 = no warp\n  //  1.0/64.0 = light warping\n  //  1.0/32.0 = more warping\n  // Want x and y warping to be different (based on aspect)\n  CrtsF2 warp,\n//--------------------------------------------------------------\n  // Scanline thinness\n  //  0.50 = fused scanlines\n  //  0.70 = recommended default\n  //  1.00 = thinner scanlines (too thin)\n  // Shared with CrtsTone() function\n  CrtsF1 thin,\n//--------------------------------------------------------------\n  // Horizonal scan blur\n  //  -3.0 = pixely\n  //  -2.5 = default\n  //  -2.0 = smooth\n  //  -1.0 = too blurry\n  CrtsF1 blur,\n//--------------------------------------------------------------\n  // Shadow mask effect, ranges from,\n  //  0.25 = large amount of mask (not recommended, too dark)\n  //  0.50 = recommended default\n  //  1.00 = no shadow mask\n  // Shared with CrtsTone() function\n  CrtsF1 mask,\n//--------------------------------------------------------------\n  // Tonal curve parameters generated by CrtsTone()\n  CrtsF4 tone\n//--------------------------------------------------------------\n ){\n\n  // Optional apply warp\n  CrtsF2 pos;\n   // Convert to {-1 to 1} range\n   pos=ipos*twoDivOutputSize-CrtsF2(1.0,1.0);\n   // Distort pushes image outside {-1 to 1} range\n   pos*=CrtsF2(\n    1.0+(pos.y*pos.y)*warp.x,\n    1.0+(pos.x*pos.x)*warp.y);\n   // TODO: Vignette needs optimization\n   float vig_en = 0.0;\n   if (vignette_enable)\n   vig_en = 1.0;\n   CrtsF1 vin=1.0 * vig_en-((1.0-CrtsSatF1(pos.x*pos.x))*(1.0-CrtsSatF1(pos.y*pos.y)));\n\n   vin=CrtsSatF1((-vin)*inputHeight+inputHeight);\n   // Leave in {0 to inputSize}\n   pos=pos*halfInputSize+halfInputSize;\n//--------------------------------------------------------------\n  // Snap to center of first scanline\n  CrtsF1 y0=floor(pos.y-0.5)+0.5;\n   // Snap to center of one of four pixels\n   CrtsF1 x0=floor(pos.x-1.5)+0.5;\n   // Inital UV position\n   CrtsF2 p=CrtsF2(x0*rcpInputSize.x,y0*rcpInputSize.y);\n   // Fetch 4 nearest texels from 2 nearest scanlines\n   CrtsF3 colA0=CrtsFetch(p);\n   p.x+=rcpInputSize.x;\n   CrtsF3 colA1=CrtsFetch(p);\n   p.x+=rcpInputSize.x;\n   CrtsF3 colA2=CrtsFetch(p);\n   p.x+=rcpInputSize.x;\n   CrtsF3 colA3=CrtsFetch(p);\n   p.y+=rcpInputSize.y;\n   CrtsF3 colB3=CrtsFetch(p);\n   p.x-=rcpInputSize.x;\n   CrtsF3 colB2=CrtsFetch(p);\n   p.x-=rcpInputSize.x;\n   CrtsF3 colB1=CrtsFetch(p);\n   p.x-=rcpInputSize.x;\n   CrtsF3 colB0=CrtsFetch(p);\n\n//--------------------------------------------------------------\n  // Vertical filter\n  // Scanline intensity is using sine wave\n  // Easy filter window and integral used later in exposure\n  CrtsF1 off=pos.y-y0;\n  CrtsF1 pi2=6.28318530717958;\n  CrtsF1 hlf=0.5;\n  CrtsF1 scanA=cos(min(0.5,  off *thin     )*pi2)*hlf+hlf;\n  CrtsF1 scanB=cos(min(0.5,(-off)*thin+thin)*pi2)*hlf+hlf;\n//--------------------------------------------------------------\n\n   // Horizontal kernel is simple gaussian filter\n   CrtsF1 off0=pos.x-x0;\n   CrtsF1 off1=off0-1.0;\n   CrtsF1 off2=off0-2.0;\n   CrtsF1 off3=off0-3.0;\n   CrtsF1 pix0=exp2(blur*off0*off0);\n   CrtsF1 pix1=exp2(blur*off1*off1);\n   CrtsF1 pix2=exp2(blur*off2*off2);\n   CrtsF1 pix3=exp2(blur*off3*off3);\n   CrtsF1 pixT=CrtsRcpF1(pix0+pix1+pix2+pix3);\n\n    // Get rid of wrong pixels on edge\n    pixT *=vin;\n\n   scanA *=pixT;\n   scanB *=pixT;\n   // Apply horizontal and vertical filters\n   CrtsF3 color=\n    (colA0*pix0+colA1*pix1+colA2*pix2+colA3*pix3)*scanA +\n    (colB0*pix0+colB1*pix1+colB2*pix2+colB3*pix3)*scanB;\n\n  // Apply phosphor mask\n  color*=CrtsMask(ipos,mask);\n  // Optional color processing\n  // Tonal control, start by protecting from /0\n  CrtsF1 peak=max(1.0/(256.0*65536.0),\n  CrtsMax3F1(color.r,color.g,color.b));\n  // Compute the ratios of {R,G,B}\n  CrtsF3 ratio=color*CrtsRcpF1(peak);\n  // Apply tonal curve to peak value\n  peak=pow(peak,tone.x);\n  peak=peak*CrtsRcpF1(peak*tone.y+tone.z);\n  // Apply saturation\n  ratio=pow(ratio,CrtsF3(tone.w,tone.w,tone.w));\n  // Reconstruct color\n  return ratio*peak;\n  }\n\n// Convert from linear to sRGB\nfloat ToSrgb1(float c){\n return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\n//--------------------------------------------------------------\nvec3 ToSrgb(vec3 c){return vec3(\n ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}\n//-------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  fragColor.rgb=CrtsFilter(\n  fragCoord.xy,\n  vec2(INPUT_X,INPUT_Y)/iResolution.xy,\n  vec2(INPUT_X,INPUT_Y)*vec2(0.5,0.5),\n  1.0/vec2(INPUT_X,INPUT_Y),\n  1.0/iResolution.xy,\n  2.0/iResolution.xy,\n  INPUT_Y,\n  vec2(1.0/48.0 * warp,1.0/24.0 *warp),\n  INPUT_THIN * - 1.0,\n  INPUT_BLUR - 6.0,\n  1.0 - INPUT_MASK,\n  CrtsTone(1.0,0.0,INPUT_THIN,INPUT_MASK));\n  fragColor = vec4(ToSrgb(fragColor.rgb), 1.0);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("linear")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Source")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(7, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("vignette_enable")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Warp :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("warp")
        del param

    param = lastNode.getParam("paramDefaultBool0")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("warp")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Warp :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("warp")
        del param

    param = lastNode.getParam("paramDefaultFloat1")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramMinFloat1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat1")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("reso")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Amount :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("amount")
        del param

    param = lastNode.getParam("paramDefaultFloat2")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramMinFloat2")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMaxFloat2")
    if param is not None:
        param.setValue(99.99999999999999, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("mask_grille")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Type :")
        del param

    param = lastNode.getParam("paramHint3")
    if param is not None:
        param.setValue("type")
        del param

    param = lastNode.getParam("paramDefaultInt3")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinInt3")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt3")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("INPUT_THIN")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("Contrast :")
        del param

    param = lastNode.getParam("paramHint4")
    if param is not None:
        param.setValue("contrast")
        del param

    param = lastNode.getParam("paramDefaultFloat4")
    if param is not None:
        param.setValue(0.7, 0)
        del param

    param = lastNode.getParam("paramMinFloat4")
    if param is not None:
        param.setValue(-1, 0)
        del param

    param = lastNode.getParam("paramMaxFloat4")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramType5")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName5")
    if param is not None:
        param.setValue("INPUT_BLUR")
        del param

    param = lastNode.getParam("paramLabel5")
    if param is not None:
        param.setValue("Blur input :")
        del param

    param = lastNode.getParam("paramHint5")
    if param is not None:
        param.setValue("blur input")
        del param

    param = lastNode.getParam("paramDefaultFloat5")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramMinFloat5")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat5")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramType6")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName6")
    if param is not None:
        param.setValue("INPUT_MASK")
        del param

    param = lastNode.getParam("paramLabel6")
    if param is not None:
        param.setValue("Amount :")
        del param

    param = lastNode.getParam("paramHint6")
    if param is not None:
        param.setValue("amount")
        del param

    param = lastNode.getParam("paramDefaultFloat6")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    param = lastNode.getParam("paramMinFloat6")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxFloat6")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Shadertoy1_2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput2.connectInput(0, groupShadertoy1_2)
    groupShadertoy1_2.connectInput(0, groupSource)

    param = groupShadertoy1_2.getParam("paramValueBool0")
    group.getParam("Shadertoy1_2paramValueBool0").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat1")
    group.getParam("Shadertoy1_2paramValueFloat1").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat2")
    group.getParam("Shadertoy1_2paramValueFloat2").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt3")
    param.setExpression("thisGroup.typeChoice.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat4")
    group.getParam("Shadertoy1_2paramValueFloat4").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat5")
    group.getParam("Shadertoy1_2paramValueFloat5").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat6")
    group.getParam("Shadertoy1_2paramValueFloat6").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["Crok_crt_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
