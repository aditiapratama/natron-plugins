# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Chromatic_adaptation_GLExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Chromatic_adaptation_GLExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Chromatic_adaptation_GL"

def getLabel():
    return "Chromatic_adaptation_GL"

def getVersion():
    return 1.0

def getIconPath():
    return "Chromatic_adaptation_GL.png"

def getGrouping():
    return "Community/GLSL/Color"

def getPluginDescription():
    return "This shader performs a chromatic adaptation. It also takes care of any necessary color space conversions."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.2941, 0.5294, 1)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("INPUT", "Input")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.INPUT = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createChoiceParam("InColSpace", "Input Colour Space : ")
    entries = [ ("ACEScg", ""),
    ("ACES2065-1", ""),
    ("Rec. 709", ""),
    ("Rec. 2020", ""),
    ("P3D65", ""),
    ("XYZ", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Input colour space. Note that the input must be linear in all cases.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.InColSpace = param
    del param

    param = lastNode.createChoiceParam("InWhiteType", "Input White Type : ")
    entries = [ ("Native", ""),
    ("Illuminant", ""),
    ("Colour Temperature", ""),
    ("xy Coordinates", ""),
    ("from Colour", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Input white point type.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.InWhiteType = param
    del param

    param = lastNode.createChoiceParam("InIllum", "Input Illuminant : ")
    entries = [ ("ACES", ""),
    ("HD D65", ""),
    ("DCI", ""),
    ("Equal Energy", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Input white point illuminant.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.InIllum = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createDoubleParam("InTemp", "Input Temp : ")
    param.setMinimum(4000, 0)
    param.setMaximum(25000, 0)
    param.setDisplayMinimum(4000, 0)
    param.setDisplayMaximum(25000, 0)
    param.setDefaultValue(6000, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Correlated colour temperature of the input white point (per Illuminant series D).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.InTemp = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createDoubleParam("InTint", "Input Tint : ")
    param.setMinimum(-1, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Correlated colour tint of the input white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.InTint = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createBooleanParam("Shadertoy1_2paramValueBool4", "Input Temp Shift : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueBool4 = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createDouble2DParam("Shadertoy1_2paramValueVec25", "Input Coordinates : ")
    param.setDefaultValue(0.32168, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(0.33767, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("CIE 1931 xy coordinates of the input white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueVec25 = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createColorParam("Shadertoy1_2paramValueVec36", "Input Colour : ", False)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Colour representation of the input white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueVec36 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createChoiceParam("InSurround", "Input Surround : ")
    entries = [ ("Average", ""),
    ("Dim", ""),
    ("Dark", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Viewing conditions.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.InSurround = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createDoubleParam("InFieldLum", "Input Field Luminance : ")
    param.setMinimum(1e-07, 0)
    param.setMaximum(1000000, 0)
    param.setDisplayMinimum(1e-07, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Input field luminance.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.InFieldLum = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createDoubleParam("InRelBG", "Input Relative BG : ")
    param.setMinimum(1e-07, 0)
    param.setMaximum(1000000, 0)
    param.setDisplayMinimum(1e-07, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.InRelBG = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    param = lastNode.createSeparatorParam("OUTPUT", "Output")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OUTPUT = param
    del param

    param = lastNode.createStringParam("sep16", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep16 = param
    del param

    param = lastNode.createStringParam("sep17", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep17 = param
    del param

    param = lastNode.createChoiceParam("OutColSpace", "Output Colour Space : ")
    entries = [ ("ACEScg", ""),
    ("ACES2065-1", ""),
    ("Rec. 709", ""),
    ("Rec. 2020", ""),
    ("P3D65", ""),
    ("XYZ", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Output colour space. Note that the input must be linear in all cases.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.OutColSpace = param
    del param

    param = lastNode.createChoiceParam("OutWhiteType", "Output White Type : ")
    entries = [ ("Native", ""),
    ("Illuminant", ""),
    ("Colour Temperature", ""),
    ("xy Coordinates", ""),
    ("from Colour", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Output white type.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.OutWhiteType = param
    del param

    param = lastNode.createChoiceParam("OutIllum", "Output Illuminant : ")
    entries = [ ("ACES", ""),
    ("HD D65", ""),
    ("DCI", ""),
    ("Equal Energy", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.OutIllum = param
    del param

    param = lastNode.createStringParam("sep18", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep18 = param
    del param

    param = lastNode.createStringParam("sep19", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep19 = param
    del param

    param = lastNode.createDoubleParam("OutTemp", "Output Temp : ")
    param.setMinimum(4000, 0)
    param.setMaximum(25000, 0)
    param.setDisplayMinimum(4000, 0)
    param.setDisplayMaximum(25000, 0)
    param.setDefaultValue(6000, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Correlated colour temperature of the output white point (per Illuminant series D).")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.OutTemp = param
    del param

    param = lastNode.createStringParam("sep20", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep20 = param
    del param

    param = lastNode.createDoubleParam("OutTint", "Output Tint : ")
    param.setMinimum(-1, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(-1, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Correlated colour tint of the output white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.OutTint = param
    del param

    param = lastNode.createStringParam("sep21", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep21 = param
    del param

    param = lastNode.createBooleanParam("Shadertoy1_2paramValueBool13", "Output Temp Shift : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueBool13 = param
    del param

    param = lastNode.createStringParam("sep22", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep22 = param
    del param

    param = lastNode.createDouble2DParam("Shadertoy1_2paramValueVec214", "Output Coordinates : ")
    param.setDefaultValue(0.32168, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(0.33767, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("CIE 1931 xy coordinates of the output white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueVec214 = param
    del param

    param = lastNode.createStringParam("sep23", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep23 = param
    del param

    param = lastNode.createColorParam("Shadertoy1_2paramValueVec315", "Output Colour : ", False)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDefaultValue(1, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Colour representation of the output white point.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueVec315 = param
    del param

    param = lastNode.createStringParam("sep24", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep24 = param
    del param

    param = lastNode.createChoiceParam("OutSurround", "Output Surround : ")
    entries = [ ("Average", ""),
    ("Dim", ""),
    ("Dark", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Viewing conditions.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.OutSurround = param
    del param

    param = lastNode.createStringParam("sep25", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep25 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat17", "Output Field Luminance : ")
    param.setMinimum(1.000000000000001e-07, 0)
    param.setMaximum(1000000, 0)
    param.setDisplayMinimum(1.000000000000001e-07, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Output field luminance.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat17 = param
    del param

    param = lastNode.createStringParam("sep26", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep26 = param
    del param

    param = lastNode.createDoubleParam("Shadertoy1_2paramValueFloat18", "Output Relative BG : ")
    param.setMinimum(1.000000000000001e-07, 0)
    param.setMaximum(1000000, 0)
    param.setDisplayMinimum(1.000000000000001e-07, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Relative output background brightness compared to the scene white.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Shadertoy1_2paramValueFloat18 = param
    del param

    param = lastNode.createStringParam("sep27", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep27 = param
    del param

    param = lastNode.createStringParam("sep28", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep28 = param
    del param

    param = lastNode.createSeparatorParam("OPTIONS", "Options")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OPTIONS = param
    del param

    param = lastNode.createStringParam("sep29", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep29 = param
    del param

    param = lastNode.createStringParam("sep30", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep30 = param
    del param

    param = lastNode.createChoiceParam("method", "Method : ")
    entries = [ ("CAT02", ""),
    ("CAT02 (simple)", ""),
    ("Bradford", ""),
    ("Von Kries", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("Adaptation method.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.method = param
    del param

    param = lastNode.createChoiceParam("Shadertoy1_2mipmap0", "Filter : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.Shadertoy1_2mipmap0 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "Chromatic_adaptation_GL v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE01", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE01 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "ShaderToy 0.8.8")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2019)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(4139, 4048)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(4139, 3602)
    lastNode.setSize(80, 30)
    lastNode.setColor(1, 1, 1)
    groupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "Shadertoy1_2"
    lastNode = app.createNode("net.sf.openfx.Shadertoy", 1, group)
    lastNode.setScriptName("Shadertoy1_2")
    lastNode.setLabel("Shadertoy1_2")
    lastNode.setPosition(4139, 3832)
    lastNode.setSize(80, 34)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShadertoy1_2 = lastNode

    param = lastNode.getParam("paramValueInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueInt1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueInt2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueVec23")
    if param is not None:
        param.setValue(6000, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("paramValueBool4")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramValueVec25")
    if param is not None:
        param.setValue(0.32168, 0)
        param.setValue(0.33767, 1)
        del param

    param = lastNode.getParam("paramValueVec36")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("paramValueInt7")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueVec28")
    if param is not None:
        param.setValue(20, 0)
        param.setValue(1, 1)
        del param

    param = lastNode.getParam("paramValueInt9")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueInt10")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueInt11")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueVec212")
    if param is not None:
        param.setValue(6000, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("paramValueBool13")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramValueVec214")
    if param is not None:
        param.setValue(0.32168, 0)
        param.setValue(0.33767, 1)
        del param

    param = lastNode.getParam("paramValueVec315")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("paramValueInt16")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramValueFloat17")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramValueFloat18")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramValueInt19")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("imageShaderSource")
    if param is not None:
        param.setValue("//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : chromatic adaptation pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : chromatic adaptation for Autodesk Flame\n\n\n// iChannel0: Source, filter = nearest, wrap0=clamp\n// BBox: iChannel0\n\n\n/*\n**MIT License\n**\n**Copyright (c) 2019\n**\n**Permission is hereby granted, free of charge, to any person obtaining a copy\n**of this software and associated documentation files (the \"Software\"), to deal\n**in the Software without restriction, including without limitation the rights\n**to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n**copies of the Software, and to permit persons to whom the Software is\n**furnished to do so, subject to the following conditions:\n**\n**The above copyright notice and this permission notice shall be included in all\n**copies or substantial portions of the Software.\n**\n**THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n**FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n**SOFTWARE.\n*/\n\n\nuniform int input_cs = 0; \t\t\t\t\t\t\t\t\t// Input Colour Space : (input colour space note that the input must be linear in all cases), min=0, max=5\nuniform int input_white_type = 0; \t\t\t\t\t\t\t// Input White Type : (input white point type), min=0, max=4\nuniform int input_illuminant = 0; \t\t\t\t\t\t\t// Input Illuminant : (input white point illuminant), min=0, max=3\n\nuniform vec2 InTempTint = vec2(6000.0,0.0);\t\t\t\t\t// Input Temp and Tint : \n\nuniform bool input_temperature_shift = false; \t\t\t\t// Input Temp Shift : (applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature)\nuniform vec2 input_coordinates = vec2(0.32168,0.33767); \t// Input Coordinates : (CIE 1931 xy coordinates of the input white point)\nuniform vec3 input_colour = vec3(1.0,1.0,1.0); \t\t\t\t// Input Colour : (colour representation of the input white point)\nuniform int input_surround = 0; \t\t\t\t\t\t\t// Input Surround : (viewing conditions), min=0, max=2\n\nuniform vec2 InLumBack = vec2(20.0,1.0);\t\t\t\t\t// Input Field Lum / Rel BG : \n\nuniform int output_cs = 0; \t\t\t\t\t\t\t\t\t// Output Colour Space : (output colour space note that the output must be linear in all cases), min=0, max=5\nuniform int output_white_type = 0; \t\t\t\t\t\t\t// Output White Type : (output white point type), min=0, max=4\nuniform int output_illuminant = 0; \t\t\t\t\t\t\t// Output Illuminant : (output white point illuminant), min=0, max=3\n\nuniform vec2 OutTempTint = vec2(6000.0,0.0);\t\t\t\t// Output Temp and Tint : \n\nuniform bool output_temperature_shift = false; \t\t\t\t// Output Temp Shift : (applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature)\nuniform vec2 output_coordinates = vec2(0.32168,0.33767); \t// Output Coordinates : (CIE 1931 xy coordinates of the output white point)\nuniform vec3 output_colour = vec3(1.0,1.0,1.0); \t\t\t// Output Colour : (colour representation of the output white point)\nuniform int output_surround = 0; \t\t\t\t\t\t\t// Output Surround : (viewing conditions), min=0, max=2\nuniform float output_field_luminance = 20.0; \t\t\t\t// Output Field Luminance : (output field luminance), min=0.0000001, max=1000000.0\nuniform float output_rel_background = 1.0; \t\t\t\t\t// Output Rel BG : (relative output background brightness compared to the scene white), min=0.0000001, max=1000000.0\nuniform int method = 0; \t\t\t\t\t\t\t\t\t// Method : (Adaptation method), min=0, max=3\n\n\n\n\nconst mat3 acescg_to_xyz  = mat3(.6624542,      .2722287,    -.0055746,   .1340042,  .6740818,      .0040607,   .1561877,     .0536895,    1.0103391);\nconst mat3 aces_to_xyz    = mat3(.9525523959,   .3439664498,  0.,         0.,        .7281660966,   0.,         .0000936786, -.0721325464, 1.0088251844);\nconst mat3 rec709_to_xyz  = mat3(.4123908,      .212639,      .0193308,   .3575843,  .7151687,      .1191948,   .1804808,     .0721923,    .9505322);\nconst mat3 rec2020_to_xyz = mat3(.636958,       .2627002,     0.,         .1446169,  .6779981,      .0280727,   .168881,      .0593017,    1.0609851);\nconst mat3 p3d65_to_xyz   = mat3(.4865709,      .2289746,     0.,         .2656677,  .6917385,      .0451134,   .1982173,     .0792869,    1.0439444);\nconst mat3 xyz_to_lms     = mat3(.7328,        -.7036,        .003,       .4296,     1.6975,        .0136,     -.1624,        .0061,       .9834);\nconst mat3 lms_to_hpe     = mat3(.740979,       .285353,     -.00962761,  .218025,   .624202,      -.00569803,  .0410057,     .0904451,    1.01533);\nconst mat3 hpe_to_lms     = mat3(1.55915,      -.714327,      .0107755,  -.544723,   1.85031,       .00521877, -.0144453,    -.135976,     .984006);\nconst mat3 lms_to_xyz     = mat3(1.09612,       .454369,     -.00962761, -.278869,   .473533,      -.00569803,  .182745,      .0720978,    1.01533);\nconst mat3 xyz_to_brdfrd  = mat3(.8951,        -.7502,        .0389,      .2664,     1.7135,       -.0685,     -.1614,        .0367,       1.0296);\nconst mat3 brdfrd_to_xyz  = mat3(.9869929,      .4323053,    -.0085287,  -.1470543,  .5183603,      .0400428,   .1599627,     .0492912,    .9684867);\nconst mat3 xyz_to_vkries  = mat3(.40024,       -.2263,        0.,         .7076,     1.16532,       0.,        -.08081,       .0457,       .91822);\nconst mat3 vkries_to_xyz  = mat3(1.8599364,     .3611914,     0.,        -1.1293816, .6388125,      0.,         .2198974,    -.0000064,    1.0890636);\nconst mat3 xyz_to_acescg  = mat3(1.6410234,    -.6636629,     .0117219,  -.3248033,  1.6153316,    -.0082844,  -.2364247,     .0167563,    .9883949);\nconst mat3 xyz_to_aces    = mat3(1.0498110175, -.4959030231,  0.,         0.,        1.3733130458,  0.,        -.0000974845,  .0982400361, .9912520182);\nconst mat3 xyz_to_rec709  = mat3(3.2409699,    -.9692436,     .0556301,  -1.5373832, 1.8759675,    -.203977,   -.4986108,     .0415551,    1.0569715);\nconst mat3 xyz_to_rec2020 = mat3(1.7166512,    -.6666844,     .0176399,  -.3556708,  1.6164812,    -.0427706,  -.2533663,     .0157685,    .9421031);\nconst mat3 xyz_to_p3d65   = mat3(2.4934969,    -.829489,      .0358458,  -.9313836,  1.7626641,    -.0761724,  -.4027108,     .0236247,    .9568845);\n\nconst mat3x2 hpe_to_ab = mat3x2(1., .111111111111111, -1.090909090909091, .111111111111111, .090909090909091, -.222222222222222);\nconst mat3 t_ab_to_l_hpe = mat3(.3278688524590164, .3278688524590164, .3278688524590164, .4782608695652174, -.4782608695652174, 0., 1.744832501781896, 1.353528153955809, -2.950819672131148);\n\nconst vec2 aces_white = vec2(.32168,           .33767);\nconst vec2 hd_white   = vec2(.3127,            .329);\nconst vec2 dci_white  = vec2(.314,             .351);\nconst vec2 e_e_white  = vec2(.333333333333333, .333333333333333);\n\nconst float cie_f[] = float[](1., .9, .8);\nconst float cie_c[] = float[](.69, .59, .525);\nconst float cie_n_c[] = float[](1., .95, .8);\n\nvec3 in_to_xyz(vec3 color) {\n    if (input_cs == 0)\n        return acescg_to_xyz * color;\n    if (input_cs == 1)\n        return aces_to_xyz * color;\n    if (input_cs == 2)\n        return rec709_to_xyz * color;\n    if (input_cs == 3)\n        return rec2020_to_xyz * color;\n    if (input_cs == 4)\n        return p3d65_to_xyz * color;\n    return color;\n}\n\nvec2 get_xy_from_cs(int idx) {\n    if (idx == 0 || idx == 1)\n        return aces_white;\n    if (idx == 2 || idx == 3 || idx == 4)\n        return hd_white;\n    return e_e_white;\n}\n\nvec2 get_xy_from_illuminant(int idx) {\n    if (idx == 0)\n        return aces_white;\n    if (idx == 1)\n        return hd_white;\n    if (idx == 2)\n        return dci_white;\n    return e_e_white;\n}\n\nvec2 get_xy_from_temp(float cct, float tint, bool temperature_shift) {\n    float denom, denom2, cct2, cct3, cct4;\n    vec2 xy, dxy_dcct, uv, duv_dcct, tint_vec;\n    mat2 jacobi;\n    if (temperature_shift)\n        cct *= 1.000556328233658;\n    if (cct < 4000)\n        cct = 4000;\n    if (25000 < cct)\n        cct = 25000;\n    cct2 = cct * cct;\n    cct3 = cct2 * cct;\n    cct4 = cct2 * cct2;\n    if (cct < 7000) {\n        xy.x = -4.607e9 / cct3 + 2.9678e6 / cct2 + .09911e3 / cct + .244063;\n        dxy_dcct.x = 13.821e9 / cct4 - 5.9356e6 / cct3 - .09911e3 / cct2;\n    }\n    else {\n        xy.x = -2.0064e9 / cct3 + 1.9018e6 / cct2 + .24748e3 / cct + .23704;\n        dxy_dcct.x = 6.0192e9 / cct4 - 3.8036 / cct3 - .24748e3 / cct2;\n    }\n    xy.y = (-3. * xy.x + 2.87) * xy.x - .275;\n    dxy_dcct.y = (-6. * xy.x + 2.87) * dxy_dcct.x;\n    denom = 1. / (-2. * xy.x + 12. * xy.y + 3.);\n    denom2 = denom * denom;\n    uv = vec2(4. * xy.x,  6. * xy.y) * denom;\n    jacobi = mat2(4. * denom + 8. * xy.x * denom2, 12. * xy.y * denom2, -48. * xy.x * denom2, 6. * denom - 72. * xy.y * denom2);\n    duv_dcct = jacobi * dxy_dcct;\n    tint_vec = vec2(duv_dcct.y, -duv_dcct.x);\n    tint_vec = normalize(tint_vec);\n    uv += tint_vec * tint;\n    denom = 1. / (uv.x - 4. * uv.y + 2.);\n    return vec2(1.5 * uv.x, uv.y) * denom;\n}\n\nvec2 get_in_xy(void) {\n    vec3 xyz;\n    if (input_white_type == 0)\n        return get_xy_from_cs(input_cs);\n    if (input_white_type == 1)\n        return get_xy_from_illuminant(input_illuminant);\n    if (input_white_type == 2)\n        return get_xy_from_temp(InTempTint.r, InTempTint.g, input_temperature_shift);\n    if (input_white_type == 3)\n        return input_coordinates;\n    xyz = in_to_xyz(input_colour);\n    return vec2(xyz.x, xyz.y) / (xyz.x + xyz.y + xyz.z);\n}\n\nvec2 get_out_xy(void) {\n    vec3 xyz;\n    if (output_white_type == 0)\n        return get_xy_from_cs(output_cs);\n    if (output_white_type == 1)\n        return get_xy_from_illuminant(output_illuminant);\n    if (output_white_type == 2)\n        return get_xy_from_temp(OutTempTint.r, OutTempTint.g, output_temperature_shift);\n    if (output_white_type == 3)\n        return output_coordinates;\n    xyz = in_to_xyz(output_colour);\n    return vec2(xyz.x, xyz.y) / (xyz.x + xyz.y + xyz.z);\n}\n\nvec3 sign(vec3 x) {\n    return vec3(lessThan(vec3(0.), x)) - vec3(lessThan(x, vec3(0.)));\n}\n\nvec3 cat02_fwd(vec3 color, vec2 in_w_xy, float f, float c, float n_c, float l_a, float n) {\n    float d, k, fl, n_b, z, a, a_w, j, l, h, t, ch;\n    vec2 ab;\n    vec3 in_tri = vec3(in_w_xy.x / in_w_xy.y, 1., (1. - in_w_xy.x - in_w_xy.y) / in_w_xy.y);\n    in_tri = xyz_to_lms * in_tri;\n    color = xyz_to_lms * color;\n    d = f * (1. - .277777777777778 * exp(-.010869565217391 * (l_a + 42.)));\n    color *= d / in_tri + (1 - d);\n    in_tri = d + (1 - d) * in_tri;\n    color = lms_to_hpe * color;\n    in_tri = lms_to_hpe * in_tri;\n    k = .2 / (l_a + .2);\n    k *= k;\n    k *= k;\n    fl = 1. - k;\n    fl = .2 * k * (5. * l_a) + .1 * fl * fl * pow(5. * l_a, .333333333333333);\n    color = sign(color) * pow(fl * abs(color), vec3(.42));\n    in_tri = sign(in_tri) * pow(fl * abs(in_tri), vec3(.42));\n    color = 4. * color / (27.13 + color) + .001;\n    in_tri = 4. * in_tri / (27.13 + in_tri) + .001;\n    n_b = .725 * pow(n, -.2);\n    z = 1.48 + sqrt(n);\n    a = (dot(vec3(2., 1., .05), color) - .00305) * n_b;\n    a_w = (dot(vec3(2., 1., .05), in_tri) - .00305) * n_b;\n    j = pow(a / a_w, c * z);\n    ab = hpe_to_ab * color;\n    l = length(ab);\n    h = atan(ab.y, ab.x);\n    t = 9.615384615384615 * n_c * n_b * (cos(h + 2.) + 3.8) * l / dot(vec3(1., 1., 1.05), color);\n    ch = pow(t, .9) * sqrt(j) * pow(1.64 - pow(.29, n), .73);\n    return vec3(j, ch, h);\n}\n\nvec3 cat02_bwd(vec3 color, vec2 out_w_xy, float f, float c, float n_c, float l_a, float n) {\n    float j = color.r, ch = color.g, h = color.b, d, k, fl, n_b, z, a_w, a, t, e;\n    vec2 ab;\n    vec3 out_tri = vec3(out_w_xy.x / out_w_xy.y, 1., (1. - out_w_xy.x - out_w_xy.y) / out_w_xy.y), out_tri_1;\n    out_tri_1 = out_tri = xyz_to_lms * out_tri;\n    d = f * (1. - .277777777777778 * exp(-.010869565217391 * (l_a + 42.)));\n    out_tri_1 = d + (1 - d) * out_tri_1;\n    out_tri_1 = lms_to_hpe * out_tri_1;\n    k = .2 / (l_a + .2);\n    k *= k;\n    k *= k;\n    fl = 1. - k;\n    fl = .2 * k * (5. * l_a) + .1 * fl * fl * pow(5. * l_a, .333333333333333);\n    out_tri_1 = sign(out_tri_1) * pow(fl * abs(out_tri_1), vec3(.42));\n    out_tri_1 = 4. * out_tri_1 / (27.13 + out_tri_1) + .001;\n    n_b = .725 * pow(n, -.2);\n    z = 1.48 + sqrt(n);\n    a_w = (dot(vec3(2., 1., .05), out_tri_1) - .00305) * n_b;\n    a = a_w * pow(j, 1. / (c * z)) / n_b + .00305;\n    t = pow(ch / (sqrt(j) * pow(1.64 - pow(.29, n), .73)), 1.111111111111111);\n    t = 9.615384615384615 * n_c * n_b * (cos(h + 2.) + 3.8) / t;\n    ab = vec2(cos(h), sin(h));\n    color = t_ab_to_l_hpe * vec3(t, ab);\n    color *= a / dot(vec3(2., 1., .05), color);\n    color = (.02713 - 27.13 * color) / (color - 4.001);\n    color = sign(color) * pow(abs(color), vec3(2.380952380952381)) / fl;\n    color = hpe_to_lms * color;\n    color /= d / out_tri + (1 - d);\n    return lms_to_xyz * color;\n}\n\nvec3 cat02_smp(vec3 color, vec2 in_w_xy, vec2 out_w_xy) {\n    vec3 out_tri = vec3(out_w_xy.x / out_w_xy.y, 1., (1. - out_w_xy.x - out_w_xy.y) / out_w_xy.y);\n    vec3 in_tri = vec3(in_w_xy.x / in_w_xy.y, 1., (1. - in_w_xy.x - in_w_xy.y) / in_w_xy.y);\n    out_tri = xyz_to_lms * out_tri;\n    in_tri = xyz_to_lms * in_tri;\n    color = xyz_to_lms * color;\n    color *= out_tri / in_tri;\n    return lms_to_xyz * color;\n}\n\nvec3 bradford(vec3 color, vec2 in_w_xy, vec2 out_w_xy) {\n    vec3 out_tri = vec3(out_w_xy.x / out_w_xy.y, 1., (1. - out_w_xy.x - out_w_xy.y) / out_w_xy.y);\n    vec3 in_tri = vec3(in_w_xy.x / in_w_xy.y, 1., (1. - in_w_xy.x - in_w_xy.y) / in_w_xy.y);\n    out_tri = xyz_to_brdfrd * out_tri;\n    in_tri = xyz_to_brdfrd * in_tri;\n    color = xyz_to_brdfrd * color;\n    color *= out_tri / in_tri;\n    return brdfrd_to_xyz * color;\n}\n\nvec3 von_kries(vec3 color, vec2 in_w_xy, vec2 out_w_xy) {\n    vec3 out_tri = vec3(out_w_xy.x / out_w_xy.y, 1., (1. - out_w_xy.x - out_w_xy.y) / out_w_xy.y);\n    vec3 in_tri = vec3(in_w_xy.x / in_w_xy.y, 1., (1. - in_w_xy.x - in_w_xy.y) / in_w_xy.y);\n    out_tri = xyz_to_vkries * out_tri;\n    in_tri = xyz_to_vkries * in_tri;\n    color = xyz_to_vkries * color;\n    color *= out_tri / in_tri;\n    return vkries_to_xyz * color;\n}\n\nvec3 xyz_to_out(vec3 color) {\n    if (output_cs == 0)\n        return xyz_to_acescg * color;\n    if (output_cs == 1)\n        return xyz_to_aces * color;\n    if (output_cs == 2)\n        return xyz_to_rec709 * color;\n    if (output_cs == 3)\n        return xyz_to_rec2020 * color;\n    if (output_cs == 4)\n        return xyz_to_p3d65 * color;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float f, c, n_c;\n    vec2 in_w_xy = get_in_xy();\n    vec2 out_w_xy = get_out_xy();\n    vec3 color = texture2D(iChannel0, fragCoord.xy / vec2(iResolution.x, iResolution.y)).rgb;\n    color = in_to_xyz(color);\n    if (method == 0) {\n        f = cie_f[input_surround];\n        c = cie_c[input_surround];\n        n_c = cie_n_c[input_surround];\n        color = cat02_fwd(color, in_w_xy, f, c, n_c, InLumBack.r, InLumBack.g);\n        f = cie_f[output_surround];\n        c = cie_c[output_surround];\n        n_c = cie_n_c[output_surround];\n        color = cat02_bwd(color, out_w_xy, f, c, n_c, output_field_luminance, output_rel_background);\n        fragColor = vec4(xyz_to_out(color), 1.);\n        return;\n    }\n    if (method == 1) {\n        color = cat02_smp(color, in_w_xy, out_w_xy);\n        fragColor = vec4(xyz_to_out(color), 1.);\n        return;\n    }\n    if (method == 2) {\n        color = bradford(color, in_w_xy, out_w_xy);\n        fragColor = vec4(xyz_to_out(color), 1.);\n        return;\n    }\n    color = von_kries(color, in_w_xy, out_w_xy);\n    fragColor = vec4(xyz_to_out(color), 1.);\n}\n")
        del param

    param = lastNode.getParam("mipmap0")
    if param is not None:
        param.set("nearest")
        del param

    param = lastNode.getParam("wrap0")
    if param is not None:
        param.set("clamp")
        del param

    param = lastNode.getParam("inputLabel0")
    if param is not None:
        param.setValue("Source")
        del param

    param = lastNode.getParam("inputEnable1")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable2")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("inputEnable3")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("iChannel0")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("mouseParams")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("paramCount")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramType0")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName0")
    if param is not None:
        param.setValue("input_cs")
        del param

    param = lastNode.getParam("paramLabel0")
    if param is not None:
        param.setValue("Input Colour Space :")
        del param

    param = lastNode.getParam("paramHint0")
    if param is not None:
        param.setValue("input colour space note that the input must be linear in all cases")
        del param

    param = lastNode.getParam("paramMinInt0")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt0")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramType1")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName1")
    if param is not None:
        param.setValue("input_white_type")
        del param

    param = lastNode.getParam("paramLabel1")
    if param is not None:
        param.setValue("Input White Type :")
        del param

    param = lastNode.getParam("paramHint1")
    if param is not None:
        param.setValue("input white point type")
        del param

    param = lastNode.getParam("paramMinInt1")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt1")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType2")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName2")
    if param is not None:
        param.setValue("input_illuminant")
        del param

    param = lastNode.getParam("paramLabel2")
    if param is not None:
        param.setValue("Input Illuminant :")
        del param

    param = lastNode.getParam("paramHint2")
    if param is not None:
        param.setValue("input white point illuminant")
        del param

    param = lastNode.getParam("paramMinInt2")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt2")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramType3")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName3")
    if param is not None:
        param.setValue("InTempTint")
        del param

    param = lastNode.getParam("paramLabel3")
    if param is not None:
        param.setValue("Input Temp and Tint :")
        del param

    param = lastNode.getParam("paramDefaultVec23")
    if param is not None:
        param.setValue(6000, 0)
        del param

    param = lastNode.getParam("paramType4")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName4")
    if param is not None:
        param.setValue("input_temperature_shift")
        del param

    param = lastNode.getParam("paramLabel4")
    if param is not None:
        param.setValue("Input Temp Shift :")
        del param

    param = lastNode.getParam("paramHint4")
    if param is not None:
        param.setValue("applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature")
        del param

    param = lastNode.getParam("paramType5")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName5")
    if param is not None:
        param.setValue("input_coordinates")
        del param

    param = lastNode.getParam("paramLabel5")
    if param is not None:
        param.setValue("Input Coordinates :")
        del param

    param = lastNode.getParam("paramHint5")
    if param is not None:
        param.setValue("CIE 1931 xy coordinates of the input white point")
        del param

    param = lastNode.getParam("paramDefaultVec25")
    if param is not None:
        param.setValue(0.32168, 0)
        param.setValue(0.33767, 1)
        del param

    param = lastNode.getParam("paramType6")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName6")
    if param is not None:
        param.setValue("input_colour")
        del param

    param = lastNode.getParam("paramLabel6")
    if param is not None:
        param.setValue("Input Colour :")
        del param

    param = lastNode.getParam("paramHint6")
    if param is not None:
        param.setValue("colour representation of the input white point")
        del param

    param = lastNode.getParam("paramDefaultVec36")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("paramType7")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName7")
    if param is not None:
        param.setValue("input_surround")
        del param

    param = lastNode.getParam("paramLabel7")
    if param is not None:
        param.setValue("Input Surround :")
        del param

    param = lastNode.getParam("paramHint7")
    if param is not None:
        param.setValue("viewing conditions")
        del param

    param = lastNode.getParam("paramMinInt7")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt7")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType8")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName8")
    if param is not None:
        param.setValue("InLumBack")
        del param

    param = lastNode.getParam("paramLabel8")
    if param is not None:
        param.setValue("Input Field Lum / Rel BG :")
        del param

    param = lastNode.getParam("paramDefaultVec28")
    if param is not None:
        param.setValue(20, 0)
        param.setValue(1, 1)
        del param

    param = lastNode.getParam("paramType9")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName9")
    if param is not None:
        param.setValue("output_cs")
        del param

    param = lastNode.getParam("paramLabel9")
    if param is not None:
        param.setValue("Output Colour Space :")
        del param

    param = lastNode.getParam("paramHint9")
    if param is not None:
        param.setValue("output colour space note that the output must be linear in all cases")
        del param

    param = lastNode.getParam("paramMinInt9")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt9")
    if param is not None:
        param.setValue(5, 0)
        del param

    param = lastNode.getParam("paramType10")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName10")
    if param is not None:
        param.setValue("output_white_type")
        del param

    param = lastNode.getParam("paramLabel10")
    if param is not None:
        param.setValue("Output White Type :")
        del param

    param = lastNode.getParam("paramHint10")
    if param is not None:
        param.setValue("output white point type")
        del param

    param = lastNode.getParam("paramMinInt10")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt10")
    if param is not None:
        param.setValue(4, 0)
        del param

    param = lastNode.getParam("paramType11")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName11")
    if param is not None:
        param.setValue("output_illuminant")
        del param

    param = lastNode.getParam("paramLabel11")
    if param is not None:
        param.setValue("Output Illuminant :")
        del param

    param = lastNode.getParam("paramHint11")
    if param is not None:
        param.setValue("output white point illuminant")
        del param

    param = lastNode.getParam("paramMinInt11")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt11")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("paramType12")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName12")
    if param is not None:
        param.setValue("OutTempTint")
        del param

    param = lastNode.getParam("paramLabel12")
    if param is not None:
        param.setValue("Output Temp and Tint :")
        del param

    param = lastNode.getParam("paramDefaultVec212")
    if param is not None:
        param.setValue(6000, 0)
        del param

    param = lastNode.getParam("paramType13")
    if param is not None:
        param.set("bool")
        del param

    param = lastNode.getParam("paramName13")
    if param is not None:
        param.setValue("output_temperature_shift")
        del param

    param = lastNode.getParam("paramLabel13")
    if param is not None:
        param.setValue("Output Temp Shift :")
        del param

    param = lastNode.getParam("paramHint13")
    if param is not None:
        param.setValue("applies a scaling of the colour temperature by a factor of 1.4388/1.438 to mimic the CIE D-series behavior instead of maintaining the physical exact correlated colour temperature")
        del param

    param = lastNode.getParam("paramType14")
    if param is not None:
        param.set("vec2")
        del param

    param = lastNode.getParam("paramName14")
    if param is not None:
        param.setValue("output_coordinates")
        del param

    param = lastNode.getParam("paramLabel14")
    if param is not None:
        param.setValue("Output Coordinates :")
        del param

    param = lastNode.getParam("paramHint14")
    if param is not None:
        param.setValue("CIE 1931 xy coordinates of the output white point")
        del param

    param = lastNode.getParam("paramDefaultVec214")
    if param is not None:
        param.setValue(0.32168, 0)
        param.setValue(0.33767, 1)
        del param

    param = lastNode.getParam("paramType15")
    if param is not None:
        param.set("vec3")
        del param

    param = lastNode.getParam("paramName15")
    if param is not None:
        param.setValue("output_colour")
        del param

    param = lastNode.getParam("paramLabel15")
    if param is not None:
        param.setValue("Output Colour :")
        del param

    param = lastNode.getParam("paramHint15")
    if param is not None:
        param.setValue("colour representation of the output white point")
        del param

    param = lastNode.getParam("paramDefaultVec315")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        del param

    param = lastNode.getParam("paramType16")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName16")
    if param is not None:
        param.setValue("output_surround")
        del param

    param = lastNode.getParam("paramLabel16")
    if param is not None:
        param.setValue("Output Surround :")
        del param

    param = lastNode.getParam("paramHint16")
    if param is not None:
        param.setValue("viewing conditions")
        del param

    param = lastNode.getParam("paramMinInt16")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt16")
    if param is not None:
        param.setValue(2, 0)
        del param

    param = lastNode.getParam("paramType17")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName17")
    if param is not None:
        param.setValue("output_field_luminance")
        del param

    param = lastNode.getParam("paramLabel17")
    if param is not None:
        param.setValue("Output Field Luminance :")
        del param

    param = lastNode.getParam("paramHint17")
    if param is not None:
        param.setValue("output field luminance")
        del param

    param = lastNode.getParam("paramDefaultFloat17")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("paramMinFloat17")
    if param is not None:
        param.setValue(1.000000000000001e-07, 0)
        del param

    param = lastNode.getParam("paramMaxFloat17")
    if param is not None:
        param.setValue(1000000, 0)
        del param

    param = lastNode.getParam("paramType18")
    if param is not None:
        param.set("float")
        del param

    param = lastNode.getParam("paramName18")
    if param is not None:
        param.setValue("output_rel_background")
        del param

    param = lastNode.getParam("paramLabel18")
    if param is not None:
        param.setValue("Output Rel BG :")
        del param

    param = lastNode.getParam("paramHint18")
    if param is not None:
        param.setValue("relative output background brightness compared to the scene white")
        del param

    param = lastNode.getParam("paramDefaultFloat18")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("paramMinFloat18")
    if param is not None:
        param.setValue(1.000000000000001e-07, 0)
        del param

    param = lastNode.getParam("paramMaxFloat18")
    if param is not None:
        param.setValue(1000000, 0)
        del param

    param = lastNode.getParam("paramType19")
    if param is not None:
        param.set("int")
        del param

    param = lastNode.getParam("paramName19")
    if param is not None:
        param.setValue("method")
        del param

    param = lastNode.getParam("paramLabel19")
    if param is not None:
        param.setValue("Method :")
        del param

    param = lastNode.getParam("paramHint19")
    if param is not None:
        param.setValue("Adaptation method")
        del param

    param = lastNode.getParam("paramMinInt19")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("paramMaxInt19")
    if param is not None:
        param.setValue(3, 0)
        del param

    del lastNode
    # End of node "Shadertoy1_2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupShadertoy1_2)
    groupShadertoy1_2.connectInput(0, groupSource)

    param = groupShadertoy1_2.getParam("paramValueInt0")
    param.setExpression("thisGroup.InColSpace.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt1")
    param.setExpression("thisGroup.InWhiteType.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt2")
    param.setExpression("thisGroup.InIllum.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec23")
    param.setExpression("thisGroup.InTemp.get()", False, 0)
    param.setExpression("thisGroup.InTint.get()", False, 1)
    del param
    param = groupShadertoy1_2.getParam("paramValueBool4")
    group.getParam("Shadertoy1_2paramValueBool4").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec25")
    group.getParam("Shadertoy1_2paramValueVec25").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec36")
    group.getParam("Shadertoy1_2paramValueVec36").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt7")
    param.setExpression("thisGroup.InSurround.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec28")
    param.setExpression("thisGroup.InFieldLum.get()", False, 0)
    param.setExpression("thisGroup.InRelBG.get()", False, 1)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt9")
    param.setExpression("thisGroup.OutColSpace.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt10")
    param.setExpression("thisGroup.OutWhiteType.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt11")
    param.setExpression("thisGroup.OutIllum.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec212")
    param.setExpression("thisGroup.OutTemp.get()", False, 0)
    param.setExpression("thisGroup.OutTint.get()", False, 1)
    del param
    param = groupShadertoy1_2.getParam("paramValueBool13")
    group.getParam("Shadertoy1_2paramValueBool13").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec214")
    group.getParam("Shadertoy1_2paramValueVec214").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueVec315")
    group.getParam("Shadertoy1_2paramValueVec315").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt16")
    param.setExpression("thisGroup.OutSurround.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat17")
    group.getParam("Shadertoy1_2paramValueFloat17").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueFloat18")
    group.getParam("Shadertoy1_2paramValueFloat18").setAsAlias(param)
    del param
    param = groupShadertoy1_2.getParam("paramValueInt19")
    param.setExpression("thisGroup.method.get()", False, 0)
    del param
    param = groupShadertoy1_2.getParam("mipmap0")
    group.getParam("Shadertoy1_2mipmap0").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["Chromatic_adaptation_GLExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
