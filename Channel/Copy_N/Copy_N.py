# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named Copy_NExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Copy_NExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.Copy_N"

def getLabel():
    return "Copy_N"

def getVersion():
    return 1

def getIconPath():
    return "Copy_N.png"

def getGrouping():
    return "Community/Channel"

def getPluginDescription():
    return "Nuke Copy node."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Copy_N")
    param = lastNode.createBooleanParam("checkA", "")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.checkA = param
    del param

    param = lastNode.createChoiceParam("Choice_Ba", "Copy channel : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Alpha")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Ba = param
    del param

    param = lastNode.createChoiceParam("Choice_Aa", "to : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Alpha")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Aa = param
    del param

    param = lastNode.createBooleanParam("checkR", "")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(False)
    lastNode.checkR = param
    del param

    param = lastNode.createChoiceParam("Choice_Br", "Copy channel : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Br = param
    del param

    param = lastNode.createChoiceParam("Choice_Ar", "   to : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Ar = param
    del param

    param = lastNode.createBooleanParam("checkG", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.checkG = param
    del param

    param = lastNode.createChoiceParam("Choice_Bg", "Copy channel : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Green")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Bg = param
    del param

    param = lastNode.createChoiceParam("Choice_Ag", "to : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Green")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Ag = param
    del param

    param = lastNode.createBooleanParam("checkB", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.checkB = param
    del param

    param = lastNode.createChoiceParam("Choice_Bb", "Copy channel : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Blue")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Bb = param
    del param

    param = lastNode.createChoiceParam("Choice_Ab", "   to : ")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Blue")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.Choice_Ab = param
    del param

    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("sep03", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createStringParam("LabelM", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Mask")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.LabelM = param
    del param

    param = lastNode.createBooleanParam("checkM", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.checkM = param
    del param

    param = lastNode.createChoiceParam("ChoiceM", "")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Alpha")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.ChoiceM = param
    del param

    param = lastNode.createBooleanParam("invertM", "invert")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.invertM = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createDoubleParam("Dissolve1which", "Mix")
    param.setMinimum(0, 0)
    param.setMaximum(63, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Dissolve1which = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createSeparatorParam("Copy_N", "Copy_N")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Copy_N = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    param = lastNode.createStringParam("sep13", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep13 = param
    del param

    param = lastNode.createSeparatorParam("Conversion", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.Conversion = param
    del param

    param = lastNode.createStringParam("sep14", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep14 = param
    del param

    param = lastNode.createStringParam("sep15", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep15 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "SeExpr_R"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExpr_R")
    lastNode.setLabel("SeExpr_R")
    lastNode.setPosition(1585, 402)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExpr_R = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r2")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("a")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "SeExpr_R"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1920, 1447)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "B"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("B")
    lastNode.setLabel("B")
    lastNode.setPosition(1585, 120)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupB = lastNode

    del lastNode
    # End of node "B"

    # Start of node "A"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("A")
    lastNode.setLabel("A")
    lastNode.setPosition(416, 101)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupA = lastNode

    del lastNode
    # End of node "A"

    # Start of node "Shuffle_R"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_R")
    lastNode.setLabel("Shuffle_R")
    lastNode.setPosition(620, 420)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_R = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "Shuffle_R"

    # Start of node "Shuffle_G"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_G")
    lastNode.setLabel("Shuffle_G")
    lastNode.setPosition(614, 519)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_G = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "Shuffle_G"

    # Start of node "Shuffle_B"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_B")
    lastNode.setLabel("Shuffle_B")
    lastNode.setPosition(614, 611)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_B = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle_B"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(450, 628)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(452, 536)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(452, 437)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Switch_R"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_R")
    lastNode.setLabel("Switch_R")
    lastNode.setPosition(1124, 420)
    lastNode.setSize(80, 48)
    lastNode.setColor(1, 1, 1)
    groupSwitch_R = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch_R"

    # Start of node "Shuffle_A"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_A")
    lastNode.setLabel("Shuffle_A")
    lastNode.setPosition(617, 703)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle_A = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle_A"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(446, 720)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "SeExpr_G"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExpr_G")
    lastNode.setLabel("SeExpr_G")
    lastNode.setPosition(1585, 549)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExpr_G = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g2")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("a")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "SeExpr_G"

    # Start of node "Switch_G"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_G")
    lastNode.setLabel("Switch_G")
    lastNode.setPosition(1117, 549)
    lastNode.setSize(80, 48)
    lastNode.setColor(1, 1, 1)
    groupSwitch_G = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch_G"

    # Start of node "SeExprSimple1"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExprSimple1")
    lastNode.setLabel("SeExprSimple1")
    lastNode.setPosition(1585, 699)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExprSimple1 = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b2")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("a")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "SeExprSimple1"

    # Start of node "Switch_B"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_B")
    lastNode.setLabel("Switch_B")
    lastNode.setPosition(1116, 699)
    lastNode.setSize(80, 48)
    lastNode.setColor(1, 1, 1)
    groupSwitch_B = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(2, 0)
        del param

    del lastNode
    # End of node "Switch_B"

    # Start of node "Switch_A"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_A")
    lastNode.setLabel("Switch_A")
    lastNode.setPosition(1118, 847)
    lastNode.setSize(80, 48)
    lastNode.setColor(1, 1, 1)
    groupSwitch_A = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(3, 0)
        del param

    del lastNode
    # End of node "Switch_A"

    # Start of node "SeExpr_A"
    lastNode = app.createNode("fr.inria.openfx.SeExprSimple", 2, group)
    lastNode.setScriptName("SeExpr_A")
    lastNode.setLabel("SeExpr_A")
    lastNode.setPosition(1585, 847)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupSeExpr_A = lastNode

    param = lastNode.getParam("rExpr")
    if param is not None:
        param.setValue("r")
        del param

    param = lastNode.getParam("gExpr")
    if param is not None:
        param.setValue("g")
        del param

    param = lastNode.getParam("bExpr")
    if param is not None:
        param.setValue("b")
        del param

    param = lastNode.getParam("aExpr")
    if param is not None:
        param.setValue("a2")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "SeExpr_A"

    # Start of node "Dissolve1"
    lastNode = app.createNode("net.sf.openfx.DissolvePlugin", 1, group)
    lastNode.setScriptName("Dissolve1")
    lastNode.setLabel("Dissolve1")
    lastNode.setPosition(1912, 1199)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupDissolve1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Dissolve1"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1775, 137)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(1767, 1218)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Mask")
    lastNode.setLabel("Mask")
    lastNode.setPosition(2339, -166)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupMask = lastNode

    del lastNode
    # End of node "Mask"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2100, 419)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(2067, 290)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1789, 18)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Shuffle1_2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1_2")
    lastNode.setLabel("Shuffle1_2")
    lastNode.setPosition(1930, 24)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle1_2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "Shuffle1_2"

    # Start of node "Shuffle1_3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1_3")
    lastNode.setLabel("Shuffle1_3")
    lastNode.setPosition(2067, 20)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle1_3 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle1_3"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(2067, 149)
    lastNode.setSize(80, 48)
    lastNode.setColor(1, 1, 1)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(3, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1912, 780)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("matte")
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(2204, 835)
    lastNode.setSize(80, 73)
    lastNode.setColor(0.2941, 0.3686, 0.7765)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1912, 1032)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle3")
    lastNode.setPosition(1912, 626)
    lastNode.setSize(80, 48)
    lastNode.setColor(0.6196, 0.2353, 0.3882)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("1")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Now that all nodes are created we can connect them together, restore expressions
    groupSeExpr_R.connectInput(0, groupB)
    groupSeExpr_R.connectInput(1, groupSwitch_R)
    groupSeExpr_R.connectInput(10, groupDot7)
    groupOutput1.connectInput(0, groupDissolve1)
    groupShuffle_R.connectInput(1, groupDot3)
    groupShuffle_G.connectInput(1, groupDot2)
    groupShuffle_B.connectInput(1, groupDot1)
    groupDot1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupDot3)
    groupDot3.connectInput(0, groupA)
    groupSwitch_R.connectInput(0, groupShuffle_R)
    groupSwitch_R.connectInput(1, groupShuffle_G)
    groupSwitch_R.connectInput(2, groupShuffle_B)
    groupSwitch_R.connectInput(3, groupShuffle_A)
    groupShuffle_A.connectInput(1, groupDot4)
    groupDot4.connectInput(0, groupDot1)
    groupSeExpr_G.connectInput(0, groupSeExpr_R)
    groupSeExpr_G.connectInput(1, groupSwitch_G)
    groupSeExpr_G.connectInput(10, groupDot7)
    groupSwitch_G.connectInput(0, groupShuffle_R)
    groupSwitch_G.connectInput(1, groupShuffle_G)
    groupSwitch_G.connectInput(2, groupShuffle_B)
    groupSwitch_G.connectInput(3, groupShuffle_A)
    groupSeExprSimple1.connectInput(0, groupSeExpr_G)
    groupSeExprSimple1.connectInput(1, groupSwitch_B)
    groupSeExprSimple1.connectInput(10, groupDot7)
    groupSwitch_B.connectInput(0, groupShuffle_R)
    groupSwitch_B.connectInput(1, groupShuffle_G)
    groupSwitch_B.connectInput(2, groupShuffle_B)
    groupSwitch_B.connectInput(3, groupShuffle_A)
    groupSwitch_A.connectInput(0, groupShuffle_R)
    groupSwitch_A.connectInput(1, groupShuffle_G)
    groupSwitch_A.connectInput(2, groupShuffle_B)
    groupSwitch_A.connectInput(3, groupShuffle_A)
    groupSeExpr_A.connectInput(0, groupSeExprSimple1)
    groupSeExpr_A.connectInput(1, groupSwitch_A)
    groupSeExpr_A.connectInput(10, groupDot7)
    groupDissolve1.connectInput(0, groupDot6)
    groupDissolve1.connectInput(1, groupShuffle2)
    groupDot5.connectInput(0, groupB)
    groupDot6.connectInput(0, groupDot5)
    groupDot7.connectInput(0, groupInvert1)
    groupInvert1.connectInput(0, groupSwitch1)
    groupShuffle1.connectInput(1, groupMask)
    groupShuffle1_2.connectInput(1, groupMask)
    groupShuffle1_3.connectInput(1, groupMask)
    groupSwitch1.connectInput(0, groupShuffle1)
    groupSwitch1.connectInput(1, groupShuffle1_2)
    groupSwitch1.connectInput(2, groupShuffle1_3)
    groupSwitch1.connectInput(3, groupMask)
    groupMerge1.connectInput(0, groupShuffle3)
    groupMerge1.connectInput(1, groupSeExpr_A)
    groupMerge1.connectInput(2, groupDot7)
    groupMerge2.connectInput(0, groupDot7)
    groupMerge2.connectInput(1, groupSeExpr_A)
    groupShuffle2.connectInput(0, groupMerge2)
    groupShuffle2.connectInput(1, groupMerge1)
    groupShuffle3.connectInput(1, groupB)

    param = groupSeExpr_R.getParam("rExpr")
    param.setExpression("toto = thisGroup.Choice_Ar.get()\nif toto == 0 :\n\tret = \'r2\'\nelse :\n\tret = \'r\'", True, 0)
    del param
    param = groupSeExpr_R.getParam("gExpr")
    param.setExpression("toto = thisGroup.Choice_Ar.get()\nif toto == 1 :\n\tret = \'g2\'\nelse :\n\tret = \'g\'", True, 0)
    del param
    param = groupSeExpr_R.getParam("bExpr")
    param.setExpression("toto = thisGroup.Choice_Ar.get()\nif toto == 2 :\n\tret = \'b2\'\nelse :\n\tret = \'b\'", True, 0)
    del param
    param = groupSeExpr_R.getParam("aExpr")
    param.setExpression("toto = thisGroup.Choice_Ar.get()\nif toto == 3 :\n\tret = \'a2\'\nelse :\n\tret = \'a\'", True, 0)
    del param
    param = groupSeExpr_R.getParam("enableMask_Mask")
    param.setExpression("thisGroup.checkM.get()", False, 0)
    del param
    param = groupSeExpr_R.getParam("disableNode")
    param.setExpression("not thisGroup.checkR.get()", False, 0)
    del param
    param = groupSwitch_R.getParam("which")
    param.setExpression("thisGroup.Choice_Br.get()", False, 0)
    del param
    param = groupSeExpr_G.getParam("rExpr")
    param.setExpression("toto = thisGroup.Choice_Ag.get()\nif toto == 0 :\n\tret = \'r2\'\nelse :\n\tret = \'r\'", True, 0)
    del param
    param = groupSeExpr_G.getParam("gExpr")
    param.setExpression("toto = thisGroup.Choice_Ag.get()\nif toto == 1 :\n\tret = \'g2\'\nelse :\n\tret = \'g\'", True, 0)
    del param
    param = groupSeExpr_G.getParam("bExpr")
    param.setExpression("toto = thisGroup.Choice_Ag.get()\nif toto == 2 :\n\tret = \'b2\'\nelse :\n\tret = \'b\'", True, 0)
    del param
    param = groupSeExpr_G.getParam("aExpr")
    param.setExpression("toto = thisGroup.Choice_Ag.get()\nif toto == 3 :\n\tret = \'a2\'\nelse :\n\tret = \'a\'", True, 0)
    del param
    param = groupSeExpr_G.getParam("enableMask_Mask")
    param.setExpression("thisGroup.checkM.get()", False, 0)
    del param
    param = groupSeExpr_G.getParam("disableNode")
    param.setExpression("not thisGroup.checkG.get()", False, 0)
    del param
    param = groupSwitch_G.getParam("which")
    param.setExpression("thisGroup.Choice_Bg.get()", False, 0)
    del param
    param = groupSeExprSimple1.getParam("rExpr")
    param.setExpression("toto = thisGroup.Choice_Ab.get()\nif toto == 0 :\n\tret = \'r2\'\nelse :\n\tret = \'r\'", True, 0)
    del param
    param = groupSeExprSimple1.getParam("gExpr")
    param.setExpression("toto = thisGroup.Choice_Ab.get()\nif toto == 1 :\n\tret = \'g2\'\nelse :\n\tret = \'g\'", True, 0)
    del param
    param = groupSeExprSimple1.getParam("bExpr")
    param.setExpression("toto = thisGroup.Choice_Ab.get()\nif toto == 2 :\n\tret = \'b2\'\nelse :\n\tret = \'b\'", True, 0)
    del param
    param = groupSeExprSimple1.getParam("aExpr")
    param.setExpression("toto = thisGroup.Choice_Ab.get()\nif toto == 3 :\n\tret = \'a2\'\nelse :\n\tret = \'a\'", True, 0)
    del param
    param = groupSeExprSimple1.getParam("enableMask_Mask")
    param.setExpression("thisGroup.checkM.get()", False, 0)
    del param
    param = groupSeExprSimple1.getParam("disableNode")
    param.setExpression("not thisGroup.checkB.get()", False, 0)
    del param
    param = groupSwitch_B.getParam("which")
    param.setExpression("thisGroup.Choice_Bb.get()", False, 0)
    del param
    param = groupSwitch_A.getParam("which")
    param.setExpression("thisGroup.Choice_Ba.get()", False, 0)
    del param
    param = groupSeExpr_A.getParam("rExpr")
    param.setExpression("toto = thisGroup.Choice_Ba.get()\nif toto == 0 :\n\tret = \'r2\'\nelse :\n\tret = \'r\'", True, 0)
    del param
    param = groupSeExpr_A.getParam("gExpr")
    param.setExpression("toto = thisGroup.Choice_Ba.get()\nif toto == 1 :\n\tret = \'g2\'\nelse :\n\tret = \'g\'", True, 0)
    del param
    param = groupSeExpr_A.getParam("bExpr")
    param.setExpression("toto = thisGroup.Choice_Ba.get()\nif toto == 2 :\n\tret = \'b2\'\nelse :\n\tret = \'b\'", True, 0)
    del param
    param = groupSeExpr_A.getParam("aExpr")
    param.setExpression("toto = thisGroup.Choice_Ba.get()\nif toto == 3 :\n\tret = \'a2\'\nelse :\n\tret = \'a\'", True, 0)
    del param
    param = groupSeExpr_A.getParam("enableMask_Mask")
    param.setExpression("thisGroup.checkM.get()", False, 0)
    del param
    param = groupSeExpr_A.getParam("disableNode")
    param.setExpression("not thisGroup.checkA.get()", False, 0)
    del param
    param = groupDissolve1.getParam("which")
    group.getParam("Dissolve1which").setAsAlias(param)
    del param
    param = groupInvert1.getParam("disableNode")
    param.setExpression("not thisGroup.invertM.get()", False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.ChoiceM.get()", False, 0)
    del param
    param = groupMerge1.getParam("disableNode")
    param.setExpression("not thisGroup.checkM.get()", False, 0)
    del param
    param = groupMerge2.getParam("disableNode")
    param.setExpression("not thisGroup.checkM.get()", False, 0)
    del param

    try:
        extModule = sys.modules["Copy_NExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
