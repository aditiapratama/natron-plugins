# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named V_CheckMatteExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from V_CheckMatteExt import *
except ImportError:
    pass

def getPluginID():
    return "natron.community.plugins.V_CheckMatte"

def getLabel():
    return "V_CheckMatte"

def getVersion():
    return 1

def getIconPath():
    return "V_CheckMatte.png"

def getGrouping():
    return "Community/V_Tools"

def getPluginDescription():
    return "Utility to evaluate a matte and help working with mattes and masks."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.1176, 0.5569, 0.1569)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createStringParam("sep01", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep01 = param
    del param

    param = lastNode.createStringParam("sep02", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep02 = param
    del param

    param = lastNode.createSeparatorParam("SETUP", "Setup")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.SETUP = param
    del param

    param = lastNode.createStringParam("sep03", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep03 = param
    del param

    param = lastNode.createChoiceParam("Reformat_ALLNatronParamFormatChoice", "Output Format : ")
    param.setDefaultValue(6)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.Reformat_ALLNatronParamFormatChoice = param
    del param

    param = lastNode.createStringParam("sep04", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep04 = param
    del param

    param = lastNode.createBooleanParam("linearizeBox", "Linearize Matte : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.linearizeBox = param
    del param

    param = lastNode.createChoiceParam("LUT_CorrectionocioInputSpaceIndex", "Current LUT : ")
    param.setDefaultValue(14)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(True)
    lastNode.LUT_CorrectionocioInputSpaceIndex = param
    del param

    param = lastNode.createStringParam("sep05", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep05 = param
    del param

    param = lastNode.createStringParam("sep06", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep06 = param
    del param

    param = lastNode.createStringParam("SOURCE", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Source : ")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.SOURCE = param
    del param

    param = lastNode.createBooleanParam("redBox", "Red : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.redBox = param
    del param

    param = lastNode.createBooleanParam("greenBox", "Green : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.greenBox = param
    del param

    param = lastNode.createBooleanParam("blueBox", "Blue : ")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.blueBox = param
    del param

    param = lastNode.createBooleanParam("alphaBox", "Alpha : ")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.alphaBox = param
    del param

    param = lastNode.createChoiceParam("channelSolo", "Solo : ")
    entries = [ ("Off", ""),
    ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.channelSolo = param
    del param

    param = lastNode.createStringParam("sep07", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep07 = param
    del param

    param = lastNode.createSeparatorParam("LINE02", "")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE02 = param
    del param

    param = lastNode.createChoiceParam("displaySelect", "Display : ")
    entries = [ ("Selection", ""),
    ("Quick Mask", ""),
    ("Outline", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.displaySelect = param
    del param

    param = lastNode.createChoiceParam("bgSelect", "Background : ")
    entries = [ ("Original", ""),
    ("Checkerboard", ""),
    ("Solid Color", ""),
    ("Input Background", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Solid Color")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(False)
    lastNode.bgSelect = param
    del param

    param = lastNode.createStringParam("sep08", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep08 = param
    del param

    param = lastNode.createSeparatorParam("QUICKMASK", "Quick Mask")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.QUICKMASK = param
    del param

    param = lastNode.createColorParam("Mask_Colourcolor", "Color : ", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Mask_Colourcolor = param
    del param

    param = lastNode.createDoubleParam("Mask_OVERmix", "Mix : ")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.25, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Mask_OVERmix = param
    del param

    param = lastNode.createStringParam("sep09", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep09 = param
    del param

    param = lastNode.createSeparatorParam("OUTLINE", "Outline")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.OUTLINE = param
    del param

    param = lastNode.createColorParam("Edge_Colourcolor", "Color : ", True)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(1, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Edge_Colourcolor = param
    del param

    param = lastNode.createDoubleParam("dilateSlider", "Size : ")
    param.setMinimum(0, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(3, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.dilateSlider = param
    del param

    param = lastNode.createStringParam("sep10", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createSeparatorParam("CHECK", "CheckerBoard")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CHECK = param
    del param

    param = lastNode.createDouble2DParam("BG_CheckerBoardboxSize", "Box Size : ")
    param.setMinimum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(64, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(1, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(64, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.BG_CheckerBoardboxSize = param
    del param

    param = lastNode.createStringParam("sep11", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep11 = param
    del param

    param = lastNode.createStringParam("sep12", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep12 = param
    del param

    lastNode.Credits = lastNode.createPageParam("Credits", "Credits")
    param = lastNode.createStringParam("sep101", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep101 = param
    del param

    param = lastNode.createStringParam("sep102", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep102 = param
    del param

    param = lastNode.createSeparatorParam("NAME", "V_CheckMatte v1.0")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.NAME = param
    del param

    param = lastNode.createStringParam("sep103", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep103 = param
    del param

    param = lastNode.createStringParam("sep104", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep104 = param
    del param

    param = lastNode.createSeparatorParam("LINE101", "")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.LINE101 = param
    del param

    param = lastNode.createStringParam("sep105", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep105 = param
    del param

    param = lastNode.createStringParam("sep106", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep106 = param
    del param

    param = lastNode.createSeparatorParam("FR", "Version NATRON du Gizmo Nuke développé par Victor Perez")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.FR = param
    del param

    param = lastNode.createStringParam("sep107", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep107 = param
    del param

    param = lastNode.createStringParam("sep108", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep108 = param
    del param

    param = lastNode.createSeparatorParam("ENG", "NATRON version of Nuke Gizmo developed by Victor Perez")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.ENG = param
    del param

    param = lastNode.createStringParam("sep109", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep109 = param
    del param

    param = lastNode.createStringParam("sep110", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep110 = param
    del param

    param = lastNode.createSeparatorParam("MAIL", "www.victorperez.co.uk")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.MAIL = param
    del param

    param = lastNode.createStringParam("sep113", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep113 = param
    del param

    param = lastNode.createStringParam("sep114", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep114 = param
    del param

    param = lastNode.createSeparatorParam("CONVERSION", " (Fabrice Fernandez - 2018)")

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.CONVERSION = param
    del param

    param = lastNode.createStringParam("sep115", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep115 = param
    del param

    param = lastNode.createStringParam("sep116", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    # Add the param to the page
    lastNode.Credits.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.sep116 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Credits', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "bg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("bg")
    lastNode.setLabel("bg")
    lastNode.setPosition(7452, 3183)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 1, 1)
    groupbg = lastNode

    del lastNode
    # End of node "bg"

    # Start of node "fg"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("fg")
    lastNode.setLabel("fg")
    lastNode.setPosition(4655, 3190)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 1, 1)
    groupfg = lastNode

    del lastNode
    # End of node "fg"

    # Start of node "BackdropNode_PLATE"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("BackdropNode_PLATE")
    lastNode.setLabel("BackdropNode_PLATE")
    lastNode.setPosition(4510, 2959)
    lastNode.setSize(383, 1414)
    lastNode.setColor(0.3137, 0.0902, 0.4275)
    groupBackdropNode_PLATE = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<b><font size=\"12\" color=\"#ffffff\" face=\"Droid Sans\">Plate Process</font></b>")
        del param

    del lastNode
    # End of node "BackdropNode_PLATE"

    # Start of node "Black_Alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Black_Alpha")
    lastNode.setLabel("Black_Alpha")
    lastNode.setPosition(4655, 3414)
    lastNode.setSize(90, 36)
    lastNode.setColor(0, 0, 0)
    groupBlack_Alpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "Black_Alpha"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(4692, 3318)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "BackdropNode_MATTE"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("BackdropNode_MATTE")
    lastNode.setLabel("BackdropNode_MATTE")
    lastNode.setPosition(4987, 2961)
    lastNode.setSize(1387, 1907)
    lastNode.setColor(0.298, 0.3333, 0.1176)
    groupBackdropNode_MATTE = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<b><font size=\"12\" color=\"#ffffff\" face=\"Droid Sans\">Matte Process</font></b>")
        del param

    del lastNode
    # End of node "BackdropNode_MATTE"

    # Start of node "matte"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("matte")
    lastNode.setLabel("matte")
    lastNode.setPosition(5107, 3197)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 1, 1)
    groupmatte = lastNode

    del lastNode
    # End of node "matte"

    # Start of node "RED_Matte"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("RED_Matte")
    lastNode.setLabel("RED_Matte")
    lastNode.setPosition(5107, 3446)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 0, 0)
    groupRED_Matte = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "RED_Matte"

    # Start of node "GREEN_Matte"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("GREEN_Matte")
    lastNode.setLabel("GREEN_Matte")
    lastNode.setPosition(5266, 3445)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.3333, 1, 0)
    groupGREEN_Matte = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    del lastNode
    # End of node "GREEN_Matte"

    # Start of node "BLUE_Matte"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("BLUE_Matte")
    lastNode.setLabel("BLUE_Matte")
    lastNode.setPosition(5438, 3453)
    lastNode.setSize(90, 36)
    lastNode.setColor(0, 0, 1)
    groupBLUE_Matte = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "BLUE_Matte"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(5303, 3322)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Dot13"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot13")
    lastNode.setLabel("Dot13")
    lastNode.setPosition(5475, 3322)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot13 = lastNode

    del lastNode
    # End of node "Dot13"

    # Start of node "ALPHA_SwitchOFF"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("ALPHA_SwitchOFF")
    lastNode.setLabel("ALPHA_SwitchOFF")
    lastNode.setPosition(5803, 3453)
    lastNode.setSize(90, 62)
    lastNode.setColor(0, 0, 0)
    groupALPHA_SwitchOFF = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "ALPHA_SwitchOFF"

    # Start of node "Dot14"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot14")
    lastNode.setLabel("Dot14")
    lastNode.setPosition(5664, 3322)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot14 = lastNode

    del lastNode
    # End of node "Dot14"

    # Start of node "ALPHA_SwitchOFF_BYPASS"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("ALPHA_SwitchOFF_BYPASS")
    lastNode.setLabel("ALPHA_SwitchOFF_BYPASS")
    lastNode.setPosition(5803, 3545)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupALPHA_SwitchOFF_BYPASS = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "ALPHA_SwitchOFF_BYPASS"

    # Start of node "Dot15"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15")
    lastNode.setLabel("Dot15")
    lastNode.setPosition(5664, 3476)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15 = lastNode

    del lastNode
    # End of node "Dot15"

    # Start of node "Dot16"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16")
    lastNode.setLabel("Dot16")
    lastNode.setPosition(5664, 3568)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16 = lastNode

    del lastNode
    # End of node "Dot16"

    # Start of node "BLUE_SwitchOFF"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("BLUE_SwitchOFF")
    lastNode.setLabel("BLUE_SwitchOFF")
    lastNode.setPosition(5810, 3729)
    lastNode.setSize(90, 62)
    lastNode.setColor(0, 0, 0)
    groupBLUE_SwitchOFF = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "BLUE_SwitchOFF"

    # Start of node "BLUE_SwitchOFF_BYPASS"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("BLUE_SwitchOFF_BYPASS")
    lastNode.setLabel("BLUE_SwitchOFF_BYPASS")
    lastNode.setPosition(5810, 3821)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupBLUE_SwitchOFF_BYPASS = lastNode

    del lastNode
    # End of node "BLUE_SwitchOFF_BYPASS"

    # Start of node "Dot15_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15_2")
    lastNode.setLabel("Dot15_2")
    lastNode.setPosition(5481, 3752)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15_2 = lastNode

    del lastNode
    # End of node "Dot15_2"

    # Start of node "Dot16_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16_2")
    lastNode.setLabel("Dot16_2")
    lastNode.setPosition(5481, 3844)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16_2 = lastNode

    del lastNode
    # End of node "Dot16_2"

    # Start of node "GREEN_SwitchOFF"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("GREEN_SwitchOFF")
    lastNode.setLabel("GREEN_SwitchOFF")
    lastNode.setPosition(5819, 4041)
    lastNode.setSize(90, 62)
    lastNode.setColor(0, 0, 0)
    groupGREEN_SwitchOFF = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "GREEN_SwitchOFF"

    # Start of node "GREEN_SwitchOFF_BYPASS"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("GREEN_SwitchOFF_BYPASS")
    lastNode.setLabel("GREEN_SwitchOFF_BYPASS")
    lastNode.setPosition(5819, 4133)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupGREEN_SwitchOFF_BYPASS = lastNode

    del lastNode
    # End of node "GREEN_SwitchOFF_BYPASS"

    # Start of node "Dot15_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15_2_2")
    lastNode.setLabel("Dot15_2_2")
    lastNode.setPosition(5310, 4064)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15_2_2 = lastNode

    del lastNode
    # End of node "Dot15_2_2"

    # Start of node "Dot16_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16_2_2")
    lastNode.setLabel("Dot16_2_2")
    lastNode.setPosition(5310, 4156)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16_2_2 = lastNode

    del lastNode
    # End of node "Dot16_2_2"

    # Start of node "RED_SwitchOFF"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("RED_SwitchOFF")
    lastNode.setLabel("RED_SwitchOFF")
    lastNode.setPosition(5822, 4367)
    lastNode.setSize(90, 62)
    lastNode.setColor(0, 0, 0)
    groupRED_SwitchOFF = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "RED_SwitchOFF"

    # Start of node "RED_SwitchOFF_BYPASS"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("RED_SwitchOFF_BYPASS")
    lastNode.setLabel("RED_SwitchOFF_BYPASS")
    lastNode.setPosition(5822, 4459)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupRED_SwitchOFF_BYPASS = lastNode

    del lastNode
    # End of node "RED_SwitchOFF_BYPASS"

    # Start of node "Dot15_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot15_2_2_2")
    lastNode.setLabel("Dot15_2_2_2")
    lastNode.setPosition(5144, 4390)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot15_2_2_2 = lastNode

    del lastNode
    # End of node "Dot15_2_2_2"

    # Start of node "Dot16_2_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot16_2_2_2")
    lastNode.setLabel("Dot16_2_2_2")
    lastNode.setPosition(5144, 4482)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot16_2_2_2 = lastNode

    del lastNode
    # End of node "Dot16_2_2_2"

    # Start of node "INDEX_Merge"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("INDEX_Merge")
    lastNode.setLabel("INDEX_Merge")
    lastNode.setPosition(6181, 4459)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupINDEX_Merge = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("max")
        del param

    del lastNode
    # End of node "INDEX_Merge"

    # Start of node "Matte_Channel_Selector"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Matte_Channel_Selector")
    lastNode.setLabel("Matte_Channel_Selector")
    lastNode.setPosition(6181, 4648)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupMatte_Channel_Selector = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Matte_Channel_Selector"

    # Start of node "Dot17"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot17")
    lastNode.setLabel("Dot17")
    lastNode.setPosition(5664, 4549)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot17 = lastNode

    del lastNode
    # End of node "Dot17"

    # Start of node "Dot18"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot18")
    lastNode.setLabel("Dot18")
    lastNode.setPosition(5144, 4671)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot18 = lastNode

    del lastNode
    # End of node "Dot18"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(5310, 4560)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(5481, 4545)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "Matte_onAlpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Matte_onAlpha")
    lastNode.setLabel("Matte_onAlpha")
    lastNode.setPosition(6181, 4756)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 1, 1)
    groupMatte_onAlpha = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Matte_onAlpha"

    # Start of node "Dilate_Matte"
    lastNode = app.createNode("net.sf.cimg.CImgDilate", 2, group)
    lastNode.setScriptName("Dilate_Matte")
    lastNode.setLabel("Dilate_Matte")
    lastNode.setPosition(6755, 4769)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 1, 1)
    groupDilate_Matte = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(3, 0)
        param.setValue(3, 1)
        del param

    del lastNode
    # End of node "Dilate_Matte"

    # Start of node "Solid_Edge"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Solid_Edge")
    lastNode.setLabel("Solid_Edge")
    lastNode.setPosition(6755, 4859)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.48, 0.66, 1)
    groupSolid_Edge = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(1e-06, 0)
        param.setValue(1e-06, 1)
        param.setValue(1e-06, 2)
        param.setValue(1e-06, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Solid_Edge"

    # Start of node "Alpha_onAll"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Alpha_onAll")
    lastNode.setLabel("Alpha_onAll")
    lastNode.setPosition(6755, 4952)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 1, 1)
    groupAlpha_onAll = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Alpha_onAll"

    # Start of node "Preserve_Matte"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Preserve_Matte")
    lastNode.setLabel("Preserve_Matte")
    lastNode.setPosition(6755, 5142)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPreserve_Matte = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("out")
        del param

    del lastNode
    # End of node "Preserve_Matte"

    # Start of node "Dot21"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot21")
    lastNode.setLabel("Dot21")
    lastNode.setPosition(6217, 5165)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot21 = lastNode

    del lastNode
    # End of node "Dot21"

    # Start of node "Color_SilhouetteEdge"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Color_SilhouetteEdge")
    lastNode.setLabel("Color_SilhouetteEdge")
    lastNode.setPosition(7001, 5253)
    lastNode.setSize(90, 88)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupColor_SilhouetteEdge = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    del lastNode
    # End of node "Color_SilhouetteEdge"

    # Start of node "Dot22"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot22")
    lastNode.setLabel("Dot22")
    lastNode.setPosition(6792, 5289)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot22 = lastNode

    del lastNode
    # End of node "Dot22"

    # Start of node "Edge_Colour"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Edge_Colour")
    lastNode.setLabel("Edge_Colour")
    lastNode.setPosition(6988, 3223)
    lastNode.setSize(117, 85)
    lastNode.setColor(1, 0.6667, 0)
    groupEdge_Colour = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(0, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Edge_Colour"

    # Start of node "Mask_Colour"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Mask_Colour")
    lastNode.setLabel("Mask_Colour")
    lastNode.setPosition(6486, 3209)
    lastNode.setSize(117, 85)
    lastNode.setColor(1, 0.6667, 0)
    groupMask_Colour = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Mask_Colour"

    # Start of node "BackdropNode_MASKEDGE"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("BackdropNode_MASKEDGE")
    lastNode.setLabel("BackdropNode_MASKEDGE")
    lastNode.setPosition(6402, 2965)
    lastNode.setSize(821, 2484)
    lastNode.setColor(0.1176, 0.3216, 0.3529)
    groupBackdropNode_MASKEDGE = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<b><font size=\"12\" color=\"#ffffff\" face=\"Droid Sans\">Mask & Edge Process</font></b>")
        del param

    del lastNode
    # End of node "BackdropNode_MASKEDGE"

    # Start of node "Color_Silhouette"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Color_Silhouette")
    lastNode.setLabel("Color_Silhouette")
    lastNode.setPosition(6499, 5260)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupColor_Silhouette = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("multiply")
        del param

    del lastNode
    # End of node "Color_Silhouette"

    # Start of node "Dot23"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot23")
    lastNode.setLabel("Dot23")
    lastNode.setPosition(6216, 5283)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot23 = lastNode

    del lastNode
    # End of node "Dot23"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(5144, 3322)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Reformat_ALL"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat_ALL")
    lastNode.setLabel("Reformat_ALL")
    lastNode.setPosition(6499, 3392)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.6667, 0.3333, 1)
    groupReformat_ALL = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Reformat_ALL"

    # Start of node "Reformat_ALL2"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat_ALL2")
    lastNode.setLabel("Reformat_ALL2")
    lastNode.setPosition(7001, 3372)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.6667, 0.3333, 1)
    groupReformat_ALL2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Reformat_ALL2"

    # Start of node "Reformat_ALL3"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat_ALL3")
    lastNode.setLabel("Reformat_ALL3")
    lastNode.setPosition(7667, 3382)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat_ALL3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Reformat_ALL3"

    # Start of node "Reformat_ALL4"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat_ALL4")
    lastNode.setLabel("Reformat_ALL4")
    lastNode.setPosition(7935, 3385)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat_ALL4 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Reformat_ALL4"

    # Start of node "Alpha_onPlate"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Alpha_onPlate")
    lastNode.setLabel("Alpha_onPlate")
    lastNode.setPosition(4655, 5273)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupAlpha_onPlate = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Alpha_onPlate"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(6216, 5479)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "LUT_Correction"
    lastNode = app.createNode("fr.inria.openfx.OCIOColorSpace", 1, group)
    lastNode.setScriptName("LUT_Correction")
    lastNode.setLabel("LUT_Correction")
    lastNode.setPosition(5921, 5456)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 1, 1)
    groupLUT_Correction = lastNode

    param = lastNode.getParam("ocioInputSpace")
    if param is not None:
        param.setValue("sRGB")
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "LUT_Correction"

    # Start of node "LUT_Correction_On_Alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("LUT_Correction_On_Alpha")
    lastNode.setLabel("LUT_Correction_On_Alpha")
    lastNode.setPosition(5921, 5559)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 1, 1)
    groupLUT_Correction_On_Alpha = lastNode

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "LUT_Correction_On_Alpha"

    # Start of node "LUT_Compensation_Switch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("LUT_Compensation_Switch")
    lastNode.setLabel("LUT_Compensation_Switch")
    lastNode.setPosition(6179, 5666)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 1, 1)
    groupLUT_Compensation_Switch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "LUT_Compensation_Switch"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(5958, 5689)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Mask_Switch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Mask_Switch")
    lastNode.setLabel("Mask_Switch")
    lastNode.setPosition(6499, 5588)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 0.6667, 0)
    groupMask_Switch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Mask_Switch"

    # Start of node "Outline_Switch"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Outline_Switch")
    lastNode.setLabel("Outline_Switch")
    lastNode.setPosition(7001, 5576)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupOutline_Switch = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Outline_Switch"

    # Start of node "PremultPlate_over_BGChecker"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("PremultPlate_over_BGChecker")
    lastNode.setLabel("PremultPlate_over_BGChecker")
    lastNode.setPosition(7452, 5750)
    lastNode.setSize(90, 88)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremultPlate_over_BGChecker = lastNode

    del lastNode
    # End of node "PremultPlate_over_BGChecker"

    # Start of node "Premultiply_Plate"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premultiply_Plate")
    lastNode.setLabel("Premultiply_Plate")
    lastNode.setPosition(4655, 5763)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 1, 1)
    groupPremultiply_Plate = lastNode

    del lastNode
    # End of node "Premultiply_Plate"

    # Start of node "BG_Checker"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("BG_Checker")
    lastNode.setLabel("BG_Checker")
    lastNode.setPosition(7452, 3551)
    lastNode.setSize(90, 36)
    lastNode.setColor(1, 0.6667, 0)
    groupBG_Checker = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(2, 0)
        del param

    del lastNode
    # End of node "BG_Checker"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(4810, 3314)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(4810, 2881)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(7292, 2881)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(7292, 3561)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "BG_CheckerBoard"
    lastNode = app.createNode("net.sf.openfx.CheckerBoardPlugin", 1, group)
    lastNode.setScriptName("BG_CheckerBoard")
    lastNode.setLabel("BG_CheckerBoard")
    lastNode.setPosition(7654, 3164)
    lastNode.setSize(117, 85)
    lastNode.setColor(1, 0.6667, 0)
    groupBG_CheckerBoard = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "BG_CheckerBoard"

    # Start of node "BG_SolidColor"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("BG_SolidColor")
    lastNode.setLabel("BG_SolidColor")
    lastNode.setPosition(7922, 3150)
    lastNode.setSize(117, 85)
    lastNode.setColor(1, 0.6667, 0)
    groupBG_SolidColor = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "BG_SolidColor"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(7972, 3558)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Backdrop1"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop1")
    lastNode.setLabel("Backdrop1")
    lastNode.setPosition(7355, 2961)
    lastNode.setSize(780, 2947)
    lastNode.setColor(0.3608, 0.1725, 0.08627)
    groupBackdrop1 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<b><font size=\"12\" color=\"#ffffff\" face=\"Droid Sans\">BG Process</font></b>")
        del param

    del lastNode
    # End of node "Backdrop1"

    # Start of node "Outline_OVER"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Outline_OVER")
    lastNode.setLabel("Outline_OVER")
    lastNode.setPosition(7452, 6059)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupOutline_OVER = lastNode

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    del lastNode
    # End of node "Outline_OVER"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(7031, 6082)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Mask_OVER"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Mask_OVER")
    lastNode.setLabel("Mask_OVER")
    lastNode.setPosition(7452, 6160)
    lastNode.setSize(90, 62)
    lastNode.setColor(1, 0.6667, 0)
    groupMask_OVER = lastNode

    param = lastNode.getParam("bbox")
    if param is not None:
        param.set("b")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.25, 0)
        del param

    del lastNode
    # End of node "Mask_OVER"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(6529, 6183)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Black_FinalAlpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Black_FinalAlpha")
    lastNode.setLabel("Black_FinalAlpha")
    lastNode.setPosition(7452, 6471)
    lastNode.setSize(90, 62)
    lastNode.setColor(0, 0, 0)
    groupBlack_FinalAlpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "Black_FinalAlpha"

    # Start of node "Matte_onFinalAlpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Matte_onFinalAlpha")
    lastNode.setLabel("Matte_onFinalAlpha")
    lastNode.setPosition(7452, 6661)
    lastNode.setSize(90, 62)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupMatte_onFinalAlpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Matte_onFinalAlpha"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(6216, 6684)
    lastNode.setSize(16, 16)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(7452, 6901)
    lastNode.setSize(90, 36)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupBlack_Alpha.connectInput(0, groupDot1_2)
    groupDot1_2.connectInput(0, groupfg)
    groupRED_Matte.connectInput(0, groupDot1)
    groupGREEN_Matte.connectInput(0, groupDot12)
    groupBLUE_Matte.connectInput(0, groupDot13)
    groupDot12.connectInput(0, groupDot1)
    groupDot13.connectInput(0, groupDot12)
    groupALPHA_SwitchOFF.connectInput(0, groupDot15)
    groupDot14.connectInput(0, groupDot13)
    groupALPHA_SwitchOFF_BYPASS.connectInput(0, groupALPHA_SwitchOFF)
    groupALPHA_SwitchOFF_BYPASS.connectInput(1, groupDot16)
    groupDot15.connectInput(0, groupDot14)
    groupDot16.connectInput(0, groupDot15)
    groupBLUE_SwitchOFF.connectInput(0, groupDot15_2)
    groupBLUE_SwitchOFF_BYPASS.connectInput(0, groupBLUE_SwitchOFF)
    groupBLUE_SwitchOFF_BYPASS.connectInput(1, groupDot16_2)
    groupDot15_2.connectInput(0, groupBLUE_Matte)
    groupDot16_2.connectInput(0, groupDot15_2)
    groupGREEN_SwitchOFF.connectInput(0, groupDot15_2_2)
    groupGREEN_SwitchOFF_BYPASS.connectInput(0, groupGREEN_SwitchOFF)
    groupGREEN_SwitchOFF_BYPASS.connectInput(1, groupDot16_2_2)
    groupDot15_2_2.connectInput(0, groupGREEN_Matte)
    groupDot16_2_2.connectInput(0, groupDot15_2_2)
    groupRED_SwitchOFF.connectInput(0, groupDot15_2_2_2)
    groupRED_SwitchOFF_BYPASS.connectInput(0, groupRED_SwitchOFF)
    groupRED_SwitchOFF_BYPASS.connectInput(1, groupDot16_2_2_2)
    groupDot15_2_2_2.connectInput(0, groupRED_Matte)
    groupDot16_2_2_2.connectInput(0, groupDot15_2_2_2)
    groupINDEX_Merge.connectInput(0, groupGREEN_SwitchOFF_BYPASS)
    groupINDEX_Merge.connectInput(1, groupRED_SwitchOFF_BYPASS)
    groupINDEX_Merge.connectInput(3, groupALPHA_SwitchOFF_BYPASS)
    groupINDEX_Merge.connectInput(4, groupBLUE_SwitchOFF_BYPASS)
    groupMatte_Channel_Selector.connectInput(0, groupINDEX_Merge)
    groupMatte_Channel_Selector.connectInput(1, groupDot18)
    groupMatte_Channel_Selector.connectInput(2, groupDot19)
    groupMatte_Channel_Selector.connectInput(3, groupDot20)
    groupMatte_Channel_Selector.connectInput(4, groupDot17)
    groupDot17.connectInput(0, groupDot16)
    groupDot18.connectInput(0, groupDot16_2_2_2)
    groupDot19.connectInput(0, groupDot16_2_2)
    groupDot20.connectInput(0, groupDot16_2)
    groupMatte_onAlpha.connectInput(0, groupMatte_Channel_Selector)
    groupDilate_Matte.connectInput(0, groupMatte_onAlpha)
    groupSolid_Edge.connectInput(0, groupDilate_Matte)
    groupAlpha_onAll.connectInput(0, groupSolid_Edge)
    groupPreserve_Matte.connectInput(0, groupDot21)
    groupPreserve_Matte.connectInput(1, groupAlpha_onAll)
    groupDot21.connectInput(0, groupMatte_onAlpha)
    groupColor_SilhouetteEdge.connectInput(0, groupReformat_ALL2)
    groupColor_SilhouetteEdge.connectInput(1, groupDot22)
    groupDot22.connectInput(0, groupPreserve_Matte)
    groupColor_Silhouette.connectInput(0, groupDot23)
    groupColor_Silhouette.connectInput(1, groupReformat_ALL)
    groupDot23.connectInput(0, groupDot21)
    groupDot1.connectInput(0, groupmatte)
    groupReformat_ALL.connectInput(0, groupMask_Colour)
    groupReformat_ALL2.connectInput(0, groupEdge_Colour)
    groupReformat_ALL3.connectInput(0, groupBG_CheckerBoard)
    groupReformat_ALL4.connectInput(0, groupBG_SolidColor)
    groupAlpha_onPlate.connectInput(0, groupBlack_Alpha)
    groupAlpha_onPlate.connectInput(1, groupDot23)
    groupDot2.connectInput(0, groupDot23)
    groupLUT_Correction.connectInput(0, groupDot2)
    groupLUT_Correction_On_Alpha.connectInput(0, groupLUT_Correction)
    groupLUT_Compensation_Switch.connectInput(0, groupDot2)
    groupLUT_Compensation_Switch.connectInput(1, groupDot3)
    groupDot3.connectInput(0, groupLUT_Correction_On_Alpha)
    groupMask_Switch.connectInput(1, groupColor_Silhouette)
    groupOutline_Switch.connectInput(1, groupColor_SilhouetteEdge)
    groupPremultPlate_over_BGChecker.connectInput(0, groupBG_Checker)
    groupPremultPlate_over_BGChecker.connectInput(1, groupPremultiply_Plate)
    groupPremultiply_Plate.connectInput(0, groupAlpha_onPlate)
    groupBG_Checker.connectInput(0, groupDot7)
    groupBG_Checker.connectInput(1, groupReformat_ALL3)
    groupBG_Checker.connectInput(2, groupDot8)
    groupBG_Checker.connectInput(3, groupbg)
    groupDot4.connectInput(0, groupDot1_2)
    groupDot5.connectInput(0, groupDot4)
    groupDot6.connectInput(0, groupDot5)
    groupDot7.connectInput(0, groupDot6)
    groupDot8.connectInput(0, groupReformat_ALL4)
    groupOutline_OVER.connectInput(0, groupPremultPlate_over_BGChecker)
    groupOutline_OVER.connectInput(1, groupDot9)
    groupDot9.connectInput(0, groupOutline_Switch)
    groupMask_OVER.connectInput(0, groupOutline_OVER)
    groupMask_OVER.connectInput(1, groupDot10)
    groupDot10.connectInput(0, groupMask_Switch)
    groupBlack_FinalAlpha.connectInput(0, groupMask_OVER)
    groupMatte_onFinalAlpha.connectInput(0, groupBlack_FinalAlpha)
    groupMatte_onFinalAlpha.connectInput(1, groupDot11)
    groupDot11.connectInput(0, groupLUT_Compensation_Switch)
    groupOutput1.connectInput(0, groupMatte_onFinalAlpha)

    param = groupMatte_Channel_Selector.getParam("which")
    param.setExpression("thisGroup.channelSolo.get()", False, 0)
    del param
    param = groupDilate_Matte.getParam("size")
    param.slaveTo(group.getParam("dilateSlider"), 0, 0)
    param.slaveTo(group.getParam("dilateSlider"), 1, 0)
    del param
    param = groupEdge_Colour.getParam("color")
    group.getParam("Edge_Colourcolor").setAsAlias(param)
    del param
    param = groupMask_Colour.getParam("color")
    group.getParam("Mask_Colourcolor").setAsAlias(param)
    del param
    param = groupReformat_ALL.getParam("NatronParamFormatChoice")
    group.getParam("Reformat_ALLNatronParamFormatChoice").setAsAlias(param)
    del param
    param = groupReformat_ALL2.getParam("useRoD")
    param.slaveTo(groupReformat_ALL.getParam("useRoD"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("reformatType")
    param.slaveTo(groupReformat_ALL.getParam("reformatType"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("NatronParamFormatChoice")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatChoice"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("NatronParamFormatSize")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 1, 1)
    del param
    param = groupReformat_ALL2.getParam("boxSize")
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 1, 1)
    del param
    param = groupReformat_ALL2.getParam("boxFixed")
    param.slaveTo(groupReformat_ALL.getParam("boxFixed"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("boxPar")
    param.slaveTo(groupReformat_ALL.getParam("boxPar"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("reformatScale")
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 1, 1)
    del param
    param = groupReformat_ALL2.getParam("reformatScaleUniform")
    param.slaveTo(groupReformat_ALL.getParam("reformatScaleUniform"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("resize")
    param.slaveTo(groupReformat_ALL.getParam("resize"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("reformatCentered")
    param.slaveTo(groupReformat_ALL.getParam("reformatCentered"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("flip")
    param.slaveTo(groupReformat_ALL.getParam("flip"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("flop")
    param.slaveTo(groupReformat_ALL.getParam("flop"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("turn")
    param.slaveTo(groupReformat_ALL.getParam("turn"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("preserveBB")
    param.slaveTo(groupReformat_ALL.getParam("preserveBB"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("filter")
    param.slaveTo(groupReformat_ALL.getParam("filter"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("clamp")
    param.slaveTo(groupReformat_ALL.getParam("clamp"), 0, 0)
    del param
    param = groupReformat_ALL2.getParam("black_outside")
    param.slaveTo(groupReformat_ALL.getParam("black_outside"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("useRoD")
    param.slaveTo(groupReformat_ALL.getParam("useRoD"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("reformatType")
    param.slaveTo(groupReformat_ALL.getParam("reformatType"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("NatronParamFormatChoice")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatChoice"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("NatronParamFormatSize")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 1, 1)
    del param
    param = groupReformat_ALL3.getParam("boxSize")
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 1, 1)
    del param
    param = groupReformat_ALL3.getParam("boxFixed")
    param.slaveTo(groupReformat_ALL.getParam("boxFixed"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("boxPar")
    param.slaveTo(groupReformat_ALL.getParam("boxPar"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("reformatScale")
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 1, 1)
    del param
    param = groupReformat_ALL3.getParam("reformatScaleUniform")
    param.slaveTo(groupReformat_ALL.getParam("reformatScaleUniform"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("resize")
    param.slaveTo(groupReformat_ALL.getParam("resize"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("reformatCentered")
    param.slaveTo(groupReformat_ALL.getParam("reformatCentered"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("flip")
    param.slaveTo(groupReformat_ALL.getParam("flip"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("flop")
    param.slaveTo(groupReformat_ALL.getParam("flop"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("turn")
    param.slaveTo(groupReformat_ALL.getParam("turn"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("preserveBB")
    param.slaveTo(groupReformat_ALL.getParam("preserveBB"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("filter")
    param.slaveTo(groupReformat_ALL.getParam("filter"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("clamp")
    param.slaveTo(groupReformat_ALL.getParam("clamp"), 0, 0)
    del param
    param = groupReformat_ALL3.getParam("black_outside")
    param.slaveTo(groupReformat_ALL.getParam("black_outside"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("useRoD")
    param.slaveTo(groupReformat_ALL.getParam("useRoD"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("reformatType")
    param.slaveTo(groupReformat_ALL.getParam("reformatType"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("NatronParamFormatChoice")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatChoice"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("NatronParamFormatSize")
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("NatronParamFormatSize"), 1, 1)
    del param
    param = groupReformat_ALL4.getParam("boxSize")
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("boxSize"), 1, 1)
    del param
    param = groupReformat_ALL4.getParam("boxFixed")
    param.slaveTo(groupReformat_ALL.getParam("boxFixed"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("boxPar")
    param.slaveTo(groupReformat_ALL.getParam("boxPar"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("reformatScale")
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 0, 0)
    param.slaveTo(groupReformat_ALL.getParam("reformatScale"), 1, 1)
    del param
    param = groupReformat_ALL4.getParam("reformatScaleUniform")
    param.slaveTo(groupReformat_ALL.getParam("reformatScaleUniform"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("resize")
    param.slaveTo(groupReformat_ALL.getParam("resize"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("reformatCentered")
    param.slaveTo(groupReformat_ALL.getParam("reformatCentered"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("flip")
    param.slaveTo(groupReformat_ALL.getParam("flip"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("flop")
    param.slaveTo(groupReformat_ALL.getParam("flop"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("turn")
    param.slaveTo(groupReformat_ALL.getParam("turn"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("preserveBB")
    param.slaveTo(groupReformat_ALL.getParam("preserveBB"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("filter")
    param.slaveTo(groupReformat_ALL.getParam("filter"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("clamp")
    param.slaveTo(groupReformat_ALL.getParam("clamp"), 0, 0)
    del param
    param = groupReformat_ALL4.getParam("black_outside")
    param.slaveTo(groupReformat_ALL.getParam("black_outside"), 0, 0)
    del param
    param = groupLUT_Correction.getParam("ocioInputSpaceIndex")
    group.getParam("LUT_CorrectionocioInputSpaceIndex").setAsAlias(param)
    del param
    param = groupLUT_Compensation_Switch.getParam("which")
    param.setExpression("thisGroup.linearizeBox.get()", False, 0)
    del param
    param = groupMask_Switch.getParam("which")
    param.setExpression("myValue = thisGroup.displaySelect.get() \nif myValue == 1 :\n\tret = 1\nelse :\n\tret = 0", True, 0)
    del param
    param = groupOutline_Switch.getParam("which")
    param.setExpression("myValue = thisGroup.displaySelect.get() \nif myValue == 2 :\n\tret = 1\nelse :\n\tret = 0", True, 0)
    del param
    param = groupBG_Checker.getParam("which")
    param.setExpression("thisGroup.bgSelect.get()", False, 0)
    del param
    param = groupBG_CheckerBoard.getParam("boxSize")
    group.getParam("BG_CheckerBoardboxSize").setAsAlias(param)
    del param
    param = groupMask_OVER.getParam("mix")
    group.getParam("Mask_OVERmix").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["V_CheckMatteExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
